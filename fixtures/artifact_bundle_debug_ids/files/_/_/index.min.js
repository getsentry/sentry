/* eslint-disable */
Object.defineProperty(exports,"__esModule",{value:true});const tslib_1=require("tslib");const hub_1=require("@sentry/core");function callOnHub(method){const args=[];for(let _i=1;_i<arguments.length;_i++){args[_i-1]=arguments[_i]}const hub=hub_1.getCurrentHub();if(hub&&hub[method]){return hub[method].apply(hub,tslib_1.__spread(args))}throw new Error("No hub defined or "+method+" was not found on the hub, please open a bug report.")}function captureException(exception){let syntheticException;try{throw new Error("Sentry syntheticException")}catch(error){syntheticException=error}return callOnHub("captureException",exception,{originalException:exception,syntheticException:syntheticException})}exports.captureException=captureException;function captureMessage(message,level){let syntheticException;try{throw new Error(message)}catch(exception){syntheticException=exception}return callOnHub("captureMessage",message,level,{originalException:message,syntheticException:syntheticException})}exports.captureMessage=captureMessage;function captureEvent(event){return callOnHub("captureEvent",event)}exports.captureEvent=captureEvent;function addBreadcrumb(breadcrumb){callOnHub("addBreadcrumb",breadcrumb)}exports.addBreadcrumb=addBreadcrumb;function configureScope(callback){callOnHub("configureScope",callback)}exports.configureScope=configureScope;function withScope(callback){callOnHub("withScope",callback)}exports.withScope=withScope;function _callOnClient(method){const args=[];for(let _i=1;_i<arguments.length;_i++){args[_i-1]=arguments[_i]}callOnHub.apply(void 0,tslib_1.__spread(["_invokeClient",method],args))}exports._callOnClient=_callOnClient;