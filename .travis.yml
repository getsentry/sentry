filter_secrets: false

dist: trusty
sudo: required
group: deprecated-2017Q4
language: python
python: 2.7

branches:
  only:
  - master

cache:
  pip: true
  yarn: true
  directories:
    - node_modules
    - $HOME/google-cloud-sdk

addons:
  apt:
    update: true
    packages:
      - libxmlsec1-dev
  chrome: stable

env:
  global:
    - NODE_ENV=development
    - PIP_DISABLE_PIP_VERSION_CHECK=on
    - SENTRY_LIGHT_BUILD=1
    - SENTRY_SKIP_BACKEND_VALIDATION=1
    - SOUTH_TESTS_MIGRATE=1
    - DJANGO_VERSION=">=1.6.11,<1.7"
    - NODE_VERSION="8.9.1"
    - YARN_VERSION="1.3.2"

script:
  - make travis-lint-$TEST_SUITE
  - make travis-test-$TEST_SUITE
  - make travis-scan-$TEST_SUITE

after_success:
  - pip install codecov
  - codecov -e TEST_SUITE

after_failure:
  - dmesg | tail -n 100

after_script:
  - npm install -g @zeus-ci/cli
  - zeus upload -t "text/xml+xunit" junit.xml
  - zeus upload -t "text/xml+xunit" jest.junit.xml
  - zeus upload -t "text/xml+coverage" coverage.xml
  - zeus upload -t "text/xml+coverage" coverage/cobertura-coverage.xml
  - zeus upload -t "text/html+pytest" pytest.html
  - zeus upload -t "text/plain+pycodestyle" flake8.pycodestyle.log
  - zeus upload -t "text/xml+checkstyle" eslint.checkstyle.xml
  - zeus upload -t "application/webpack-stats+json" webpack-stats.json

# each job in the matrix inherits `env/global` and uses everything above,
# but custom `services`, `before_install`, `install`, and `before_script` directives
# may be defined to define and setup individual job environments with more precision.
matrix:
  fast_finish: true
  include:
    # only the sqlite suite runs riak tests
    - python: 2.7
      env: TEST_SUITE=sqlite DB=sqlite
      services:
        - memcached
        - riak
        - redis-server
      install:
        - pip install -e ".[dev,tests,optional]"

    - python: 2.7
      env: TEST_SUITE=postgres DB=postgres
      services:
        - memcached
        - redis-server
        - postgresql
      install:
        - pip install -e ".[dev,tests,optional]"
      before_script:
        - psql -c 'create database sentry;' -U postgres

    - python: 2.7
      env: TEST_SUITE=mysql DB=mysql
      services:
        - memcached
        - mysql
        - redis-server
      install:
        - pip install -e ".[dev,tests,optional]"
        - pip install mysqlclient
      before_script:
        - mysql -u root -e 'create database sentry;'

    - python: 2.7
      env: TEST_SUITE=acceptance
      services:
        - memcached
        - redis-server
        - postgresql
      before_install:
        - nvm install "$NODE_VERSION"
        - npm install -g "yarn@${YARN_VERSION}"
      install:
        - pip install -e ".[dev,tests,optional]"
        - wget -N "http://chromedriver.storage.googleapis.com/$(curl https://chromedriver.storage.googleapis.com/LATEST_RELEASE)/chromedriver_linux64.zip" -P ~/
        - unzip ~/chromedriver_linux64.zip -d ~/
        - rm ~/chromedriver_linux64.zip
        - sudo install -m755 ~/chromedriver /usr/local/bin/
        - yarn install --pure-lockfile
      before_script:
        - psql -c 'create database sentry;' -U postgres

    - python: 2.7
      env: TEST_SUITE=js
      before_install:
        - nvm install "$NODE_VERSION"
        - npm install -g "yarn@${YARN_VERSION}"
      install:
        - yarn install --pure-lockfile
        - pip install $(cat requirements*.txt | grep -E 'click|pycodestyle')

    - python: 2.7
      env: TEST_SUITE=cli
      services:
        - postgresql
        - redis-server
      install:
        - pip install -e .
      before_script:
        - psql -c 'create database sentry;' -U postgres

    - python: 2.7
      env: TEST_SUITE=dist

    - python: 2.7
      env: SENTRY_TAGSTORE=sentry.tagstore.v2.V2TagStorage TEST_SUITE=postgres DB=postgres
      services:
        - memcached
        - redis-server
        - postgresql
      install:
        - pip install -e ".[dev,tests,optional]"
      before_script:
        - psql -c 'create database sentry;' -U postgres

    # django 1.8 in testing - allowed to fail
    - python: 2.7
      env: TEST_SUITE=postgres DJANGO_VERSION=">=1.8,<1.9"
      services:
        - memcached
        - redis-server
        - postgresql
      install:
        - pip install -e ".[dev,tests,optional]"
      before_script:
        - psql -c 'create database sentry;' -U postgres

    # snuba in testing - allowed to fail
    - python: 2.7
      env: TEST_SUITE=snuba SENTRY_TAGSTORE=sentry.tagstore.snuba.SnubaTagStorage
      services:
        - docker
        - memcached
        - redis-server
        - postgresql
      before_install:
        - docker run -d --name clickhouse-server -p 9000:9000 -p 9009:9009 -p 8123:8123 --ulimit nofile=262144:262144 yandex/clickhouse-server
        - docker run -d --env SNUBA_SETTINGS=test --env CLICKHOUSE_SERVER=clickhouse-server:9000 --name snuba -p 1218:1218 --link clickhouse-server:clickhouse-server getsentry/snuba
        - docker ps -a
      install:
        - pip install -e ".[dev,tests,optional]"
      before_script:
        - psql -c 'create database sentry;' -U postgres

    # Deploy 'storybook' (component & style guide) - allowed to fail
    - language: node_js
      env: STORYBOOK_BUILD=1
      before_install:
        # Decrypt the credentials we added to the repo using the key we added with the Travis command line tool
        - openssl aes-256-cbc -K $encrypted_020be61ef175_key -iv $encrypted_020be61ef175_iv -in .travis/storybook-credentials.tar.gz.enc -out credentials.tar.gz -d
        # If the SDK is not already cached, download it and unpack it
        - if [ ! -d ${HOME}/google-cloud-sdk ]; then curl https://sdk.cloud.google.com | bash; fi
        - tar -xzf credentials.tar.gz
        # Use the decrypted service account credentials to authenticate the command line tool
        - gcloud auth activate-service-account --key-file client-secret.json
        # Travis doesn't "inherit" steps like before_install in the build matrix, so we have to explicitly install our package managers
        - nvm install "$NODE_VERSION"
        - npm install -g "yarn@${YARN_VERSION}"
      install:
        - yarn install --pure-lockfile
        - gcloud version
      script: bash .travis/deploy-storybook.sh
      after_success: skip
      after_failure: skip

# jobs are defined in matrix/include
# to specify which jobs are allowed to fail, match the env exactly in matrix/allow_failures
  allow_failures:
    - python: 2.7
      env: TEST_SUITE=postgres DJANGO_VERSION=">=1.8,<1.9"
    - python: 2.7
      env: TEST_SUITE=snuba SENTRY_TAGSTORE=sentry.tagstore.snuba.SnubaTagStorage
    - language: node_js
      env: STORYBOOK_BUILD=1

notifications:
  webhooks:
    urls:
      - https://zeus.ci/hooks/fa079cf6-8e6b-11e7-9155-0a580a28081c/public/provider/travis/webhook
    on_success: always
    on_failure: always
    on_start: always
    on_cancel: always
    on_error: always
