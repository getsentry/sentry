// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ExternalIssueForm create renders 1`] = `
<ExternalIssueForm
  action="create"
  group={
    Object {
      "activity": Array [],
      "annotations": Array [],
      "assignedTo": null,
      "count": "327482",
      "culprit": "fetchData(app/components/group/suggestedOwners)",
      "firstRelease": null,
      "firstSeen": "2019-04-05T19:44:05.963Z",
      "hasSeen": false,
      "id": "1",
      "isBookmarked": false,
      "isPublic": false,
      "isSubscribed": false,
      "lastRelease": null,
      "lastSeen": "2019-04-11T01:08:59Z",
      "level": "warning",
      "logger": null,
      "metadata": Object {
        "function": "fetchData",
        "type": "RequestError",
      },
      "numComments": 0,
      "participants": Array [],
      "permalink": "https://foo.io/organizations/foo/issues/1234/",
      "platform": "javascript",
      "pluginActions": Array [],
      "pluginContexts": Array [],
      "pluginIssues": Array [],
      "project": Object {
        "id": "2",
        "platform": "javascript",
        "slug": "project-slug",
      },
      "seenBy": Array [],
      "shareId": null,
      "shortId": "JAVASCRIPT-6QS",
      "stats": Object {
        "24h": Array [
          Array [
            1517281200,
            2,
          ],
          Array [
            1517310000,
            1,
          ],
        ],
        "30d": Array [
          Array [
            1514764800,
            1,
          ],
          Array [
            1515024000,
            122,
          ],
        ],
      },
      "status": "unresolved",
      "statusDetails": Object {},
      "subscriptionDetails": null,
      "tags": Array [],
      "title": "RequestError: GET /issues/ 404",
      "type": "error",
      "userCount": 35097,
      "userReportCount": 0,
    }
  }
  integration={
    Object {
      "configData": Object {},
      "configOrganization": Array [],
      "domainName": "github.com/test-integration",
      "externalIssues": Array [],
      "icon": "http://example.com/integration_icon.png",
      "id": "1",
      "name": "Test Integration",
      "projects": Array [],
      "provider": Object {
        "canAdd": true,
        "features": Array [],
        "key": "github",
        "name": "GitHub",
      },
    }
  }
  onSubmitSuccess={[MockFunction]}
>
  <Form
    allowUndo={false}
    apiEndpoint="/groups/1/integrations/1/"
    apiMethod="POST"
    cancelLabel="Cancel"
    className="form-stacked"
    footerClass="modal-footer"
    initialData={Object {}}
    onFieldChange={[Function]}
    onSubmitSuccess={[Function]}
    requireChanges={false}
    saveOnBlur={false}
    submitDisabled={false}
    submitLabel="Create Issue"
    submitPriority="primary"
  >
    <form
      className="form-stacked"
      onSubmit={[Function]}
    >
      <div />
      <StyledFooter
        className="modal-footer"
        saveOnBlur={false}
      >
        <div
          className="modal-footer css-yfxs1k-StyledFooter e1r1zmbj0"
        >
          <DefaultButtons>
            <div
              className="css-1utgghf-DefaultButtons e1r1zmbj1"
            >
              <Observer>
                <Button
                  align="center"
                  data-test-id="form-submit"
                  disabled={false}
                  priority="primary"
                  type="submit"
                >
                  <StyledButton
                    aria-disabled={false}
                    aria-label="Create Issue"
                    data-test-id="form-submit"
                    disabled={false}
                    onClick={[Function]}
                    priority="primary"
                    role="button"
                    type="submit"
                  >
                    <ForwardRef
                      aria-disabled={false}
                      aria-label="Create Issue"
                      className="css-1e05jtd-StyledButton edwq9my0"
                      data-test-id="form-submit"
                      disabled={false}
                      onClick={[Function]}
                      priority="primary"
                      role="button"
                      type="submit"
                    >
                      <button
                        aria-disabled={false}
                        aria-label="Create Issue"
                        className="css-1e05jtd-StyledButton edwq9my0"
                        data-test-id="form-submit"
                        onClick={[Function]}
                        role="button"
                        type="submit"
                      >
                        <ButtonLabel
                          align="center"
                          priority="primary"
                        >
                          <Component
                            align="center"
                            className="css-zmpclt-ButtonLabel edwq9my1"
                            priority="primary"
                          >
                            <span
                              className="css-zmpclt-ButtonLabel edwq9my1"
                            >
                              Create Issue
                            </span>
                          </Component>
                        </ButtonLabel>
                      </button>
                    </ForwardRef>
                  </StyledButton>
                </Button>
              </Observer>
            </div>
          </DefaultButtons>
        </div>
      </StyledFooter>
    </form>
  </Form>
</ExternalIssueForm>
`;

exports[`ExternalIssueForm link renders 1`] = `
<ExternalIssueForm
  action="link"
  group={
    Object {
      "activity": Array [],
      "annotations": Array [],
      "assignedTo": null,
      "count": "327482",
      "culprit": "fetchData(app/components/group/suggestedOwners)",
      "firstRelease": null,
      "firstSeen": "2019-04-05T19:44:05.963Z",
      "hasSeen": false,
      "id": "1",
      "isBookmarked": false,
      "isPublic": false,
      "isSubscribed": false,
      "lastRelease": null,
      "lastSeen": "2019-04-11T01:08:59Z",
      "level": "warning",
      "logger": null,
      "metadata": Object {
        "function": "fetchData",
        "type": "RequestError",
      },
      "numComments": 0,
      "participants": Array [],
      "permalink": "https://foo.io/organizations/foo/issues/1234/",
      "platform": "javascript",
      "pluginActions": Array [],
      "pluginContexts": Array [],
      "pluginIssues": Array [],
      "project": Object {
        "id": "2",
        "platform": "javascript",
        "slug": "project-slug",
      },
      "seenBy": Array [],
      "shareId": null,
      "shortId": "JAVASCRIPT-6QS",
      "stats": Object {
        "24h": Array [
          Array [
            1517281200,
            2,
          ],
          Array [
            1517310000,
            1,
          ],
        ],
        "30d": Array [
          Array [
            1514764800,
            1,
          ],
          Array [
            1515024000,
            122,
          ],
        ],
      },
      "status": "unresolved",
      "statusDetails": Object {},
      "subscriptionDetails": null,
      "tags": Array [],
      "title": "RequestError: GET /issues/ 404",
      "type": "error",
      "userCount": 35097,
      "userReportCount": 0,
    }
  }
  integration={
    Object {
      "configData": Object {},
      "configOrganization": Array [],
      "domainName": "github.com/test-integration",
      "externalIssues": Array [],
      "icon": "http://example.com/integration_icon.png",
      "id": "1",
      "name": "Test Integration",
      "projects": Array [],
      "provider": Object {
        "canAdd": true,
        "features": Array [],
        "key": "github",
        "name": "GitHub",
      },
    }
  }
  onSubmitSuccess={[MockFunction]}
>
  <Form
    allowUndo={false}
    apiEndpoint="/groups/1/integrations/1/"
    apiMethod="PUT"
    cancelLabel="Cancel"
    className="form-stacked"
    footerClass="modal-footer"
    initialData={
      Object {
        "comment": "Default Value",
        "externalIssue": "",
        "repo": "scefali/test",
      }
    }
    onFieldChange={[Function]}
    onSubmitSuccess={[Function]}
    requireChanges={false}
    saveOnBlur={false}
    submitDisabled={false}
    submitLabel="Link Issue"
    submitPriority="primary"
  >
    <form
      className="form-stacked"
      onSubmit={[Function]}
    >
      <div>
        <FieldFromConfig
          async={true}
          autoload={true}
          cache={false}
          disabled={false}
          field={
            Object {
              "choices": Array [
                Array [
                  "scefali/test",
                  "test",
                ],
                Array [
                  "scefali/ZeldaBazaar",
                  "ZeldaBazaar",
                ],
              ],
              "default": "scefali/test",
              "label": "GitHub Repository",
              "name": "repo",
              "required": true,
              "type": "select",
              "updatesForm": true,
              "url": "/search",
            }
          }
          flexibleControlStateSize={true}
          inline={false}
          key="repo-scefali/test"
          loadOptions={[Function]}
          onBlurResetsInput={false}
          onCloseResetsInput={false}
          onSelectResetsInput={false}
          stacked={true}
        >
          <SelectField
            allowClear={false}
            allowEmpty={false}
            async={true}
            autoload={true}
            cache={false}
            choices={
              Array [
                Array [
                  "scefali/test",
                  "test",
                ],
                Array [
                  "scefali/ZeldaBazaar",
                  "ZeldaBazaar",
                ],
              ]
            }
            default="scefali/test"
            disabled={false}
            escapeMarkup={true}
            field={[Function]}
            flexibleControlStateSize={true}
            formatMessageValue={[Function]}
            inline={false}
            label="GitHub Repository"
            loadOptions={[Function]}
            multiple={false}
            name="repo"
            onBlurResetsInput={false}
            onCloseResetsInput={false}
            onSelectResetsInput={false}
            placeholder="--"
            required={true}
            small={false}
            stacked={true}
            type="select"
            updatesForm={true}
            url="/search"
          >
            <InputField
              alignRight={false}
              allowEmpty={false}
              async={true}
              autoload={true}
              cache={false}
              choices={
                Array [
                  Array [
                    "scefali/test",
                    "test",
                  ],
                  Array [
                    "scefali/ZeldaBazaar",
                    "ZeldaBazaar",
                  ],
                ]
              }
              default="scefali/test"
              disabled={false}
              escapeMarkup={true}
              field={[Function]}
              flexibleControlStateSize={true}
              formatMessageValue={[Function]}
              inline={false}
              label="GitHub Repository"
              loadOptions={[Function]}
              name="repo"
              onBlurResetsInput={false}
              onCloseResetsInput={false}
              onSelectResetsInput={false}
              placeholder="--"
              required={true}
              small={false}
              stacked={true}
              type="select"
              updatesForm={true}
              url="/search"
            >
              <FormField
                alignRight={false}
                allowEmpty={false}
                async={true}
                autoload={true}
                cache={false}
                choices={
                  Array [
                    Array [
                      "scefali/test",
                      "test",
                    ],
                    Array [
                      "scefali/ZeldaBazaar",
                      "ZeldaBazaar",
                    ],
                  ]
                }
                default="scefali/test"
                disabled={false}
                escapeMarkup={true}
                field={[Function]}
                flexibleControlStateSize={true}
                formatMessageValue={[Function]}
                hideErrorMessage={false}
                inline={false}
                label="GitHub Repository"
                loadOptions={[Function]}
                name="repo"
                onBlurResetsInput={false}
                onCloseResetsInput={false}
                onSelectResetsInput={false}
                placeholder="--"
                required={true}
                small={false}
                stacked={true}
                type="select"
                updatesForm={true}
                url="/search"
              >
                <Field
                  alignRight={false}
                  allowEmpty={false}
                  async={true}
                  autoload={true}
                  cache={false}
                  choices={
                    Array [
                      Array [
                        "scefali/test",
                        "test",
                      ],
                      Array [
                        "scefali/ZeldaBazaar",
                        "ZeldaBazaar",
                      ],
                    ]
                  }
                  default="scefali/test"
                  disabled={false}
                  escapeMarkup={true}
                  field={[Function]}
                  flexibleControlStateSize={true}
                  formatMessageValue={[Function]}
                  id="repo"
                  inline={false}
                  label="GitHub Repository"
                  loadOptions={[Function]}
                  name="repo"
                  onBlurResetsInput={false}
                  onCloseResetsInput={false}
                  onSelectResetsInput={false}
                  placeholder="--"
                  required={true}
                  small={false}
                  stacked={true}
                  type="select"
                  updatesForm={true}
                  url="/search"
                  visible={true}
                >
                  <FieldWrapper
                    hasControlState={false}
                    inline={false}
                    stacked={true}
                  >
                    <div
                      className="css-1kl5jlp-FieldWrapper-FieldWrapper e2iyls20"
                    >
                      <FieldDescription
                        htmlFor="repo"
                        inline={false}
                      >
                        <label
                          className="css-1q141sp-FieldDescription e3z18c30"
                          htmlFor="repo"
                        >
                          <FieldLabel
                            disabled={false}
                          >
                            <div
                              className="css-1c18lg-FieldLabel e16ushrl0"
                            >
                              GitHub Repository
                               
                              <FieldRequiredBadge>
                                <div
                                  className="css-z6v0fv-FieldRequiredBadge e1uclnuk0"
                                />
                              </FieldRequiredBadge>
                            </div>
                          </FieldLabel>
                        </label>
                      </FieldDescription>
                      <FieldControl
                        alignRight={false}
                        controlState={
                          <FormFieldControlState
                            model={
                              FormModel {
                                "api": Client {
                                  "_chain": [Function],
                                  "_wrapRequest": [Function],
                                  "bulkUpdate": [Function],
                                  "handleRequestError": [Function],
                                  "hasProjectBeenRenamed": [Function],
                                },
                                "errors": Object {},
                                "fieldDescriptor": Map {
                                  "repo" => Object {
                                    "alignRight": false,
                                    "allowEmpty": false,
                                    "async": true,
                                    "autoload": true,
                                    "cache": false,
                                    "children": [Function],
                                    "choices": Array [
                                      Array [
                                        "scefali/test",
                                        "test",
                                      ],
                                      Array [
                                        "scefali/ZeldaBazaar",
                                        "ZeldaBazaar",
                                      ],
                                    ],
                                    "className": undefined,
                                    "default": "scefali/test",
                                    "disabled": false,
                                    "escapeMarkup": true,
                                    "field": [Function],
                                    "flexibleControlStateSize": true,
                                    "formatMessageValue": [Function],
                                    "hideErrorMessage": false,
                                    "inline": false,
                                    "label": "GitHub Repository",
                                    "loadOptions": [Function],
                                    "name": "repo",
                                    "onBlurResetsInput": false,
                                    "onCloseResetsInput": false,
                                    "onSelectResetsInput": false,
                                    "placeholder": "--",
                                    "required": true,
                                    "small": false,
                                    "stacked": true,
                                    "type": "select",
                                    "updatesForm": true,
                                    "url": "/search",
                                  },
                                  "externalIssue" => Object {
                                    "alignRight": false,
                                    "allowEmpty": false,
                                    "async": true,
                                    "autoload": true,
                                    "cache": false,
                                    "children": [Function],
                                    "choices": Array [],
                                    "className": undefined,
                                    "default": "",
                                    "disabled": false,
                                    "escapeMarkup": true,
                                    "field": [Function],
                                    "flexibleControlStateSize": true,
                                    "formatMessageValue": [Function],
                                    "hideErrorMessage": false,
                                    "inline": false,
                                    "label": "Issue",
                                    "loadOptions": [Function],
                                    "name": "externalIssue",
                                    "onBlurResetsInput": false,
                                    "onCloseResetsInput": false,
                                    "onSelectResetsInput": false,
                                    "placeholder": "--",
                                    "required": true,
                                    "small": false,
                                    "stacked": true,
                                    "type": "select",
                                    "url": "/search",
                                  },
                                  "comment" => Object {
                                    "children": [Function],
                                    "className": undefined,
                                    "default": "Default Value",
                                    "disabled": false,
                                    "field": [Function],
                                    "flexibleControlStateSize": true,
                                    "help": "Leave blank if you don't want to add a comment to the GitHub issue.",
                                    "hideErrorMessage": false,
                                    "inline": false,
                                    "label": "Comment",
                                    "name": "comment",
                                    "required": false,
                                    "stacked": true,
                                    "type": "textarea",
                                  },
                                },
                                "fieldState": Object {},
                                "fields": Object {
                                  "comment": "Default Value",
                                  "externalIssue": "",
                                  "repo": "scefali/test",
                                },
                                "formErrors": undefined,
                                "formState": undefined,
                                "initialData": Object {
                                  "comment": "Default Value",
                                  "externalIssue": "",
                                  "repo": "scefali/test",
                                },
                                "options": Object {
                                  "allowUndo": false,
                                  "apiEndpoint": "/groups/1/integrations/1/",
                                  "apiMethod": "PUT",
                                  "onFieldChange": [Function],
                                  "onSubmitError": undefined,
                                  "onSubmitSuccess": [Function],
                                  "resetOnError": undefined,
                                  "saveOnBlur": false,
                                },
                                "snapshots": Array [
                                  Map {
                                    "repo" => "scefali/test",
                                    "externalIssue" => "",
                                    "comment" => "Default Value",
                                  },
                                ],
                              }
                            }
                            name="repo"
                          />
                        }
                        disabled={false}
                        errorState={
                          <Observer>
                            [Function]
                          </Observer>
                        }
                        flexibleControlStateSize={true}
                        inline={false}
                      >
                        <FieldControlErrorWrapper
                          inline={false}
                        >
                          <div
                            className="css-szisuz-FieldControlErrorWrapper e12jpfuq0"
                          >
                            <FieldControlWrapper>
                              <div
                                className="css-1evsibf-FieldControlWrapper e12jpfuq2"
                              >
                                <FieldControlStyled
                                  alignRight={false}
                                >
                                  <div
                                    className="css-ld1e0a-FieldControlStyled e12jpfuq1"
                                  >
                                    <Observer>
                                      <ForwardRef(RefForwardedSelectControl)
                                        alignRight={false}
                                        allowEmpty={false}
                                        async={true}
                                        autoload={true}
                                        cache={false}
                                        choices={
                                          Array [
                                            Array [
                                              "scefali/test",
                                              "test",
                                            ],
                                            Array [
                                              "scefali/ZeldaBazaar",
                                              "ZeldaBazaar",
                                            ],
                                          ]
                                        }
                                        clearable={false}
                                        default="scefali/test"
                                        disabled={false}
                                        error={false}
                                        escapeMarkup={true}
                                        field={[Function]}
                                        formatMessageValue={[Function]}
                                        id="repo"
                                        initialData={
                                          Object {
                                            "comment": "Default Value",
                                            "externalIssue": "",
                                            "repo": "scefali/test",
                                          }
                                        }
                                        inline={false}
                                        label="GitHub Repository"
                                        loadOptions={[Function]}
                                        multiple={false}
                                        name="repo"
                                        onBlurResetsInput={false}
                                        onChange={[Function]}
                                        onCloseResetsInput={false}
                                        onKeyDown={[Function]}
                                        onSelectResetsInput={false}
                                        options={
                                          Array [
                                            Object {
                                              "label": "test",
                                              "value": "scefali/test",
                                            },
                                            Object {
                                              "label": "ZeldaBazaar",
                                              "value": "scefali/ZeldaBazaar",
                                            },
                                          ]
                                        }
                                        placeholder="--"
                                        small={false}
                                        stacked={true}
                                        type="select"
                                        updatesForm={true}
                                        url="/search"
                                        value="scefali/test"
                                      >
                                        <SelectControl
                                          alignRight={false}
                                          allowEmpty={false}
                                          async={true}
                                          autoload={true}
                                          cache={false}
                                          choices={
                                            Array [
                                              Array [
                                                "scefali/test",
                                                "test",
                                              ],
                                              Array [
                                                "scefali/ZeldaBazaar",
                                                "ZeldaBazaar",
                                              ],
                                            ]
                                          }
                                          clearable={false}
                                          default="scefali/test"
                                          disabled={false}
                                          error={false}
                                          escapeMarkup={true}
                                          field={[Function]}
                                          formatMessageValue={[Function]}
                                          forwardedRef={[Function]}
                                          height={36}
                                          id="repo"
                                          initialData={
                                            Object {
                                              "comment": "Default Value",
                                              "externalIssue": "",
                                              "repo": "scefali/test",
                                            }
                                          }
                                          inline={false}
                                          label="GitHub Repository"
                                          loadOptions={[Function]}
                                          multiple={false}
                                          name="repo"
                                          onBlurResetsInput={false}
                                          onChange={[Function]}
                                          onCloseResetsInput={false}
                                          onKeyDown={[Function]}
                                          onSelectResetsInput={false}
                                          options={
                                            Array [
                                              Object {
                                                "label": "test",
                                                "value": "scefali/test",
                                              },
                                              Object {
                                                "label": "ZeldaBazaar",
                                                "value": "scefali/ZeldaBazaar",
                                              },
                                            ]
                                          }
                                          placeholder="--"
                                          small={false}
                                          stacked={true}
                                          type="select"
                                          updatesForm={true}
                                          url="/search"
                                          value="scefali/test"
                                        >
                                          <StyledSelect
                                            alignRight={false}
                                            allowEmpty={false}
                                            arrowRenderer={[Function]}
                                            async={true}
                                            autoload={true}
                                            backspaceRemoves={false}
                                            cache={false}
                                            clearable={false}
                                            default="scefali/test"
                                            deleteRemoves={false}
                                            disabled={false}
                                            error={false}
                                            escapeMarkup={true}
                                            field={[Function]}
                                            formatMessageValue={[Function]}
                                            forwardedRef={[Function]}
                                            height={36}
                                            id="repo"
                                            initialData={
                                              Object {
                                                "comment": "Default Value",
                                                "externalIssue": "",
                                                "repo": "scefali/test",
                                              }
                                            }
                                            inline={false}
                                            label="GitHub Repository"
                                            loadOptions={[Function]}
                                            multiple={false}
                                            name="repo"
                                            onBlurResetsInput={false}
                                            onChange={[Function]}
                                            onCloseResetsInput={false}
                                            onKeyDown={[Function]}
                                            onSelectResetsInput={false}
                                            options={
                                              Array [
                                                Object {
                                                  "label": "test",
                                                  "value": "scefali/test",
                                                },
                                                Object {
                                                  "label": "ZeldaBazaar",
                                                  "value": "scefali/ZeldaBazaar",
                                                },
                                              ]
                                            }
                                            placeholder="--"
                                            small={false}
                                            stacked={true}
                                            type="select"
                                            updatesForm={true}
                                            url="/search"
                                            value="scefali/test"
                                          >
                                            <SelectPicker
                                              alignRight={false}
                                              allowEmpty={false}
                                              arrowRenderer={[Function]}
                                              async={true}
                                              autoload={true}
                                              backspaceRemoves={false}
                                              cache={false}
                                              className="css-140v9or-StyledSelect eho28m20"
                                              clearable={false}
                                              default="scefali/test"
                                              deleteRemoves={false}
                                              disabled={false}
                                              error={false}
                                              escapeMarkup={true}
                                              field={[Function]}
                                              formatMessageValue={[Function]}
                                              forwardedRef={[Function]}
                                              height={36}
                                              id="repo"
                                              initialData={
                                                Object {
                                                  "comment": "Default Value",
                                                  "externalIssue": "",
                                                  "repo": "scefali/test",
                                                }
                                              }
                                              inline={false}
                                              label="GitHub Repository"
                                              loadOptions={[Function]}
                                              multiple={false}
                                              name="repo"
                                              onBlurResetsInput={false}
                                              onChange={[Function]}
                                              onCloseResetsInput={false}
                                              onKeyDown={[Function]}
                                              onSelectResetsInput={false}
                                              options={
                                                Array [
                                                  Object {
                                                    "label": "test",
                                                    "value": "scefali/test",
                                                  },
                                                  Object {
                                                    "label": "ZeldaBazaar",
                                                    "value": "scefali/ZeldaBazaar",
                                                  },
                                                ]
                                              }
                                              placeholder="--"
                                              small={false}
                                              stacked={true}
                                              type="select"
                                              updatesForm={true}
                                              url="/search"
                                              value="scefali/test"
                                            >
                                              <Async
                                                alignRight={false}
                                                allowEmpty={false}
                                                arrowRenderer={[Function]}
                                                autoload={true}
                                                backspaceRemoves={false}
                                                cache={false}
                                                className="css-140v9or-StyledSelect eho28m20"
                                                clearable={false}
                                                default="scefali/test"
                                                deleteRemoves={false}
                                                disabled={false}
                                                error={false}
                                                escapeMarkup={true}
                                                field={[Function]}
                                                formatMessageValue={[Function]}
                                                height={36}
                                                id="repo"
                                                ignoreAccents={true}
                                                ignoreCase={true}
                                                initialData={
                                                  Object {
                                                    "comment": "Default Value",
                                                    "externalIssue": "",
                                                    "repo": "scefali/test",
                                                  }
                                                }
                                                inline={false}
                                                label="GitHub Repository"
                                                loadOptions={[Function]}
                                                loadingPlaceholder="Loading..."
                                                multiple={false}
                                                name="repo"
                                                onBlurResetsInput={false}
                                                onChange={[Function]}
                                                onCloseResetsInput={false}
                                                onKeyDown={[Function]}
                                                onSelectResetsInput={false}
                                                options={
                                                  Array [
                                                    Object {
                                                      "label": "test",
                                                      "value": "scefali/test",
                                                    },
                                                    Object {
                                                      "label": "ZeldaBazaar",
                                                      "value": "scefali/ZeldaBazaar",
                                                    },
                                                  ]
                                                }
                                                placeholder="--"
                                                searchPromptText="Type to search"
                                                small={false}
                                                stacked={true}
                                                type="select"
                                                updatesForm={true}
                                                url="/search"
                                                value="scefali/test"
                                              >
                                                <Select
                                                  alignRight={false}
                                                  allowEmpty={false}
                                                  arrowRenderer={[Function]}
                                                  autoload={true}
                                                  autosize={true}
                                                  backspaceRemoves={false}
                                                  backspaceToRemoveMessage="Press backspace to remove {label}"
                                                  cache={false}
                                                  className="css-140v9or-StyledSelect eho28m20"
                                                  clearAllText="Clear all"
                                                  clearRenderer={[Function]}
                                                  clearValueText="Clear value"
                                                  clearable={false}
                                                  closeOnSelect={true}
                                                  default="scefali/test"
                                                  deleteRemoves={false}
                                                  delimiter=","
                                                  disabled={false}
                                                  error={false}
                                                  escapeClearsValue={true}
                                                  escapeMarkup={true}
                                                  field={[Function]}
                                                  filterOptions={[Function]}
                                                  formatMessageValue={[Function]}
                                                  height={36}
                                                  id="repo"
                                                  ignoreAccents={true}
                                                  ignoreCase={true}
                                                  initialData={
                                                    Object {
                                                      "comment": "Default Value",
                                                      "externalIssue": "",
                                                      "repo": "scefali/test",
                                                    }
                                                  }
                                                  inline={false}
                                                  inputProps={Object {}}
                                                  isLoading={true}
                                                  joinValues={false}
                                                  label="GitHub Repository"
                                                  labelKey="label"
                                                  loadOptions={[Function]}
                                                  loadingPlaceholder="Loading..."
                                                  matchPos="any"
                                                  matchProp="any"
                                                  menuBuffer={0}
                                                  menuRenderer={[Function]}
                                                  multi={false}
                                                  multiple={false}
                                                  name="repo"
                                                  noResultsText="Loading..."
                                                  onBlurResetsInput={false}
                                                  onChange={[Function]}
                                                  onCloseResetsInput={false}
                                                  onInputChange={[Function]}
                                                  onKeyDown={[Function]}
                                                  onSelectResetsInput={false}
                                                  openOnClick={true}
                                                  optionComponent={[Function]}
                                                  options={Array []}
                                                  pageSize={5}
                                                  placeholder="Loading..."
                                                  removeSelected={true}
                                                  required={false}
                                                  rtl={false}
                                                  scrollMenuIntoView={true}
                                                  searchPromptText="Type to search"
                                                  searchable={true}
                                                  simpleValue={false}
                                                  small={false}
                                                  stacked={true}
                                                  tabSelectsValue={true}
                                                  trimFilter={true}
                                                  type="select"
                                                  updatesForm={true}
                                                  url="/search"
                                                  value="scefali/test"
                                                  valueComponent={[Function]}
                                                  valueKey="value"
                                                >
                                                  <div
                                                    className="Select css-140v9or-StyledSelect eho28m20 is-loading is-searchable Select--single"
                                                  >
                                                    <div
                                                      className="Select-control"
                                                      onKeyDown={[Function]}
                                                      onMouseDown={[Function]}
                                                      onTouchEnd={[Function]}
                                                      onTouchMove={[Function]}
                                                      onTouchStart={[Function]}
                                                    >
                                                      <div
                                                        className="Select-multi-value-wrapper"
                                                        id="react-select-2--value"
                                                      >
                                                        <div
                                                          className="Select-placeholder"
                                                        >
                                                          Loading...
                                                        </div>
                                                        <AutosizeInput
                                                          aria-activedescendant="react-select-2--value"
                                                          aria-expanded="false"
                                                          aria-haspopup="false"
                                                          aria-owns=""
                                                          className="Select-input"
                                                          id="repo"
                                                          injectStyles={true}
                                                          minWidth="5"
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onFocus={[Function]}
                                                          required={false}
                                                          role="combobox"
                                                          value=""
                                                        >
                                                          <div
                                                            className="Select-input"
                                                            style={
                                                              Object {
                                                                "display": "inline-block",
                                                              }
                                                            }
                                                          >
                                                            <input
                                                              aria-activedescendant="react-select-2--value"
                                                              aria-expanded="false"
                                                              aria-haspopup="false"
                                                              aria-owns=""
                                                              id="repo"
                                                              onBlur={[Function]}
                                                              onChange={[Function]}
                                                              onFocus={[Function]}
                                                              required={false}
                                                              role="combobox"
                                                              style={
                                                                Object {
                                                                  "boxSizing": "content-box",
                                                                  "width": "5px",
                                                                }
                                                              }
                                                              value=""
                                                            />
                                                            <div
                                                              style={
                                                                Object {
                                                                  "height": 0,
                                                                  "left": 0,
                                                                  "overflow": "scroll",
                                                                  "position": "absolute",
                                                                  "top": 0,
                                                                  "visibility": "hidden",
                                                                  "whiteSpace": "pre",
                                                                }
                                                              }
                                                            />
                                                          </div>
                                                        </AutosizeInput>
                                                      </div>
                                                      <span
                                                        aria-hidden="true"
                                                        className="Select-loading-zone"
                                                      >
                                                        <span
                                                          className="Select-loading"
                                                        />
                                                      </span>
                                                      <span
                                                        className="Select-arrow-zone"
                                                        onMouseDown={[Function]}
                                                      >
                                                        <span
                                                          className="icon-arrow-down"
                                                        />
                                                      </span>
                                                    </div>
                                                  </div>
                                                </Select>
                                              </Async>
                                            </SelectPicker>
                                          </StyledSelect>
                                        </SelectControl>
                                      </ForwardRef(RefForwardedSelectControl)>
                                    </Observer>
                                  </div>
                                </FieldControlStyled>
                                <FieldControlState
                                  flexibleControlStateSize={true}
                                >
                                  <div
                                    className="css-mlgkyn-FieldControlState ep9s0su0"
                                  >
                                    <FormFieldControlState
                                      model={
                                        FormModel {
                                          "api": Client {
                                            "_chain": [Function],
                                            "_wrapRequest": [Function],
                                            "bulkUpdate": [Function],
                                            "handleRequestError": [Function],
                                            "hasProjectBeenRenamed": [Function],
                                          },
                                          "errors": Object {},
                                          "fieldDescriptor": Map {
                                            "repo" => Object {
                                              "alignRight": false,
                                              "allowEmpty": false,
                                              "async": true,
                                              "autoload": true,
                                              "cache": false,
                                              "children": [Function],
                                              "choices": Array [
                                                Array [
                                                  "scefali/test",
                                                  "test",
                                                ],
                                                Array [
                                                  "scefali/ZeldaBazaar",
                                                  "ZeldaBazaar",
                                                ],
                                              ],
                                              "className": undefined,
                                              "default": "scefali/test",
                                              "disabled": false,
                                              "escapeMarkup": true,
                                              "field": [Function],
                                              "flexibleControlStateSize": true,
                                              "formatMessageValue": [Function],
                                              "hideErrorMessage": false,
                                              "inline": false,
                                              "label": "GitHub Repository",
                                              "loadOptions": [Function],
                                              "name": "repo",
                                              "onBlurResetsInput": false,
                                              "onCloseResetsInput": false,
                                              "onSelectResetsInput": false,
                                              "placeholder": "--",
                                              "required": true,
                                              "small": false,
                                              "stacked": true,
                                              "type": "select",
                                              "updatesForm": true,
                                              "url": "/search",
                                            },
                                            "externalIssue" => Object {
                                              "alignRight": false,
                                              "allowEmpty": false,
                                              "async": true,
                                              "autoload": true,
                                              "cache": false,
                                              "children": [Function],
                                              "choices": Array [],
                                              "className": undefined,
                                              "default": "",
                                              "disabled": false,
                                              "escapeMarkup": true,
                                              "field": [Function],
                                              "flexibleControlStateSize": true,
                                              "formatMessageValue": [Function],
                                              "hideErrorMessage": false,
                                              "inline": false,
                                              "label": "Issue",
                                              "loadOptions": [Function],
                                              "name": "externalIssue",
                                              "onBlurResetsInput": false,
                                              "onCloseResetsInput": false,
                                              "onSelectResetsInput": false,
                                              "placeholder": "--",
                                              "required": true,
                                              "small": false,
                                              "stacked": true,
                                              "type": "select",
                                              "url": "/search",
                                            },
                                            "comment" => Object {
                                              "children": [Function],
                                              "className": undefined,
                                              "default": "Default Value",
                                              "disabled": false,
                                              "field": [Function],
                                              "flexibleControlStateSize": true,
                                              "help": "Leave blank if you don't want to add a comment to the GitHub issue.",
                                              "hideErrorMessage": false,
                                              "inline": false,
                                              "label": "Comment",
                                              "name": "comment",
                                              "required": false,
                                              "stacked": true,
                                              "type": "textarea",
                                            },
                                          },
                                          "fieldState": Object {},
                                          "fields": Object {
                                            "comment": "Default Value",
                                            "externalIssue": "",
                                            "repo": "scefali/test",
                                          },
                                          "formErrors": undefined,
                                          "formState": undefined,
                                          "initialData": Object {
                                            "comment": "Default Value",
                                            "externalIssue": "",
                                            "repo": "scefali/test",
                                          },
                                          "options": Object {
                                            "allowUndo": false,
                                            "apiEndpoint": "/groups/1/integrations/1/",
                                            "apiMethod": "PUT",
                                            "onFieldChange": [Function],
                                            "onSubmitError": undefined,
                                            "onSubmitSuccess": [Function],
                                            "resetOnError": undefined,
                                            "saveOnBlur": false,
                                          },
                                          "snapshots": Array [
                                            Map {
                                              "repo" => "scefali/test",
                                              "externalIssue" => "",
                                              "comment" => "Default Value",
                                            },
                                          ],
                                        }
                                      }
                                      name="repo"
                                    >
                                      <Observer>
                                        <ControlState
                                          error={false}
                                          isSaved={null}
                                          isSaving={null}
                                        />
                                      </Observer>
                                    </FormFieldControlState>
                                  </div>
                                </FieldControlState>
                              </div>
                            </FieldControlWrapper>
                            <Observer />
                          </div>
                        </FieldControlErrorWrapper>
                      </FieldControl>
                    </div>
                  </FieldWrapper>
                </Field>
              </FormField>
            </InputField>
          </SelectField>
        </FieldFromConfig>
        <FieldFromConfig
          async={true}
          autoload={true}
          cache={false}
          disabled={false}
          field={
            Object {
              "choices": Array [],
              "default": "",
              "label": "Issue",
              "name": "externalIssue",
              "required": true,
              "type": "select",
              "url": "/search",
            }
          }
          flexibleControlStateSize={true}
          inline={false}
          key="externalIssue-"
          loadOptions={[Function]}
          onBlurResetsInput={false}
          onCloseResetsInput={false}
          onSelectResetsInput={false}
          stacked={true}
        >
          <SelectField
            allowClear={false}
            allowEmpty={false}
            async={true}
            autoload={true}
            cache={false}
            choices={Array []}
            default=""
            disabled={false}
            escapeMarkup={true}
            field={[Function]}
            flexibleControlStateSize={true}
            formatMessageValue={[Function]}
            inline={false}
            label="Issue"
            loadOptions={[Function]}
            multiple={false}
            name="externalIssue"
            onBlurResetsInput={false}
            onCloseResetsInput={false}
            onSelectResetsInput={false}
            placeholder="--"
            required={true}
            small={false}
            stacked={true}
            type="select"
            url="/search"
          >
            <InputField
              alignRight={false}
              allowEmpty={false}
              async={true}
              autoload={true}
              cache={false}
              choices={Array []}
              default=""
              disabled={false}
              escapeMarkup={true}
              field={[Function]}
              flexibleControlStateSize={true}
              formatMessageValue={[Function]}
              inline={false}
              label="Issue"
              loadOptions={[Function]}
              name="externalIssue"
              onBlurResetsInput={false}
              onCloseResetsInput={false}
              onSelectResetsInput={false}
              placeholder="--"
              required={true}
              small={false}
              stacked={true}
              type="select"
              url="/search"
            >
              <FormField
                alignRight={false}
                allowEmpty={false}
                async={true}
                autoload={true}
                cache={false}
                choices={Array []}
                default=""
                disabled={false}
                escapeMarkup={true}
                field={[Function]}
                flexibleControlStateSize={true}
                formatMessageValue={[Function]}
                hideErrorMessage={false}
                inline={false}
                label="Issue"
                loadOptions={[Function]}
                name="externalIssue"
                onBlurResetsInput={false}
                onCloseResetsInput={false}
                onSelectResetsInput={false}
                placeholder="--"
                required={true}
                small={false}
                stacked={true}
                type="select"
                url="/search"
              >
                <Field
                  alignRight={false}
                  allowEmpty={false}
                  async={true}
                  autoload={true}
                  cache={false}
                  choices={Array []}
                  default=""
                  disabled={false}
                  escapeMarkup={true}
                  field={[Function]}
                  flexibleControlStateSize={true}
                  formatMessageValue={[Function]}
                  id="externalIssue"
                  inline={false}
                  label="Issue"
                  loadOptions={[Function]}
                  name="externalIssue"
                  onBlurResetsInput={false}
                  onCloseResetsInput={false}
                  onSelectResetsInput={false}
                  placeholder="--"
                  required={true}
                  small={false}
                  stacked={true}
                  type="select"
                  url="/search"
                  visible={true}
                >
                  <FieldWrapper
                    hasControlState={false}
                    inline={false}
                    stacked={true}
                  >
                    <div
                      className="css-1kl5jlp-FieldWrapper-FieldWrapper e2iyls20"
                    >
                      <FieldDescription
                        htmlFor="externalIssue"
                        inline={false}
                      >
                        <label
                          className="css-1q141sp-FieldDescription e3z18c30"
                          htmlFor="externalIssue"
                        >
                          <FieldLabel
                            disabled={false}
                          >
                            <div
                              className="css-1c18lg-FieldLabel e16ushrl0"
                            >
                              Issue
                               
                              <FieldRequiredBadge>
                                <div
                                  className="css-z6v0fv-FieldRequiredBadge e1uclnuk0"
                                />
                              </FieldRequiredBadge>
                            </div>
                          </FieldLabel>
                        </label>
                      </FieldDescription>
                      <FieldControl
                        alignRight={false}
                        controlState={
                          <FormFieldControlState
                            model={
                              FormModel {
                                "api": Client {
                                  "_chain": [Function],
                                  "_wrapRequest": [Function],
                                  "bulkUpdate": [Function],
                                  "handleRequestError": [Function],
                                  "hasProjectBeenRenamed": [Function],
                                },
                                "errors": Object {},
                                "fieldDescriptor": Map {
                                  "repo" => Object {
                                    "alignRight": false,
                                    "allowEmpty": false,
                                    "async": true,
                                    "autoload": true,
                                    "cache": false,
                                    "children": [Function],
                                    "choices": Array [
                                      Array [
                                        "scefali/test",
                                        "test",
                                      ],
                                      Array [
                                        "scefali/ZeldaBazaar",
                                        "ZeldaBazaar",
                                      ],
                                    ],
                                    "className": undefined,
                                    "default": "scefali/test",
                                    "disabled": false,
                                    "escapeMarkup": true,
                                    "field": [Function],
                                    "flexibleControlStateSize": true,
                                    "formatMessageValue": [Function],
                                    "hideErrorMessage": false,
                                    "inline": false,
                                    "label": "GitHub Repository",
                                    "loadOptions": [Function],
                                    "name": "repo",
                                    "onBlurResetsInput": false,
                                    "onCloseResetsInput": false,
                                    "onSelectResetsInput": false,
                                    "placeholder": "--",
                                    "required": true,
                                    "small": false,
                                    "stacked": true,
                                    "type": "select",
                                    "updatesForm": true,
                                    "url": "/search",
                                  },
                                  "externalIssue" => Object {
                                    "alignRight": false,
                                    "allowEmpty": false,
                                    "async": true,
                                    "autoload": true,
                                    "cache": false,
                                    "children": [Function],
                                    "choices": Array [],
                                    "className": undefined,
                                    "default": "",
                                    "disabled": false,
                                    "escapeMarkup": true,
                                    "field": [Function],
                                    "flexibleControlStateSize": true,
                                    "formatMessageValue": [Function],
                                    "hideErrorMessage": false,
                                    "inline": false,
                                    "label": "Issue",
                                    "loadOptions": [Function],
                                    "name": "externalIssue",
                                    "onBlurResetsInput": false,
                                    "onCloseResetsInput": false,
                                    "onSelectResetsInput": false,
                                    "placeholder": "--",
                                    "required": true,
                                    "small": false,
                                    "stacked": true,
                                    "type": "select",
                                    "url": "/search",
                                  },
                                  "comment" => Object {
                                    "children": [Function],
                                    "className": undefined,
                                    "default": "Default Value",
                                    "disabled": false,
                                    "field": [Function],
                                    "flexibleControlStateSize": true,
                                    "help": "Leave blank if you don't want to add a comment to the GitHub issue.",
                                    "hideErrorMessage": false,
                                    "inline": false,
                                    "label": "Comment",
                                    "name": "comment",
                                    "required": false,
                                    "stacked": true,
                                    "type": "textarea",
                                  },
                                },
                                "fieldState": Object {},
                                "fields": Object {
                                  "comment": "Default Value",
                                  "externalIssue": "",
                                  "repo": "scefali/test",
                                },
                                "formErrors": undefined,
                                "formState": undefined,
                                "initialData": Object {
                                  "comment": "Default Value",
                                  "externalIssue": "",
                                  "repo": "scefali/test",
                                },
                                "options": Object {
                                  "allowUndo": false,
                                  "apiEndpoint": "/groups/1/integrations/1/",
                                  "apiMethod": "PUT",
                                  "onFieldChange": [Function],
                                  "onSubmitError": undefined,
                                  "onSubmitSuccess": [Function],
                                  "resetOnError": undefined,
                                  "saveOnBlur": false,
                                },
                                "snapshots": Array [
                                  Map {
                                    "repo" => "scefali/test",
                                    "externalIssue" => "",
                                    "comment" => "Default Value",
                                  },
                                ],
                              }
                            }
                            name="externalIssue"
                          />
                        }
                        disabled={false}
                        errorState={
                          <Observer>
                            [Function]
                          </Observer>
                        }
                        flexibleControlStateSize={true}
                        inline={false}
                      >
                        <FieldControlErrorWrapper
                          inline={false}
                        >
                          <div
                            className="css-szisuz-FieldControlErrorWrapper e12jpfuq0"
                          >
                            <FieldControlWrapper>
                              <div
                                className="css-1evsibf-FieldControlWrapper e12jpfuq2"
                              >
                                <FieldControlStyled
                                  alignRight={false}
                                >
                                  <div
                                    className="css-ld1e0a-FieldControlStyled e12jpfuq1"
                                  >
                                    <Observer>
                                      <ForwardRef(RefForwardedSelectControl)
                                        alignRight={false}
                                        allowEmpty={false}
                                        async={true}
                                        autoload={true}
                                        cache={false}
                                        choices={Array []}
                                        clearable={false}
                                        default=""
                                        disabled={false}
                                        error={false}
                                        escapeMarkup={true}
                                        field={[Function]}
                                        formatMessageValue={[Function]}
                                        id="externalIssue"
                                        initialData={
                                          Object {
                                            "comment": "Default Value",
                                            "externalIssue": "",
                                            "repo": "scefali/test",
                                          }
                                        }
                                        inline={false}
                                        label="Issue"
                                        loadOptions={[Function]}
                                        multiple={false}
                                        name="externalIssue"
                                        onBlurResetsInput={false}
                                        onChange={[Function]}
                                        onCloseResetsInput={false}
                                        onKeyDown={[Function]}
                                        onSelectResetsInput={false}
                                        options={Array []}
                                        placeholder="--"
                                        small={false}
                                        stacked={true}
                                        type="select"
                                        url="/search"
                                        value=""
                                      >
                                        <SelectControl
                                          alignRight={false}
                                          allowEmpty={false}
                                          async={true}
                                          autoload={true}
                                          cache={false}
                                          choices={Array []}
                                          clearable={false}
                                          default=""
                                          disabled={false}
                                          error={false}
                                          escapeMarkup={true}
                                          field={[Function]}
                                          formatMessageValue={[Function]}
                                          forwardedRef={[Function]}
                                          height={36}
                                          id="externalIssue"
                                          initialData={
                                            Object {
                                              "comment": "Default Value",
                                              "externalIssue": "",
                                              "repo": "scefali/test",
                                            }
                                          }
                                          inline={false}
                                          label="Issue"
                                          loadOptions={[Function]}
                                          multiple={false}
                                          name="externalIssue"
                                          onBlurResetsInput={false}
                                          onChange={[Function]}
                                          onCloseResetsInput={false}
                                          onKeyDown={[Function]}
                                          onSelectResetsInput={false}
                                          options={Array []}
                                          placeholder="--"
                                          small={false}
                                          stacked={true}
                                          type="select"
                                          url="/search"
                                          value=""
                                        >
                                          <StyledSelect
                                            alignRight={false}
                                            allowEmpty={false}
                                            arrowRenderer={[Function]}
                                            async={true}
                                            autoload={true}
                                            backspaceRemoves={false}
                                            cache={false}
                                            clearable={false}
                                            default=""
                                            deleteRemoves={false}
                                            disabled={false}
                                            error={false}
                                            escapeMarkup={true}
                                            field={[Function]}
                                            formatMessageValue={[Function]}
                                            forwardedRef={[Function]}
                                            height={36}
                                            id="externalIssue"
                                            initialData={
                                              Object {
                                                "comment": "Default Value",
                                                "externalIssue": "",
                                                "repo": "scefali/test",
                                              }
                                            }
                                            inline={false}
                                            label="Issue"
                                            loadOptions={[Function]}
                                            multiple={false}
                                            name="externalIssue"
                                            onBlurResetsInput={false}
                                            onChange={[Function]}
                                            onCloseResetsInput={false}
                                            onKeyDown={[Function]}
                                            onSelectResetsInput={false}
                                            options={Array []}
                                            placeholder="--"
                                            small={false}
                                            stacked={true}
                                            type="select"
                                            url="/search"
                                            value=""
                                          >
                                            <SelectPicker
                                              alignRight={false}
                                              allowEmpty={false}
                                              arrowRenderer={[Function]}
                                              async={true}
                                              autoload={true}
                                              backspaceRemoves={false}
                                              cache={false}
                                              className="css-140v9or-StyledSelect eho28m20"
                                              clearable={false}
                                              default=""
                                              deleteRemoves={false}
                                              disabled={false}
                                              error={false}
                                              escapeMarkup={true}
                                              field={[Function]}
                                              formatMessageValue={[Function]}
                                              forwardedRef={[Function]}
                                              height={36}
                                              id="externalIssue"
                                              initialData={
                                                Object {
                                                  "comment": "Default Value",
                                                  "externalIssue": "",
                                                  "repo": "scefali/test",
                                                }
                                              }
                                              inline={false}
                                              label="Issue"
                                              loadOptions={[Function]}
                                              multiple={false}
                                              name="externalIssue"
                                              onBlurResetsInput={false}
                                              onChange={[Function]}
                                              onCloseResetsInput={false}
                                              onKeyDown={[Function]}
                                              onSelectResetsInput={false}
                                              options={Array []}
                                              placeholder="--"
                                              small={false}
                                              stacked={true}
                                              type="select"
                                              url="/search"
                                              value=""
                                            >
                                              <Async
                                                alignRight={false}
                                                allowEmpty={false}
                                                arrowRenderer={[Function]}
                                                autoload={true}
                                                backspaceRemoves={false}
                                                cache={false}
                                                className="css-140v9or-StyledSelect eho28m20"
                                                clearable={false}
                                                default=""
                                                deleteRemoves={false}
                                                disabled={false}
                                                error={false}
                                                escapeMarkup={true}
                                                field={[Function]}
                                                formatMessageValue={[Function]}
                                                height={36}
                                                id="externalIssue"
                                                ignoreAccents={true}
                                                ignoreCase={true}
                                                initialData={
                                                  Object {
                                                    "comment": "Default Value",
                                                    "externalIssue": "",
                                                    "repo": "scefali/test",
                                                  }
                                                }
                                                inline={false}
                                                label="Issue"
                                                loadOptions={[Function]}
                                                loadingPlaceholder="Loading..."
                                                multiple={false}
                                                name="externalIssue"
                                                onBlurResetsInput={false}
                                                onChange={[Function]}
                                                onCloseResetsInput={false}
                                                onKeyDown={[Function]}
                                                onSelectResetsInput={false}
                                                options={Array []}
                                                placeholder="--"
                                                searchPromptText="Type to search"
                                                small={false}
                                                stacked={true}
                                                type="select"
                                                url="/search"
                                                value=""
                                              >
                                                <Select
                                                  alignRight={false}
                                                  allowEmpty={false}
                                                  arrowRenderer={[Function]}
                                                  autoload={true}
                                                  autosize={true}
                                                  backspaceRemoves={false}
                                                  backspaceToRemoveMessage="Press backspace to remove {label}"
                                                  cache={false}
                                                  className="css-140v9or-StyledSelect eho28m20"
                                                  clearAllText="Clear all"
                                                  clearRenderer={[Function]}
                                                  clearValueText="Clear value"
                                                  clearable={false}
                                                  closeOnSelect={true}
                                                  default=""
                                                  deleteRemoves={false}
                                                  delimiter=","
                                                  disabled={false}
                                                  error={false}
                                                  escapeClearsValue={true}
                                                  escapeMarkup={true}
                                                  field={[Function]}
                                                  filterOptions={[Function]}
                                                  formatMessageValue={[Function]}
                                                  height={36}
                                                  id="externalIssue"
                                                  ignoreAccents={true}
                                                  ignoreCase={true}
                                                  initialData={
                                                    Object {
                                                      "comment": "Default Value",
                                                      "externalIssue": "",
                                                      "repo": "scefali/test",
                                                    }
                                                  }
                                                  inline={false}
                                                  inputProps={Object {}}
                                                  isLoading={true}
                                                  joinValues={false}
                                                  label="Issue"
                                                  labelKey="label"
                                                  loadOptions={[Function]}
                                                  loadingPlaceholder="Loading..."
                                                  matchPos="any"
                                                  matchProp="any"
                                                  menuBuffer={0}
                                                  menuRenderer={[Function]}
                                                  multi={false}
                                                  multiple={false}
                                                  name="externalIssue"
                                                  noResultsText="Loading..."
                                                  onBlurResetsInput={false}
                                                  onChange={[Function]}
                                                  onCloseResetsInput={false}
                                                  onInputChange={[Function]}
                                                  onKeyDown={[Function]}
                                                  onSelectResetsInput={false}
                                                  openOnClick={true}
                                                  optionComponent={[Function]}
                                                  options={Array []}
                                                  pageSize={5}
                                                  placeholder="Loading..."
                                                  removeSelected={true}
                                                  required={false}
                                                  rtl={false}
                                                  scrollMenuIntoView={true}
                                                  searchPromptText="Type to search"
                                                  searchable={true}
                                                  simpleValue={false}
                                                  small={false}
                                                  stacked={true}
                                                  tabSelectsValue={true}
                                                  trimFilter={true}
                                                  type="select"
                                                  url="/search"
                                                  value=""
                                                  valueComponent={[Function]}
                                                  valueKey="value"
                                                >
                                                  <div
                                                    className="Select css-140v9or-StyledSelect eho28m20 is-loading is-searchable Select--single"
                                                  >
                                                    <div
                                                      className="Select-control"
                                                      onKeyDown={[Function]}
                                                      onMouseDown={[Function]}
                                                      onTouchEnd={[Function]}
                                                      onTouchMove={[Function]}
                                                      onTouchStart={[Function]}
                                                    >
                                                      <div
                                                        className="Select-multi-value-wrapper"
                                                        id="react-select-3--value"
                                                      >
                                                        <div
                                                          className="Select-placeholder"
                                                        >
                                                          Loading...
                                                        </div>
                                                        <AutosizeInput
                                                          aria-activedescendant="react-select-3--value"
                                                          aria-expanded="false"
                                                          aria-haspopup="false"
                                                          aria-owns=""
                                                          className="Select-input"
                                                          id="externalIssue"
                                                          injectStyles={true}
                                                          minWidth="5"
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onFocus={[Function]}
                                                          required={false}
                                                          role="combobox"
                                                          value=""
                                                        >
                                                          <div
                                                            className="Select-input"
                                                            style={
                                                              Object {
                                                                "display": "inline-block",
                                                              }
                                                            }
                                                          >
                                                            <input
                                                              aria-activedescendant="react-select-3--value"
                                                              aria-expanded="false"
                                                              aria-haspopup="false"
                                                              aria-owns=""
                                                              id="externalIssue"
                                                              onBlur={[Function]}
                                                              onChange={[Function]}
                                                              onFocus={[Function]}
                                                              required={false}
                                                              role="combobox"
                                                              style={
                                                                Object {
                                                                  "boxSizing": "content-box",
                                                                  "width": "5px",
                                                                }
                                                              }
                                                              value=""
                                                            />
                                                            <div
                                                              style={
                                                                Object {
                                                                  "height": 0,
                                                                  "left": 0,
                                                                  "overflow": "scroll",
                                                                  "position": "absolute",
                                                                  "top": 0,
                                                                  "visibility": "hidden",
                                                                  "whiteSpace": "pre",
                                                                }
                                                              }
                                                            />
                                                          </div>
                                                        </AutosizeInput>
                                                      </div>
                                                      <span
                                                        aria-hidden="true"
                                                        className="Select-loading-zone"
                                                      >
                                                        <span
                                                          className="Select-loading"
                                                        />
                                                      </span>
                                                      <span
                                                        className="Select-arrow-zone"
                                                        onMouseDown={[Function]}
                                                      >
                                                        <span
                                                          className="icon-arrow-down"
                                                        />
                                                      </span>
                                                    </div>
                                                  </div>
                                                </Select>
                                              </Async>
                                            </SelectPicker>
                                          </StyledSelect>
                                        </SelectControl>
                                      </ForwardRef(RefForwardedSelectControl)>
                                    </Observer>
                                  </div>
                                </FieldControlStyled>
                                <FieldControlState
                                  flexibleControlStateSize={true}
                                >
                                  <div
                                    className="css-mlgkyn-FieldControlState ep9s0su0"
                                  >
                                    <FormFieldControlState
                                      model={
                                        FormModel {
                                          "api": Client {
                                            "_chain": [Function],
                                            "_wrapRequest": [Function],
                                            "bulkUpdate": [Function],
                                            "handleRequestError": [Function],
                                            "hasProjectBeenRenamed": [Function],
                                          },
                                          "errors": Object {},
                                          "fieldDescriptor": Map {
                                            "repo" => Object {
                                              "alignRight": false,
                                              "allowEmpty": false,
                                              "async": true,
                                              "autoload": true,
                                              "cache": false,
                                              "children": [Function],
                                              "choices": Array [
                                                Array [
                                                  "scefali/test",
                                                  "test",
                                                ],
                                                Array [
                                                  "scefali/ZeldaBazaar",
                                                  "ZeldaBazaar",
                                                ],
                                              ],
                                              "className": undefined,
                                              "default": "scefali/test",
                                              "disabled": false,
                                              "escapeMarkup": true,
                                              "field": [Function],
                                              "flexibleControlStateSize": true,
                                              "formatMessageValue": [Function],
                                              "hideErrorMessage": false,
                                              "inline": false,
                                              "label": "GitHub Repository",
                                              "loadOptions": [Function],
                                              "name": "repo",
                                              "onBlurResetsInput": false,
                                              "onCloseResetsInput": false,
                                              "onSelectResetsInput": false,
                                              "placeholder": "--",
                                              "required": true,
                                              "small": false,
                                              "stacked": true,
                                              "type": "select",
                                              "updatesForm": true,
                                              "url": "/search",
                                            },
                                            "externalIssue" => Object {
                                              "alignRight": false,
                                              "allowEmpty": false,
                                              "async": true,
                                              "autoload": true,
                                              "cache": false,
                                              "children": [Function],
                                              "choices": Array [],
                                              "className": undefined,
                                              "default": "",
                                              "disabled": false,
                                              "escapeMarkup": true,
                                              "field": [Function],
                                              "flexibleControlStateSize": true,
                                              "formatMessageValue": [Function],
                                              "hideErrorMessage": false,
                                              "inline": false,
                                              "label": "Issue",
                                              "loadOptions": [Function],
                                              "name": "externalIssue",
                                              "onBlurResetsInput": false,
                                              "onCloseResetsInput": false,
                                              "onSelectResetsInput": false,
                                              "placeholder": "--",
                                              "required": true,
                                              "small": false,
                                              "stacked": true,
                                              "type": "select",
                                              "url": "/search",
                                            },
                                            "comment" => Object {
                                              "children": [Function],
                                              "className": undefined,
                                              "default": "Default Value",
                                              "disabled": false,
                                              "field": [Function],
                                              "flexibleControlStateSize": true,
                                              "help": "Leave blank if you don't want to add a comment to the GitHub issue.",
                                              "hideErrorMessage": false,
                                              "inline": false,
                                              "label": "Comment",
                                              "name": "comment",
                                              "required": false,
                                              "stacked": true,
                                              "type": "textarea",
                                            },
                                          },
                                          "fieldState": Object {},
                                          "fields": Object {
                                            "comment": "Default Value",
                                            "externalIssue": "",
                                            "repo": "scefali/test",
                                          },
                                          "formErrors": undefined,
                                          "formState": undefined,
                                          "initialData": Object {
                                            "comment": "Default Value",
                                            "externalIssue": "",
                                            "repo": "scefali/test",
                                          },
                                          "options": Object {
                                            "allowUndo": false,
                                            "apiEndpoint": "/groups/1/integrations/1/",
                                            "apiMethod": "PUT",
                                            "onFieldChange": [Function],
                                            "onSubmitError": undefined,
                                            "onSubmitSuccess": [Function],
                                            "resetOnError": undefined,
                                            "saveOnBlur": false,
                                          },
                                          "snapshots": Array [
                                            Map {
                                              "repo" => "scefali/test",
                                              "externalIssue" => "",
                                              "comment" => "Default Value",
                                            },
                                          ],
                                        }
                                      }
                                      name="externalIssue"
                                    >
                                      <Observer>
                                        <ControlState
                                          error={false}
                                          isSaved={null}
                                          isSaving={null}
                                        />
                                      </Observer>
                                    </FormFieldControlState>
                                  </div>
                                </FieldControlState>
                              </div>
                            </FieldControlWrapper>
                            <Observer />
                          </div>
                        </FieldControlErrorWrapper>
                      </FieldControl>
                    </div>
                  </FieldWrapper>
                </Field>
              </FormField>
            </InputField>
          </SelectField>
        </FieldFromConfig>
        <FieldFromConfig
          disabled={false}
          field={
            Object {
              "default": "Default Value",
              "help": "Leave blank if you don't want to add a comment to the GitHub issue.",
              "label": "Comment",
              "name": "comment",
              "required": false,
              "type": "textarea",
            }
          }
          flexibleControlStateSize={true}
          inline={false}
          key="comment-Default Value"
          stacked={true}
        >
          <TextareaField
            default="Default Value"
            disabled={false}
            flexibleControlStateSize={true}
            help="Leave blank if you don't want to add a comment to the GitHub issue."
            inline={false}
            label="Comment"
            name="comment"
            required={false}
            stacked={true}
            type="textarea"
          >
            <InputField
              default="Default Value"
              disabled={false}
              field={[Function]}
              flexibleControlStateSize={true}
              help="Leave blank if you don't want to add a comment to the GitHub issue."
              inline={false}
              label="Comment"
              name="comment"
              required={false}
              stacked={true}
              type="textarea"
            >
              <FormField
                default="Default Value"
                disabled={false}
                field={[Function]}
                flexibleControlStateSize={true}
                help="Leave blank if you don't want to add a comment to the GitHub issue."
                hideErrorMessage={false}
                inline={false}
                label="Comment"
                name="comment"
                required={false}
                stacked={true}
                type="textarea"
              >
                <Field
                  alignRight={false}
                  default="Default Value"
                  disabled={false}
                  field={[Function]}
                  flexibleControlStateSize={true}
                  help="Leave blank if you don't want to add a comment to the GitHub issue."
                  id="comment"
                  inline={false}
                  label="Comment"
                  name="comment"
                  required={false}
                  stacked={true}
                  type="textarea"
                  visible={true}
                >
                  <FieldWrapper
                    hasControlState={false}
                    inline={false}
                    stacked={true}
                  >
                    <div
                      className="css-1kl5jlp-FieldWrapper-FieldWrapper e2iyls20"
                    >
                      <FieldDescription
                        htmlFor="comment"
                        inline={false}
                      >
                        <label
                          className="css-1q141sp-FieldDescription e3z18c30"
                          htmlFor="comment"
                        >
                          <FieldLabel
                            disabled={false}
                          >
                            <div
                              className="css-1c18lg-FieldLabel e16ushrl0"
                            >
                              Comment
                               
                            </div>
                          </FieldLabel>
                          <FieldHelp
                            inline={false}
                            stacked={true}
                          >
                            <div
                              className="css-1i2y8a7-FieldHelp e54sr8f0"
                            >
                              Leave blank if you don't want to add a comment to the GitHub issue.
                            </div>
                          </FieldHelp>
                        </label>
                      </FieldDescription>
                      <FieldControl
                        alignRight={false}
                        controlState={
                          <FormFieldControlState
                            model={
                              FormModel {
                                "api": Client {
                                  "_chain": [Function],
                                  "_wrapRequest": [Function],
                                  "bulkUpdate": [Function],
                                  "handleRequestError": [Function],
                                  "hasProjectBeenRenamed": [Function],
                                },
                                "errors": Object {},
                                "fieldDescriptor": Map {
                                  "repo" => Object {
                                    "alignRight": false,
                                    "allowEmpty": false,
                                    "async": true,
                                    "autoload": true,
                                    "cache": false,
                                    "children": [Function],
                                    "choices": Array [
                                      Array [
                                        "scefali/test",
                                        "test",
                                      ],
                                      Array [
                                        "scefali/ZeldaBazaar",
                                        "ZeldaBazaar",
                                      ],
                                    ],
                                    "className": undefined,
                                    "default": "scefali/test",
                                    "disabled": false,
                                    "escapeMarkup": true,
                                    "field": [Function],
                                    "flexibleControlStateSize": true,
                                    "formatMessageValue": [Function],
                                    "hideErrorMessage": false,
                                    "inline": false,
                                    "label": "GitHub Repository",
                                    "loadOptions": [Function],
                                    "name": "repo",
                                    "onBlurResetsInput": false,
                                    "onCloseResetsInput": false,
                                    "onSelectResetsInput": false,
                                    "placeholder": "--",
                                    "required": true,
                                    "small": false,
                                    "stacked": true,
                                    "type": "select",
                                    "updatesForm": true,
                                    "url": "/search",
                                  },
                                  "externalIssue" => Object {
                                    "alignRight": false,
                                    "allowEmpty": false,
                                    "async": true,
                                    "autoload": true,
                                    "cache": false,
                                    "children": [Function],
                                    "choices": Array [],
                                    "className": undefined,
                                    "default": "",
                                    "disabled": false,
                                    "escapeMarkup": true,
                                    "field": [Function],
                                    "flexibleControlStateSize": true,
                                    "formatMessageValue": [Function],
                                    "hideErrorMessage": false,
                                    "inline": false,
                                    "label": "Issue",
                                    "loadOptions": [Function],
                                    "name": "externalIssue",
                                    "onBlurResetsInput": false,
                                    "onCloseResetsInput": false,
                                    "onSelectResetsInput": false,
                                    "placeholder": "--",
                                    "required": true,
                                    "small": false,
                                    "stacked": true,
                                    "type": "select",
                                    "url": "/search",
                                  },
                                  "comment" => Object {
                                    "children": [Function],
                                    "className": undefined,
                                    "default": "Default Value",
                                    "disabled": false,
                                    "field": [Function],
                                    "flexibleControlStateSize": true,
                                    "help": "Leave blank if you don't want to add a comment to the GitHub issue.",
                                    "hideErrorMessage": false,
                                    "inline": false,
                                    "label": "Comment",
                                    "name": "comment",
                                    "required": false,
                                    "stacked": true,
                                    "type": "textarea",
                                  },
                                },
                                "fieldState": Object {},
                                "fields": Object {
                                  "comment": "Default Value",
                                  "externalIssue": "",
                                  "repo": "scefali/test",
                                },
                                "formErrors": undefined,
                                "formState": undefined,
                                "initialData": Object {
                                  "comment": "Default Value",
                                  "externalIssue": "",
                                  "repo": "scefali/test",
                                },
                                "options": Object {
                                  "allowUndo": false,
                                  "apiEndpoint": "/groups/1/integrations/1/",
                                  "apiMethod": "PUT",
                                  "onFieldChange": [Function],
                                  "onSubmitError": undefined,
                                  "onSubmitSuccess": [Function],
                                  "resetOnError": undefined,
                                  "saveOnBlur": false,
                                },
                                "snapshots": Array [
                                  Map {
                                    "repo" => "scefali/test",
                                    "externalIssue" => "",
                                    "comment" => "Default Value",
                                  },
                                ],
                              }
                            }
                            name="comment"
                          />
                        }
                        disabled={false}
                        errorState={
                          <Observer>
                            [Function]
                          </Observer>
                        }
                        flexibleControlStateSize={true}
                        inline={false}
                      >
                        <FieldControlErrorWrapper
                          inline={false}
                        >
                          <div
                            className="css-szisuz-FieldControlErrorWrapper e12jpfuq0"
                          >
                            <FieldControlWrapper>
                              <div
                                className="css-1evsibf-FieldControlWrapper e12jpfuq2"
                              >
                                <FieldControlStyled
                                  alignRight={false}
                                >
                                  <div
                                    className="css-ld1e0a-FieldControlStyled e12jpfuq1"
                                  >
                                    <Observer>
                                      <TextArea
                                        default="Default Value"
                                        disabled={false}
                                        error={false}
                                        field={[Function]}
                                        help="Leave blank if you don't want to add a comment to the GitHub issue."
                                        id="comment"
                                        initialData={
                                          Object {
                                            "comment": "Default Value",
                                            "externalIssue": "",
                                            "repo": "scefali/test",
                                          }
                                        }
                                        inline={false}
                                        label="Comment"
                                        name="comment"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        required={false}
                                        stacked={true}
                                        type="textarea"
                                        value="Default Value"
                                      >
                                        <ForwardRef
                                          className="css-1eaosb4-TextArea e1oph3pe0"
                                          default="Default Value"
                                          disabled={false}
                                          id="comment"
                                          label="Comment"
                                          name="comment"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          required={false}
                                          type="textarea"
                                          value="Default Value"
                                        >
                                          <textarea
                                            className="css-1eaosb4-TextArea e1oph3pe0"
                                            default="Default Value"
                                            disabled={false}
                                            id="comment"
                                            label="Comment"
                                            name="comment"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            required={false}
                                            type="textarea"
                                            value="Default Value"
                                          />
                                        </ForwardRef>
                                      </TextArea>
                                    </Observer>
                                  </div>
                                </FieldControlStyled>
                                <FieldControlState
                                  flexibleControlStateSize={true}
                                >
                                  <div
                                    className="css-mlgkyn-FieldControlState ep9s0su0"
                                  >
                                    <FormFieldControlState
                                      model={
                                        FormModel {
                                          "api": Client {
                                            "_chain": [Function],
                                            "_wrapRequest": [Function],
                                            "bulkUpdate": [Function],
                                            "handleRequestError": [Function],
                                            "hasProjectBeenRenamed": [Function],
                                          },
                                          "errors": Object {},
                                          "fieldDescriptor": Map {
                                            "repo" => Object {
                                              "alignRight": false,
                                              "allowEmpty": false,
                                              "async": true,
                                              "autoload": true,
                                              "cache": false,
                                              "children": [Function],
                                              "choices": Array [
                                                Array [
                                                  "scefali/test",
                                                  "test",
                                                ],
                                                Array [
                                                  "scefali/ZeldaBazaar",
                                                  "ZeldaBazaar",
                                                ],
                                              ],
                                              "className": undefined,
                                              "default": "scefali/test",
                                              "disabled": false,
                                              "escapeMarkup": true,
                                              "field": [Function],
                                              "flexibleControlStateSize": true,
                                              "formatMessageValue": [Function],
                                              "hideErrorMessage": false,
                                              "inline": false,
                                              "label": "GitHub Repository",
                                              "loadOptions": [Function],
                                              "name": "repo",
                                              "onBlurResetsInput": false,
                                              "onCloseResetsInput": false,
                                              "onSelectResetsInput": false,
                                              "placeholder": "--",
                                              "required": true,
                                              "small": false,
                                              "stacked": true,
                                              "type": "select",
                                              "updatesForm": true,
                                              "url": "/search",
                                            },
                                            "externalIssue" => Object {
                                              "alignRight": false,
                                              "allowEmpty": false,
                                              "async": true,
                                              "autoload": true,
                                              "cache": false,
                                              "children": [Function],
                                              "choices": Array [],
                                              "className": undefined,
                                              "default": "",
                                              "disabled": false,
                                              "escapeMarkup": true,
                                              "field": [Function],
                                              "flexibleControlStateSize": true,
                                              "formatMessageValue": [Function],
                                              "hideErrorMessage": false,
                                              "inline": false,
                                              "label": "Issue",
                                              "loadOptions": [Function],
                                              "name": "externalIssue",
                                              "onBlurResetsInput": false,
                                              "onCloseResetsInput": false,
                                              "onSelectResetsInput": false,
                                              "placeholder": "--",
                                              "required": true,
                                              "small": false,
                                              "stacked": true,
                                              "type": "select",
                                              "url": "/search",
                                            },
                                            "comment" => Object {
                                              "children": [Function],
                                              "className": undefined,
                                              "default": "Default Value",
                                              "disabled": false,
                                              "field": [Function],
                                              "flexibleControlStateSize": true,
                                              "help": "Leave blank if you don't want to add a comment to the GitHub issue.",
                                              "hideErrorMessage": false,
                                              "inline": false,
                                              "label": "Comment",
                                              "name": "comment",
                                              "required": false,
                                              "stacked": true,
                                              "type": "textarea",
                                            },
                                          },
                                          "fieldState": Object {},
                                          "fields": Object {
                                            "comment": "Default Value",
                                            "externalIssue": "",
                                            "repo": "scefali/test",
                                          },
                                          "formErrors": undefined,
                                          "formState": undefined,
                                          "initialData": Object {
                                            "comment": "Default Value",
                                            "externalIssue": "",
                                            "repo": "scefali/test",
                                          },
                                          "options": Object {
                                            "allowUndo": false,
                                            "apiEndpoint": "/groups/1/integrations/1/",
                                            "apiMethod": "PUT",
                                            "onFieldChange": [Function],
                                            "onSubmitError": undefined,
                                            "onSubmitSuccess": [Function],
                                            "resetOnError": undefined,
                                            "saveOnBlur": false,
                                          },
                                          "snapshots": Array [
                                            Map {
                                              "repo" => "scefali/test",
                                              "externalIssue" => "",
                                              "comment" => "Default Value",
                                            },
                                          ],
                                        }
                                      }
                                      name="comment"
                                    >
                                      <Observer>
                                        <ControlState
                                          error={false}
                                          isSaved={null}
                                          isSaving={null}
                                        />
                                      </Observer>
                                    </FormFieldControlState>
                                  </div>
                                </FieldControlState>
                              </div>
                            </FieldControlWrapper>
                            <Observer />
                          </div>
                        </FieldControlErrorWrapper>
                      </FieldControl>
                    </div>
                  </FieldWrapper>
                </Field>
              </FormField>
            </InputField>
          </TextareaField>
        </FieldFromConfig>
      </div>
      <StyledFooter
        className="modal-footer"
        saveOnBlur={false}
      >
        <div
          className="modal-footer css-yfxs1k-StyledFooter e1r1zmbj0"
        >
          <DefaultButtons>
            <div
              className="css-1utgghf-DefaultButtons e1r1zmbj1"
            >
              <Observer>
                <Button
                  align="center"
                  data-test-id="form-submit"
                  disabled={false}
                  priority="primary"
                  type="submit"
                >
                  <StyledButton
                    aria-disabled={false}
                    aria-label="Link Issue"
                    data-test-id="form-submit"
                    disabled={false}
                    onClick={[Function]}
                    priority="primary"
                    role="button"
                    type="submit"
                  >
                    <ForwardRef
                      aria-disabled={false}
                      aria-label="Link Issue"
                      className="css-1e05jtd-StyledButton edwq9my0"
                      data-test-id="form-submit"
                      disabled={false}
                      onClick={[Function]}
                      priority="primary"
                      role="button"
                      type="submit"
                    >
                      <button
                        aria-disabled={false}
                        aria-label="Link Issue"
                        className="css-1e05jtd-StyledButton edwq9my0"
                        data-test-id="form-submit"
                        onClick={[Function]}
                        role="button"
                        type="submit"
                      >
                        <ButtonLabel
                          align="center"
                          priority="primary"
                        >
                          <Component
                            align="center"
                            className="css-zmpclt-ButtonLabel edwq9my1"
                            priority="primary"
                          >
                            <span
                              className="css-zmpclt-ButtonLabel edwq9my1"
                            >
                              Link Issue
                            </span>
                          </Component>
                        </ButtonLabel>
                      </button>
                    </ForwardRef>
                  </StyledButton>
                </Button>
              </Observer>
            </div>
          </DefaultButtons>
        </div>
      </StyledFooter>
    </form>
  </Form>
</ExternalIssueForm>
`;
