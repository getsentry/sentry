// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ExternalIssueActions with an external issue linked renders 1`] = `null`;

exports[`ExternalIssueActions with no external issues linked renders 1`] = `
<ExternalIssueActions
  group={
    Object {
      "activity": Array [],
      "annotations": Array [],
      "assignedTo": null,
      "count": "327482",
      "culprit": "fetchData(app/components/group/suggestedOwners/suggestedOwners)",
      "firstRelease": null,
      "firstSeen": "2019-04-05T19:44:05.963Z",
      "hasSeen": false,
      "id": "1",
      "isBookmarked": false,
      "isPublic": false,
      "isSubscribed": false,
      "lastRelease": null,
      "lastSeen": "2019-04-11T01:08:59Z",
      "level": "warning",
      "logger": null,
      "metadata": Object {
        "function": "fetchData",
        "type": "RequestError",
      },
      "numComments": 0,
      "participants": Array [],
      "permalink": "https://foo.io/organizations/foo/issues/1234/",
      "platform": "javascript",
      "pluginActions": Array [],
      "pluginContexts": Array [],
      "pluginIssues": Array [],
      "project": Object {
        "id": "2",
        "platform": "javascript",
        "slug": "project-slug",
      },
      "seenBy": Array [],
      "shareId": null,
      "shortId": "JAVASCRIPT-6QS",
      "stats": Object {
        "24h": Array [
          Array [
            1517281200,
            2,
          ],
          Array [
            1517310000,
            1,
          ],
        ],
        "30d": Array [
          Array [
            1514764800,
            1,
          ],
          Array [
            1515024000,
            122,
          ],
        ],
      },
      "status": "unresolved",
      "statusDetails": Object {},
      "subscriptionDetails": null,
      "tags": Array [],
      "title": "RequestError: GET /issues/ 404",
      "type": "error",
      "userCount": 35097,
      "userReportCount": 0,
    }
  }
  integration={
    Object {
      "configData": Object {},
      "configOrganization": Array [],
      "domainName": "github.com/test-integration",
      "externalIssues": Array [],
      "icon": "http://example.com/integration_icon.png",
      "id": "1",
      "name": "Test Integration",
      "projects": Array [],
      "provider": Object {
        "canAdd": true,
        "features": Array [],
        "key": "github",
        "name": "GitHub",
      },
    }
  }
>
  <IssueSyncListElement
    externalIssueDisplayName={null}
    externalIssueId={null}
    externalIssueKey={null}
    externalIssueLink={null}
    hoverCardBody={
      <IntegrationItem
        compact={false}
        integration={
          Object {
            "configData": Object {},
            "configOrganization": Array [],
            "domainName": "github.com/test-integration",
            "externalIssues": Array [],
            "icon": "http://example.com/integration_icon.png",
            "id": "1",
            "name": "Test Integration",
            "projects": Array [],
            "provider": Object {
              "canAdd": true,
              "features": Array [],
              "key": "github",
              "name": "GitHub",
            },
          }
        }
      />
    }
    hoverCardHeader="Linked GitHub Integration"
    integrationType="github"
    onClose={[Function]}
    onOpen={[Function]}
  >
    <IssueSyncListElementContainer>
      <div
        className="css-ocy39c-IssueSyncListElementContainer euat0et0"
      >
        <ForwardRef(render)>
          <Hovercard
            body={
              <IntegrationItem
                compact={false}
                integration={
                  Object {
                    "configData": Object {},
                    "configOrganization": Array [],
                    "domainName": "github.com/test-integration",
                    "externalIssues": Array [],
                    "icon": "http://example.com/integration_icon.png",
                    "id": "1",
                    "name": "Test Integration",
                    "projects": Array [],
                    "provider": Object {
                      "canAdd": true,
                      "features": Array [],
                      "key": "github",
                      "name": "GitHub",
                    },
                  }
                }
              />
            }
            containerClassName="css-1gb8k2a"
            displayTimeout={100}
            header="Linked GitHub Integration"
            position="top"
          >
            <Manager>
              <Reference>
                <InnerReference
                  setReferenceNode={[Function]}
                >
                  <span
                    aria-describedby="hovercard-123456"
                    className="css-1gb8k2a"
                    onMouseEnter={[Function]}
                    onMouseLeave={[Function]}
                  >
                    <IconGithub
                      size="md"
                    >
                      <ForwardRef(SvgIcon)
                        size="md"
                      >
                        <svg
                          fill="currentColor"
                          height="20px"
                          viewBox="0 0 16 16"
                          width="20px"
                        >
                          <path
                            d="M8,.25A7.94,7.94,0,0,0,5.47,15.74c.4.07.55-.18.55-.39S6,14.66,6,14c-2.23.48-2.7-1.06-2.7-1.06a2.12,2.12,0,0,0-.89-1.17c-.72-.49.06-.48.06-.48a1.68,1.68,0,0,1,1.22.82A1.72,1.72,0,0,0,6,12.77a1.68,1.68,0,0,1,.51-1.06c-1.78-.2-3.64-.88-3.64-3.93a3,3,0,0,1,.82-2.13,2.82,2.82,0,0,1,.08-2.1s.67-.22,2.2.81a7.84,7.84,0,0,1,2-.27,7.84,7.84,0,0,1,2,.27c1.53-1,2.2-.81,2.2-.81a2.82,2.82,0,0,1,.08,2.1,3,3,0,0,1,.82,2.13c0,3.05-1.87,3.73-3.65,3.92A1.89,1.89,0,0,1,10,13.17c0,1.07,0,1.92,0,2.18s.15.46.55.39A7.94,7.94,0,0,0,8,.25"
                          />
                        </svg>
                      </ForwardRef(SvgIcon)>
                    </IconGithub>
                    <IntegrationLink
                      onClick={[Function]}
                    >
                      <a
                        className="css-mc91wr-IntegrationLink euat0et1"
                        onClick={[Function]}
                      >
                        Link GitHub Issue
                      </a>
                    </IntegrationLink>
                  </span>
                </InnerReference>
              </Reference>
            </Manager>
          </Hovercard>
        </ForwardRef(render)>
        <StyledIcon
          onClick={[Function]}
        >
          <span
            className="css-anegxi-StyledIcon euat0et2"
            onClick={[Function]}
          >
            <IconOpen>
              <ForwardRef(SvgIcon)>
                <svg
                  fill="currentColor"
                  height="16px"
                  viewBox="0 0 16 16"
                  width="16px"
                >
                  <path
                    d="M13.25,16H2.75A2.75,2.75,0,0,1,0,13.25V2.75A2.75,2.75,0,0,1,2.75,0h10.5A2.75,2.75,0,0,1,16,2.75v10.5A2.75,2.75,0,0,1,13.25,16ZM2.75,1.5A1.25,1.25,0,0,0,1.5,2.75v10.5A1.25,1.25,0,0,0,2.75,14.5h10.5a1.25,1.25,0,0,0,1.25-1.25V2.75A1.25,1.25,0,0,0,13.25,1.5Z"
                  />
                  <path
                    d="M11.13,10.63a.74.74,0,0,1-.75-.75V5.62H6.12a.75.75,0,0,1,0-1.5h5a.76.76,0,0,1,.75.75v5A.75.75,0,0,1,11.13,10.63Z"
                  />
                  <path
                    d="M4.87,11.88a.79.79,0,0,1-.53-.22.75.75,0,0,1,0-1.06L10.6,4.34A.75.75,0,0,1,11.66,5.4L5.4,11.66A.77.77,0,0,1,4.87,11.88Z"
                  />
                </svg>
              </ForwardRef(SvgIcon)>
            </IconOpen>
          </span>
        </StyledIcon>
      </div>
    </IssueSyncListElementContainer>
  </IssueSyncListElement>
  <Modal
    animation={false}
    autoFocus={true}
    backdrop="static"
    bsClass="modal"
    dialogComponentClass={[Function]}
    enforceFocus={false}
    keyboard={true}
    manager={
      ModalManager {
        "add": [Function],
        "containers": Array [],
        "data": Array [],
        "handleContainerOverflow": true,
        "hideSiblingNodes": true,
        "isTopModal": [Function],
        "modals": Array [],
        "remove": [Function],
      }
    }
    onHide={[Function]}
    renderBackdrop={[Function]}
    restoreFocus={true}
    show={false}
  >
    <Modal
      autoFocus={true}
      backdrop="static"
      backdropClassName="modal-backdrop"
      containerClassName="modal-open"
      enforceFocus={false}
      keyboard={true}
      manager={
        ModalManager {
          "add": [Function],
          "containers": Array [],
          "data": Array [],
          "handleContainerOverflow": true,
          "hideSiblingNodes": true,
          "isTopModal": [Function],
          "modals": Array [],
          "remove": [Function],
        }
      }
      onEntering={[Function]}
      onExited={[Function]}
      onHide={[Function]}
      renderBackdrop={[Function]}
      restoreFocus={true}
      show={false}
    />
  </Modal>
</ExternalIssueActions>
`;
