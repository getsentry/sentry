// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ExternalIssueActions with an external issue linked renders 1`] = `null`;

exports[`ExternalIssueActions with no external issues linked renders 1`] = `
<ExternalIssueActions
  group={
    Object {
      "assignedTo": null,
      "id": "1",
      "project": Object {
        "id": "2",
        "slug": "project-slug",
      },
      "stats": Object {
        "24h": Array [
          Array [
            1517281200,
            2,
          ],
          Array [
            1517310000,
            1,
          ],
        ],
        "30d": Array [
          Array [
            1514764800,
            1,
          ],
          Array [
            1515024000,
            122,
          ],
        ],
      },
      "tags": Array [],
    }
  }
  integration={
    Object {
      "configData": Object {},
      "configOrganization": Array [],
      "domainName": "github.com/test-integration",
      "externalIssues": Array [],
      "icon": "http://example.com/integration_icon.png",
      "id": "1",
      "name": "Test Integration",
      "projects": Array [],
      "provider": Object {
        "canAdd": true,
        "features": Array [],
        "key": "github",
        "name": "GitHub",
      },
    }
  }
>
  <IssueSyncListElement
    externalIssueDisplayName={null}
    externalIssueId={null}
    externalIssueKey={null}
    externalIssueLink={null}
    hoverCardBody={
      <IntegrationItem
        integration={
          Object {
            "configData": Object {},
            "configOrganization": Array [],
            "domainName": "github.com/test-integration",
            "externalIssues": Array [],
            "icon": "http://example.com/integration_icon.png",
            "id": "1",
            "name": "Test Integration",
            "projects": Array [],
            "provider": Object {
              "canAdd": true,
              "features": Array [],
              "key": "github",
              "name": "GitHub",
            },
          }
        }
      />
    }
    hoverCardHeader="Linked GitHub Integration"
    integrationName="Test Integration"
    integrationType="github"
    onClose={[Function]}
    onOpen={[Function]}
  >
    <IssueSyncListElementContainer>
      <div
        className="css-lh3vnw-IssueSyncListElementContainer e1vaar1z0"
      >
        <Hovercard
          body={
            <IntegrationItem
              integration={
                Object {
                  "configData": Object {},
                  "configOrganization": Array [],
                  "domainName": "github.com/test-integration",
                  "externalIssues": Array [],
                  "icon": "http://example.com/integration_icon.png",
                  "id": "1",
                  "name": "Test Integration",
                  "projects": Array [],
                  "provider": Object {
                    "canAdd": true,
                    "features": Array [],
                    "key": "github",
                    "name": "GitHub",
                  },
                }
              }
            />
          }
          containerClassName="css-1kx7hlk-hoverCardContainer"
          displayTimeout={100}
          header="Linked GitHub Integration"
        >
          <Container
            className="css-1kx7hlk-hoverCardContainer"
            innerRef={
              Object {
                "current": <span
                  class="css-86d5c-Container-hoverCardContainer e38w1je1"
                >
                  <svg
                    class="e1vaar1z1 css-ihls3x-StyledSvg-IntegrationIcon e2idor0"
                    height="1em"
                    viewBox="[object Object]"
                    width="1em"
                  >
                    <use
                      href="#test"
                      xlink:href="#test"
                    />
                  </svg>
                  <a
                    class="css-1g8yzea-IntegrationLink e1vaar1z2"
                  >
                    Link GitHub Issue
                  </a>
                </span>,
              }
            }
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
          >
            <span
              className="css-86d5c-Container-hoverCardContainer e38w1je1"
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
            >
              <IntegrationIcon
                src="icon-github"
              >
                <InlineSvg
                  className="css-jn9d7y-IntegrationIcon e1vaar1z1"
                  src="icon-github"
                >
                  <StyledSvg
                    className="css-jn9d7y-IntegrationIcon e1vaar1z1"
                    height="1em"
                    viewBox={Object {}}
                    width="1em"
                  >
                    <svg
                      className="e1vaar1z1 css-ihls3x-StyledSvg-IntegrationIcon e2idor0"
                      height="1em"
                      viewBox={Object {}}
                      width="1em"
                    >
                      <use
                        href="#test"
                        xlinkHref="#test"
                      />
                    </svg>
                  </StyledSvg>
                </InlineSvg>
              </IntegrationIcon>
              <IntegrationLink
                href={null}
                onClick={[Function]}
              >
                <a
                  className="css-1g8yzea-IntegrationLink e1vaar1z2"
                  href={null}
                  onClick={[Function]}
                >
                  Link GitHub Issue
                </a>
              </IntegrationLink>
            </span>
          </Container>
        </Hovercard>
        <OpenCloseIcon
          isLinked={null}
          onClick={[Function]}
          src="icon-close"
        >
          <InlineSvg
            className="css-100fxiy-OpenCloseIcon e1vaar1z3"
            isLinked={null}
            onClick={[Function]}
            src="icon-close"
          >
            <StyledSvg
              className="css-100fxiy-OpenCloseIcon e1vaar1z3"
              height="1em"
              isLinked={null}
              onClick={[Function]}
              viewBox={Object {}}
              width="1em"
            >
              <svg
                className="e1vaar1z3 css-3kdvxo-StyledSvg-OpenCloseIcon e2idor0"
                height="1em"
                onClick={[Function]}
                viewBox={Object {}}
                width="1em"
              >
                <use
                  href="#test"
                  xlinkHref="#test"
                />
              </svg>
            </StyledSvg>
          </InlineSvg>
        </OpenCloseIcon>
      </div>
    </IssueSyncListElementContainer>
  </IssueSyncListElement>
  <Modal
    animation={false}
    autoFocus={true}
    backdrop="static"
    bsClass="modal"
    dialogComponentClass={[Function]}
    enforceFocus={false}
    keyboard={true}
    manager={
      ModalManager {
        "add": [Function],
        "containers": Array [],
        "data": Array [],
        "handleContainerOverflow": true,
        "hideSiblingNodes": true,
        "isTopModal": [Function],
        "modals": Array [],
        "remove": [Function],
      }
    }
    onHide={[Function]}
    renderBackdrop={[Function]}
    restoreFocus={true}
    show={false}
  >
    <Modal
      autoFocus={true}
      backdrop="static"
      backdropClassName="modal-backdrop"
      containerClassName="modal-open"
      enforceFocus={false}
      keyboard={true}
      manager={
        ModalManager {
          "add": [Function],
          "containers": Array [],
          "data": Array [],
          "handleContainerOverflow": true,
          "hideSiblingNodes": true,
          "isTopModal": [Function],
          "modals": Array [],
          "remove": [Function],
        }
      }
      onEntering={[Function]}
      onExited={[Function]}
      onHide={[Function]}
      renderBackdrop={[Function]}
      restoreFocus={true}
      show={false}
    />
  </Modal>
</ExternalIssueActions>
`;
