// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ExternalIssueActions with an external issue linked renders 1`] = `null`;

exports[`ExternalIssueActions with no external issues linked renders 1`] = `
<ExternalIssueActions
  group={
    Object {
      "activity": Array [],
      "annotations": Array [],
      "assignedTo": null,
      "count": "327482",
      "culprit": "fetchData(app/components/group/suggestedOwners)",
      "firstRelease": null,
      "firstSeen": "2019-04-05T19:44:05.963Z",
      "hasSeen": false,
      "id": "1",
      "isBookmarked": false,
      "isPublic": false,
      "isSubscribed": false,
      "lastRelease": null,
      "lastSeen": "2019-04-11T01:08:59Z",
      "level": "warning",
      "logger": null,
      "metadata": Object {
        "function": "fetchData",
        "type": "RequestError",
      },
      "numComments": 0,
      "participants": Array [],
      "permalink": "https://foo.io/organizations/foo/issues/1234/",
      "platform": "javascript",
      "pluginActions": Array [],
      "pluginContexts": Array [],
      "pluginIssues": Array [],
      "project": Object {
        "id": "2",
        "platform": "javascript",
        "slug": "project-slug",
      },
      "seenBy": Array [],
      "shareId": null,
      "shortId": "JAVASCRIPT-6QS",
      "stats": Object {
        "24h": Array [
          Array [
            1517281200,
            2,
          ],
          Array [
            1517310000,
            1,
          ],
        ],
        "30d": Array [
          Array [
            1514764800,
            1,
          ],
          Array [
            1515024000,
            122,
          ],
        ],
      },
      "status": "unresolved",
      "statusDetails": Object {},
      "subscriptionDetails": null,
      "tags": Array [],
      "title": "RequestError: GET /issues/ 404",
      "type": "error",
      "userCount": 35097,
      "userReportCount": 0,
    }
  }
  integration={
    Object {
      "configData": Object {},
      "configOrganization": Array [],
      "domainName": "github.com/test-integration",
      "externalIssues": Array [],
      "icon": "http://example.com/integration_icon.png",
      "id": "1",
      "name": "Test Integration",
      "projects": Array [],
      "provider": Object {
        "canAdd": true,
        "features": Array [],
        "key": "github",
        "name": "GitHub",
      },
    }
  }
>
  <IssueSyncListElement
    externalIssueDisplayName={null}
    externalIssueId={null}
    externalIssueKey={null}
    externalIssueLink={null}
    hoverCardBody={
      <IntegrationItem
        compact={false}
        integration={
          Object {
            "configData": Object {},
            "configOrganization": Array [],
            "domainName": "github.com/test-integration",
            "externalIssues": Array [],
            "icon": "http://example.com/integration_icon.png",
            "id": "1",
            "name": "Test Integration",
            "projects": Array [],
            "provider": Object {
              "canAdd": true,
              "features": Array [],
              "key": "github",
              "name": "GitHub",
            },
          }
        }
      />
    }
    hoverCardHeader="Linked GitHub Integration"
    integrationType="github"
    onClose={[Function]}
    onOpen={[Function]}
  >
    <IssueSyncListElementContainer>
      <div
        className="css-lh3vnw-IssueSyncListElementContainer euat0et0"
      >
        <Hovercard
          body={
            <IntegrationItem
              compact={false}
              integration={
                Object {
                  "configData": Object {},
                  "configOrganization": Array [],
                  "domainName": "github.com/test-integration",
                  "externalIssues": Array [],
                  "icon": "http://example.com/integration_icon.png",
                  "id": "1",
                  "name": "Test Integration",
                  "projects": Array [],
                  "provider": Object {
                    "canAdd": true,
                    "features": Array [],
                    "key": "github",
                    "name": "GitHub",
                  },
                }
              }
            />
          }
          containerClassName="css-2jp7uo-hoverCardContainer"
          displayTimeout={100}
          header="Linked GitHub Integration"
          position="top"
        >
          <Manager>
            <Reference>
              <InnerReference
                setReferenceNode={[Function]}
              >
                <span
                  aria-describedby="hovercard-123456"
                  className="css-2jp7uo-hoverCardContainer"
                  onMouseEnter={[Function]}
                  onMouseLeave={[Function]}
                >
                  <IntegrationIcon
                    src="icon-github"
                  >
                    <ForwardRef
                      className="css-txtxza-InlineSvg-IntegrationIcon euat0et1"
                      src="icon-github"
                    >
                      <svg
                        className="css-txtxza-InlineSvg-IntegrationIcon euat0et1"
                        height="1em"
                        viewBox={Object {}}
                        width="1em"
                      >
                        <use
                          href="#test"
                          xlinkHref="#test"
                        />
                      </svg>
                    </ForwardRef>
                  </IntegrationIcon>
                  <IntegrationLink
                    onClick={[Function]}
                  >
                    <a
                      className="css-17up6h5-IntegrationLink euat0et2"
                      onClick={[Function]}
                    >
                      Link GitHub Issue
                    </a>
                  </IntegrationLink>
                </span>
              </InnerReference>
            </Reference>
          </Manager>
        </Hovercard>
        <OpenCloseIcon
          isLinked={false}
          onClick={[Function]}
          src="icon-close"
        >
          <ForwardRef
            className="css-6dwiog-InlineSvg-OpenCloseIcon euat0et3"
            isLinked={false}
            onClick={[Function]}
            src="icon-close"
          >
            <svg
              className="css-6dwiog-InlineSvg-OpenCloseIcon euat0et3"
              height="1em"
              onClick={[Function]}
              viewBox={Object {}}
              width="1em"
            >
              <use
                href="#test"
                xlinkHref="#test"
              />
            </svg>
          </ForwardRef>
        </OpenCloseIcon>
      </div>
    </IssueSyncListElementContainer>
  </IssueSyncListElement>
  <Modal
    animation={false}
    autoFocus={true}
    backdrop="static"
    bsClass="modal"
    dialogComponentClass={[Function]}
    enforceFocus={false}
    keyboard={true}
    manager={
      ModalManager {
        "add": [Function],
        "containers": Array [],
        "data": Array [],
        "handleContainerOverflow": true,
        "hideSiblingNodes": true,
        "isTopModal": [Function],
        "modals": Array [],
        "remove": [Function],
      }
    }
    onHide={[Function]}
    renderBackdrop={[Function]}
    restoreFocus={true}
    show={false}
  >
    <Modal
      autoFocus={true}
      backdrop="static"
      backdropClassName="modal-backdrop"
      containerClassName="modal-open"
      enforceFocus={false}
      keyboard={true}
      manager={
        ModalManager {
          "add": [Function],
          "containers": Array [],
          "data": Array [],
          "handleContainerOverflow": true,
          "hideSiblingNodes": true,
          "isTopModal": [Function],
          "modals": Array [],
          "remove": [Function],
        }
      }
      onEntering={[Function]}
      onExited={[Function]}
      onHide={[Function]}
      renderBackdrop={[Function]}
      restoreFocus={true}
      show={false}
    />
  </Modal>
</ExternalIssueActions>
`;
