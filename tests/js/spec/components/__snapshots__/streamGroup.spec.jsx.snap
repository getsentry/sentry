// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`StreamGroup renders with anchors 1`] = `
<StreamGroup
  canSelect={true}
  childContextTypes={
    Object {
      "location": [Function],
      "organization": [Function],
      "project": [Function],
      "router": [Function],
    }
  }
  context={
    Object {
      "location": Object {
        "query": Object {},
      },
      "organization": Object {
        "access": Array [
          "org:read",
          "org:write",
          "org:admin",
          "org:integrations",
          "project:read",
          "project:write",
          "project:admin",
          "team:read",
          "team:write",
          "team:admin",
        ],
        "experiments": Object {},
        "features": Array [],
        "id": "3",
        "name": "Organization Name",
        "onboardingTasks": Array [],
        "projects": Array [
          Object {
            "environments": Array [],
            "hasAccess": true,
            "id": "2",
            "isBookmarked": false,
            "isMember": true,
            "name": "Project Name",
            "slug": "project-slug",
            "teams": Array [],
          },
        ],
        "scrapeJavaScript": true,
        "slug": "org-slug",
        "status": Object {
          "id": "active",
          "name": "active",
        },
        "teams": Array [],
      },
      "project": Object {
        "environments": Array [],
        "hasAccess": true,
        "id": "2",
        "isBookmarked": false,
        "isMember": true,
        "name": "Project Name",
        "slug": "project-slug",
        "teams": Array [],
      },
      "router": Object {
        "createHref": [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "pathname": "/organizations/org-slug/issues/1337/",
                "query": Object {
                  "_allp": 1,
                  "query": undefined,
                },
              },
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        },
        "go": [MockFunction],
        "goBack": [MockFunction],
        "goForward": [MockFunction],
        "isActive": [MockFunction],
        "listen": [MockFunction],
        "location": Object {
          "query": Object {},
        },
        "params": Object {
          "orgId": "org-slug",
        },
        "push": [MockFunction],
        "replace": [MockFunction],
        "setRouteLeaveHook": [MockFunction],
      },
    }
  }
  firstSeen="2017-07-01T02:06:02Z"
  groupId="groupId"
  hasGuideAnchor={true}
  id="1L"
  lastSeen="2017-07-25T22:56:12Z"
  orgId="orgId"
  statsPeriod="24h"
  withChart={true}
>
  <Group
    data-test-id="group"
    onClick={[Function]}
    p={2}
  >
    <div
      className="css-c3np95-PanelItem-Group e1x6ya7d0"
      data-test-id="group"
      onClick={[Function]}
    >
      <GroupCheckbox
        ml={2}
      >
        <div
          className="css-uvt8ww-GroupCheckbox e1x6ya7d2"
        >
          <GroupCheckBox
            id="1337"
          >
            <Checkbox
              aria-label="Select Issue"
              checked={false}
              onChange={[Function]}
              value="1337"
            >
              <input
                aria-label="Select Issue"
                checked={false}
                onChange={[Function]}
                type="checkbox"
                value="1337"
              />
            </Checkbox>
          </GroupCheckBox>
        </div>
      </GroupCheckbox>
      <GroupSummary
        flex="1"
        ml={1}
        mr={1}
        width={
          Array [
            0.6666666666666666,
            0.6666666666666666,
            0.5,
          ]
        }
      >
        <div
          className="css-axmshd-GroupSummary e1x6ya7d1"
        >
          <withRouter(EventOrGroupHeader)
            data={
              Object {
                "activity": Array [],
                "annotations": Array [],
                "assignedTo": null,
                "count": "327482",
                "culprit": "fetchData(app/components/group/suggestedOwners/suggestedOwners)",
                "firstRelease": null,
                "firstSeen": "2019-04-05T19:44:05.963Z",
                "hasSeen": false,
                "id": "1337",
                "isBookmarked": false,
                "isPublic": false,
                "isSubscribed": false,
                "lastRelease": null,
                "lastSeen": "2019-04-11T01:08:59Z",
                "level": "warning",
                "logger": null,
                "metadata": Object {
                  "function": "fetchData",
                  "type": "RequestError",
                },
                "numComments": 0,
                "participants": Array [],
                "permalink": "https://foo.io/organizations/foo/issues/1234/",
                "platform": "javascript",
                "pluginActions": Array [],
                "pluginContexts": Array [],
                "pluginIssues": Array [],
                "project": Object {
                  "id": "13",
                  "slug": "test",
                },
                "seenBy": Array [],
                "shareId": null,
                "shortId": "JAVASCRIPT-6QS",
                "stats": Object {
                  "24h": Array [
                    Array [
                      1517281200,
                      2,
                    ],
                    Array [
                      1517310000,
                      1,
                    ],
                  ],
                  "30d": Array [
                    Array [
                      1514764800,
                      1,
                    ],
                    Array [
                      1515024000,
                      122,
                    ],
                  ],
                },
                "status": "unresolved",
                "statusDetails": Object {},
                "subscriptionDetails": null,
                "tags": Array [],
                "title": "RequestError: GET /issues/ 404",
                "type": "error",
                "userCount": 35097,
                "userReportCount": 0,
              }
            }
          >
            <EventOrGroupHeader
              data={
                Object {
                  "activity": Array [],
                  "annotations": Array [],
                  "assignedTo": null,
                  "count": "327482",
                  "culprit": "fetchData(app/components/group/suggestedOwners/suggestedOwners)",
                  "firstRelease": null,
                  "firstSeen": "2019-04-05T19:44:05.963Z",
                  "hasSeen": false,
                  "id": "1337",
                  "isBookmarked": false,
                  "isPublic": false,
                  "isSubscribed": false,
                  "lastRelease": null,
                  "lastSeen": "2019-04-11T01:08:59Z",
                  "level": "warning",
                  "logger": null,
                  "metadata": Object {
                    "function": "fetchData",
                    "type": "RequestError",
                  },
                  "numComments": 0,
                  "participants": Array [],
                  "permalink": "https://foo.io/organizations/foo/issues/1234/",
                  "platform": "javascript",
                  "pluginActions": Array [],
                  "pluginContexts": Array [],
                  "pluginIssues": Array [],
                  "project": Object {
                    "id": "13",
                    "slug": "test",
                  },
                  "seenBy": Array [],
                  "shareId": null,
                  "shortId": "JAVASCRIPT-6QS",
                  "stats": Object {
                    "24h": Array [
                      Array [
                        1517281200,
                        2,
                      ],
                      Array [
                        1517310000,
                        1,
                      ],
                    ],
                    "30d": Array [
                      Array [
                        1514764800,
                        1,
                      ],
                      Array [
                        1515024000,
                        122,
                      ],
                    ],
                  },
                  "status": "unresolved",
                  "statusDetails": Object {},
                  "subscriptionDetails": null,
                  "tags": Array [],
                  "title": "RequestError: GET /issues/ 404",
                  "type": "error",
                  "userCount": 35097,
                  "userReportCount": 0,
                }
              }
              includeLink={true}
              location={
                Object {
                  "query": Object {},
                }
              }
              params={
                Object {
                  "orgId": "org-slug",
                }
              }
              router={
                Object {
                  "createHref": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "pathname": "/organizations/org-slug/issues/1337/",
                          "query": Object {
                            "_allp": 1,
                            "query": undefined,
                          },
                        },
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "go": [MockFunction],
                  "goBack": [MockFunction],
                  "goForward": [MockFunction],
                  "isActive": [MockFunction],
                  "listen": [MockFunction],
                  "location": Object {
                    "query": Object {},
                  },
                  "params": Object {
                    "orgId": "org-slug",
                  },
                  "push": [MockFunction],
                  "replace": [MockFunction],
                  "setRouteLeaveHook": [MockFunction],
                }
              }
              size="normal"
            >
              <div
                data-test-id="event-issue-header"
              >
                <Title
                  size="normal"
                >
                  <div
                    className="css-xfcjv1-Title-truncateStyles eex8od0"
                    size="normal"
                  >
                    <GlobalSelectionLink
                      data-test-id={null}
                      style={null}
                      to={
                        Object {
                          "pathname": "/organizations/org-slug/issues/1337/",
                          "query": Object {
                            "_allp": 1,
                            "query": undefined,
                          },
                        }
                      }
                    >
                      <Link
                        data-test-id={null}
                        onlyActiveOnIndex={false}
                        style={null}
                        to={
                          Object {
                            "pathname": "/organizations/org-slug/issues/1337/",
                            "query": Object {
                              "_allp": 1,
                              "query": undefined,
                            },
                          }
                        }
                      >
                        <a
                          data-test-id={null}
                          onClick={[Function]}
                          style={null}
                        >
                          <GroupLevel
                            level="warning"
                          >
                            <div
                              className="css-fbr19n-GroupLevel eex8od4"
                            >
                              <Tooltip
                                containerDisplayMode="inline-block"
                                position="top"
                                title="Error level: Warning"
                              >
                                <Manager>
                                  <Reference>
                                    <InnerReference
                                      setReferenceNode={[Function]}
                                    >
                                      <span
                                        aria-describedby="tooltip-123456"
                                        onBlur={[Function]}
                                        onFocus={[Function]}
                                        onMouseEnter={[Function]}
                                        onMouseLeave={[Function]}
                                      />
                                    </InnerReference>
                                  </Reference>
                                </Manager>
                              </Tooltip>
                            </div>
                          </GroupLevel>
                          <EventOrGroupTitle
                            data={
                              Object {
                                "activity": Array [],
                                "annotations": Array [],
                                "assignedTo": null,
                                "count": "327482",
                                "culprit": "fetchData(app/components/group/suggestedOwners/suggestedOwners)",
                                "firstRelease": null,
                                "firstSeen": "2019-04-05T19:44:05.963Z",
                                "hasSeen": false,
                                "id": "1337",
                                "isBookmarked": false,
                                "isPublic": false,
                                "isSubscribed": false,
                                "lastRelease": null,
                                "lastSeen": "2019-04-11T01:08:59Z",
                                "level": "warning",
                                "logger": null,
                                "metadata": Object {
                                  "function": "fetchData",
                                  "type": "RequestError",
                                },
                                "numComments": 0,
                                "participants": Array [],
                                "permalink": "https://foo.io/organizations/foo/issues/1234/",
                                "platform": "javascript",
                                "pluginActions": Array [],
                                "pluginContexts": Array [],
                                "pluginIssues": Array [],
                                "project": Object {
                                  "id": "13",
                                  "slug": "test",
                                },
                                "seenBy": Array [],
                                "shareId": null,
                                "shortId": "JAVASCRIPT-6QS",
                                "stats": Object {
                                  "24h": Array [
                                    Array [
                                      1517281200,
                                      2,
                                    ],
                                    Array [
                                      1517310000,
                                      1,
                                    ],
                                  ],
                                  "30d": Array [
                                    Array [
                                      1514764800,
                                      1,
                                    ],
                                    Array [
                                      1515024000,
                                      122,
                                    ],
                                  ],
                                },
                                "status": "unresolved",
                                "statusDetails": Object {},
                                "subscriptionDetails": null,
                                "tags": Array [],
                                "title": "RequestError: GET /issues/ 404",
                                "type": "error",
                                "userCount": 35097,
                                "userReportCount": 0,
                              }
                            }
                            includeLink={true}
                            location={
                              Object {
                                "query": Object {},
                              }
                            }
                            params={
                              Object {
                                "orgId": "org-slug",
                              }
                            }
                            router={
                              Object {
                                "createHref": [MockFunction] {
                                  "calls": Array [
                                    Array [
                                      Object {
                                        "pathname": "/organizations/org-slug/issues/1337/",
                                        "query": Object {
                                          "_allp": 1,
                                          "query": undefined,
                                        },
                                      },
                                    ],
                                  ],
                                  "results": Array [
                                    Object {
                                      "type": "return",
                                      "value": undefined,
                                    },
                                  ],
                                },
                                "go": [MockFunction],
                                "goBack": [MockFunction],
                                "goForward": [MockFunction],
                                "isActive": [MockFunction],
                                "listen": [MockFunction],
                                "location": Object {
                                  "query": Object {},
                                },
                                "params": Object {
                                  "orgId": "org-slug",
                                },
                                "push": [MockFunction],
                                "replace": [MockFunction],
                                "setRouteLeaveHook": [MockFunction],
                              }
                            }
                            size="normal"
                            style={
                              Object {
                                "fontWeight": 600,
                              }
                            }
                          >
                            <span
                              style={
                                Object {
                                  "fontWeight": 600,
                                }
                              }
                            >
                              <GuideAnchor
                                disabled={true}
                                position="bottom"
                                target="issue_title"
                              >
                                <span>
                                  RequestError
                                </span>
                              </GuideAnchor>
                              <Spacer>
                                <span
                                  style={
                                    Object {
                                      "display": "inline-block",
                                      "width": 10,
                                    }
                                  }
                                >
                                   
                                </span>
                              </Spacer>
                              <em
                                title="fetchData(app/components/group/suggestedOwners/suggestedOwners)"
                              >
                                fetchData(app/components/group/suggestedOwners/suggestedOwners)
                              </em>
                              <br />
                            </span>
                          </EventOrGroupTitle>
                        </a>
                      </Link>
                    </GlobalSelectionLink>
                  </div>
                </Title>
              </div>
            </EventOrGroupHeader>
          </withRouter(EventOrGroupHeader)>
          <withRouter(EventOrGroupExtraDetails)
            activity={Array []}
            annotations={Array []}
            assignedTo={null}
            count="327482"
            culprit="fetchData(app/components/group/suggestedOwners/suggestedOwners)"
            firstRelease={null}
            firstSeen="2019-04-05T19:44:05.963Z"
            hasSeen={false}
            id="1337"
            isBookmarked={false}
            isPublic={false}
            isSubscribed={false}
            lastRelease={null}
            lastSeen="2019-04-11T01:08:59Z"
            level="warning"
            logger={null}
            metadata={
              Object {
                "function": "fetchData",
                "type": "RequestError",
              }
            }
            numComments={0}
            participants={Array []}
            permalink="https://foo.io/organizations/foo/issues/1234/"
            platform="javascript"
            pluginActions={Array []}
            pluginContexts={Array []}
            pluginIssues={Array []}
            project={
              Object {
                "id": "13",
                "slug": "test",
              }
            }
            seenBy={Array []}
            shareId={null}
            shortId="JAVASCRIPT-6QS"
            stats={
              Object {
                "24h": Array [
                  Array [
                    1517281200,
                    2,
                  ],
                  Array [
                    1517310000,
                    1,
                  ],
                ],
                "30d": Array [
                  Array [
                    1514764800,
                    1,
                  ],
                  Array [
                    1515024000,
                    122,
                  ],
                ],
              }
            }
            status="unresolved"
            statusDetails={Object {}}
            subscriptionDetails={null}
            tags={Array []}
            title="RequestError: GET /issues/ 404"
            type="error"
            userCount={35097}
            userReportCount={0}
          >
            <EventOrGroupExtraDetails
              activity={Array []}
              annotations={Array []}
              assignedTo={null}
              count="327482"
              culprit="fetchData(app/components/group/suggestedOwners/suggestedOwners)"
              firstRelease={null}
              firstSeen="2019-04-05T19:44:05.963Z"
              hasSeen={false}
              id="1337"
              isBookmarked={false}
              isPublic={false}
              isSubscribed={false}
              lastRelease={null}
              lastSeen="2019-04-11T01:08:59Z"
              level="warning"
              location={
                Object {
                  "query": Object {},
                }
              }
              logger={null}
              metadata={
                Object {
                  "function": "fetchData",
                  "type": "RequestError",
                }
              }
              numComments={0}
              params={
                Object {
                  "orgId": "org-slug",
                }
              }
              participants={Array []}
              permalink="https://foo.io/organizations/foo/issues/1234/"
              platform="javascript"
              pluginActions={Array []}
              pluginContexts={Array []}
              pluginIssues={Array []}
              project={
                Object {
                  "id": "13",
                  "slug": "test",
                }
              }
              router={
                Object {
                  "createHref": [MockFunction] {
                    "calls": Array [
                      Array [
                        Object {
                          "pathname": "/organizations/org-slug/issues/1337/",
                          "query": Object {
                            "_allp": 1,
                            "query": undefined,
                          },
                        },
                      ],
                    ],
                    "results": Array [
                      Object {
                        "type": "return",
                        "value": undefined,
                      },
                    ],
                  },
                  "go": [MockFunction],
                  "goBack": [MockFunction],
                  "goForward": [MockFunction],
                  "isActive": [MockFunction],
                  "listen": [MockFunction],
                  "location": Object {
                    "query": Object {},
                  },
                  "params": Object {
                    "orgId": "org-slug",
                  },
                  "push": [MockFunction],
                  "replace": [MockFunction],
                  "setRouteLeaveHook": [MockFunction],
                }
              }
              seenBy={Array []}
              shareId={null}
              shortId="JAVASCRIPT-6QS"
              stats={
                Object {
                  "24h": Array [
                    Array [
                      1517281200,
                      2,
                    ],
                    Array [
                      1517310000,
                      1,
                    ],
                  ],
                  "30d": Array [
                    Array [
                      1514764800,
                      1,
                    ],
                    Array [
                      1515024000,
                      122,
                    ],
                  ],
                }
              }
              status="unresolved"
              statusDetails={Object {}}
              subscriptionDetails={null}
              tags={Array []}
              title="RequestError: GET /issues/ 404"
              type="error"
              userCount={35097}
              userReportCount={0}
            >
              <GroupExtra>
                <div
                  className="css-q0ziu0-GroupExtra eec9orn0"
                >
                  <GroupShortId
                    avatar={
                      <ProjectBadge
                        avatarSize={14}
                        hideName={true}
                        project={
                          Object {
                            "id": "13",
                            "slug": "test",
                          }
                        }
                      />
                    }
                    shortId="JAVASCRIPT-6QS"
                  >
                    <ShortId
                      avatar={
                        <ProjectBadge
                          avatarSize={14}
                          hideName={true}
                          project={
                            Object {
                              "id": "13",
                              "slug": "test",
                            }
                          }
                        />
                      }
                      className="css-1fj2cf7-GroupShortId eec9orn3"
                      shortId="JAVASCRIPT-6QS"
                    >
                      <StyledShortId
                        avatar={
                          <ProjectBadge
                            avatarSize={14}
                            hideName={true}
                            project={
                              Object {
                                "id": "13",
                                "slug": "test",
                              }
                            }
                          />
                        }
                        className="css-1fj2cf7-GroupShortId eec9orn3"
                        onClick={[Function]}
                        shortId="JAVASCRIPT-6QS"
                      >
                        <div
                          className="eec9orn3 css-dcccbj-StyledShortId-GroupShortId e10rcxf30"
                          onClick={[Function]}
                        >
                          <ProjectBadge
                            avatarSize={14}
                            hideName={true}
                            project={
                              Object {
                                "id": "13",
                                "slug": "test",
                              }
                            }
                          >
                            <BaseBadge
                              avatarProps={Object {}}
                              avatarSize={14}
                              displayName={
                                <ForwardRef(render)
                                  hideOverflow={true}
                                >
                                  test
                                </ForwardRef(render)>
                              }
                              hideAvatar={false}
                              hideName={true}
                              project={
                                Object {
                                  "id": "13",
                                  "slug": "test",
                                }
                              }
                            >
                              <BaseBadgeWrapper>
                                <div
                                  className="css-7m3eov-BaseBadgeWrapper e165dl3i0"
                                >
                                  <EmotionCssPropInternal
                                    __EMOTION_TYPE_PLEASE_DO_NOT_USE__={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "__emotion_base": Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "render": [Function],
                                        },
                                        "__emotion_forwardProp": undefined,
                                        "__emotion_real": [Circular],
                                        "__emotion_styles": Array [
                                          "label:StyledAvatar;",
                                          "margin-right:",
                                          [Function],
                                          ";flex-shrink:0;",
                                        ],
                                        "defaultProps": undefined,
                                        "displayName": "StyledAvatar",
                                        "render": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    hideName={true}
                                    project={
                                      Object {
                                        "id": "13",
                                        "slug": "test",
                                      }
                                    }
                                    size={14}
                                  >
                                    <StyledAvatar
                                      className="css-0"
                                      hideName={true}
                                      project={
                                        Object {
                                          "id": "13",
                                          "slug": "test",
                                        }
                                      }
                                      size={14}
                                    >
                                      <ForwardRef
                                        className="css-7c3lwm-StyledAvatar e165dl3i1"
                                        hideName={true}
                                        project={
                                          Object {
                                            "id": "13",
                                            "slug": "test",
                                          }
                                        }
                                        size={14}
                                      >
                                        <Avatar
                                          className="css-7c3lwm-StyledAvatar e165dl3i1"
                                          forwardedRef={null}
                                          hasTooltip={false}
                                          hideName={true}
                                          project={
                                            Object {
                                              "id": "13",
                                              "slug": "test",
                                            }
                                          }
                                          size={14}
                                        >
                                          <ProjectAvatar
                                            className="css-7c3lwm-StyledAvatar e165dl3i1"
                                            forwardedRef={null}
                                            hasTooltip={false}
                                            hideName={true}
                                            project={
                                              Object {
                                                "id": "13",
                                                "slug": "test",
                                              }
                                            }
                                            size={14}
                                          >
                                            <Tooltip
                                              containerDisplayMode="inline-block"
                                              disabled={true}
                                              position="top"
                                            >
                                              <PlatformList
                                                className="css-7c3lwm-StyledAvatar e165dl3i1"
                                                forwardedRef={null}
                                                hideName={true}
                                                max={1}
                                                platforms={Array []}
                                                size={14}
                                              >
                                                <PlatformIcons
                                                  className="css-7c3lwm-StyledAvatar e165dl3i1"
                                                  consistentWidth={false}
                                                  direction="right"
                                                  max={1}
                                                  size={14}
                                                >
                                                  <div
                                                    className="e165dl3i1 css-dyodzz-PlatformIcons-StyledAvatar e1n7dwy90"
                                                    direction="right"
                                                    max={1}
                                                    size={14}
                                                  >
                                                    <StyledPlatformIcon
                                                      platform="default"
                                                      size={14}
                                                    >
                                                      <Component
                                                        className="css-f6mbrk-StyledPlatformIcon e1n7dwy91"
                                                        platform="default"
                                                        size={14}
                                                      >
                                                        <PlatformIcon
                                                          className="css-f6mbrk-StyledPlatformIcon e1n7dwy91"
                                                          platform="default"
                                                          size="14px"
                                                        >
                                                          <img
                                                            className="css-f6mbrk-StyledPlatformIcon e1n7dwy91"
                                                            height="14px"
                                                            src={
                                                              Object {
                                                                "default": Object {
                                                                  "id": "test",
                                                                  "viewBox": Object {},
                                                                },
                                                              }
                                                            }
                                                            width="14px"
                                                          />
                                                        </PlatformIcon>
                                                      </Component>
                                                    </StyledPlatformIcon>
                                                  </div>
                                                </PlatformIcons>
                                              </PlatformList>
                                            </Tooltip>
                                          </ProjectAvatar>
                                        </Avatar>
                                      </ForwardRef>
                                    </StyledAvatar>
                                  </EmotionCssPropInternal>
                                  <DisplayNameAndDescription>
                                    <div
                                      className="css-1d2tk0c-DisplayNameAndDescription e165dl3i2"
                                    />
                                  </DisplayNameAndDescription>
                                </div>
                              </BaseBadgeWrapper>
                            </BaseBadge>
                          </ProjectBadge>
                          <StyledAutoSelectText
                            avatar={true}
                          >
                            <AutoSelectText
                              className="css-xnqjkz-StyledAutoSelectText e10rcxf31"
                            >
                              <div
                                className="auto-select-text css-xnqjkz-StyledAutoSelectText e10rcxf31"
                                onClick={[Function]}
                              >
                                <span>
                                  JAVASCRIPT-6QS
                                </span>
                              </div>
                            </AutoSelectText>
                          </StyledAutoSelectText>
                        </div>
                      </StyledShortId>
                    </ShortId>
                  </GroupShortId>
                  <StyledTimes
                    firstSeen="2019-04-05T19:44:05.963Z"
                    lastSeen="2019-04-11T01:08:59Z"
                  >
                    <Times
                      className="css-2hucfb-StyledTimes eec9orn1"
                      firstSeen="2019-04-05T19:44:05.963Z"
                      lastSeen="2019-04-11T01:08:59Z"
                    >
                      <Container>
                        <div
                          className="css-1lz86t0-Container e1fmxtba0"
                        >
                          <FlexWrapper>
                            <div
                              className="css-13zgepw-FlexWrapper e1fmxtba1"
                            >
                              <StyledIconClock
                                size="11px"
                              >
                                <IconClock
                                  className="css-1ounr7j-StyledIconClock e1fmxtba2"
                                  size="11px"
                                >
                                  <ForwardRef(SvgIcon)
                                    className="css-1ounr7j-StyledIconClock e1fmxtba2"
                                    size="11px"
                                  >
                                    <svg
                                      className="css-1ounr7j-StyledIconClock e1fmxtba2"
                                      fill="currentColor"
                                      height="11px"
                                      viewBox="0 0 16 16"
                                      width="11px"
                                    >
                                      <path
                                        d="M8,16a8,8,0,1,1,8-8A8,8,0,0,1,8,16ZM8,1.52A6.48,6.48,0,1,0,14.48,8,6.49,6.49,0,0,0,8,1.52Z"
                                      />
                                      <path
                                        d="M11.62,8.75H8A.76.76,0,0,1,7.25,8V2.88a.75.75,0,1,1,1.5,0V7.25h2.87a.75.75,0,0,1,0,1.5Z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </IconClock>
                              </StyledIconClock>
                              <TimeSince
                                date="2019-04-11T01:08:59Z"
                                suffix="ago"
                              >
                                <time
                                  dateTime="2019-04-11T01:08:59.000Z"
                                  title="April 11, 2019 1:08 AM UTC"
                                >
                                  in a year
                                </time>
                              </TimeSince>
                              <span
                                className="hidden-xs hidden-sm"
                              >
                                 — 
                              </span>
                              <TimeSince
                                className="hidden-xs hidden-sm"
                                date="2019-04-05T19:44:05.963Z"
                                suffix="old"
                              >
                                <time
                                  className="hidden-xs hidden-sm"
                                  dateTime="2019-04-05T19:44:05.963Z"
                                  title="April 5, 2019 7:44 PM UTC"
                                >
                                  a year old
                                </time>
                              </TimeSince>
                            </div>
                          </FlexWrapper>
                        </div>
                      </Container>
                    </Times>
                  </StyledTimes>
                </div>
              </GroupExtra>
            </EventOrGroupExtraDetails>
          </withRouter(EventOrGroupExtraDetails)>
        </div>
      </GroupSummary>
      <GuideAnchor
        target="issue_stream"
      />
      <Styled(div)
        className="hidden-xs hidden-sm"
        mx={2}
        width={160}
      >
        <div
          className="hidden-xs hidden-sm css-178oq92"
        >
          <GroupChart
            data={
              Object {
                "activity": Array [],
                "annotations": Array [],
                "assignedTo": null,
                "count": "327482",
                "culprit": "fetchData(app/components/group/suggestedOwners/suggestedOwners)",
                "firstRelease": null,
                "firstSeen": "2019-04-05T19:44:05.963Z",
                "hasSeen": false,
                "id": "1337",
                "isBookmarked": false,
                "isPublic": false,
                "isSubscribed": false,
                "lastRelease": null,
                "lastSeen": "2019-04-11T01:08:59Z",
                "level": "warning",
                "logger": null,
                "metadata": Object {
                  "function": "fetchData",
                  "type": "RequestError",
                },
                "numComments": 0,
                "participants": Array [],
                "permalink": "https://foo.io/organizations/foo/issues/1234/",
                "platform": "javascript",
                "pluginActions": Array [],
                "pluginContexts": Array [],
                "pluginIssues": Array [],
                "project": Object {
                  "id": "13",
                  "slug": "test",
                },
                "seenBy": Array [],
                "shareId": null,
                "shortId": "JAVASCRIPT-6QS",
                "stats": Object {
                  "24h": Array [
                    Array [
                      1517281200,
                      2,
                    ],
                    Array [
                      1517310000,
                      1,
                    ],
                  ],
                  "30d": Array [
                    Array [
                      1514764800,
                      1,
                    ],
                    Array [
                      1515024000,
                      122,
                    ],
                  ],
                },
                "status": "unresolved",
                "statusDetails": Object {},
                "subscriptionDetails": null,
                "tags": Array [],
                "title": "RequestError: GET /issues/ 404",
                "type": "error",
                "userCount": 35097,
                "userReportCount": 0,
              }
            }
            height={24}
            id="1337"
            statsPeriod="24h"
          >
            <LazyLoadMock
              debounce={50}
              height={24}
            >
              <BarChart
                gap={1}
                height={24}
                label="events"
                minHeights={
                  Array [
                    3,
                  ]
                }
                points={
                  Array [
                    Object {
                      "x": 1517281200,
                      "y": 2,
                    },
                    Object {
                      "x": 1517310000,
                      "y": 1,
                    },
                  ]
                }
              >
                <StackedBarChart
                  barClasses={
                    Array [
                      "chart-bar",
                    ]
                  }
                  className="sparkline"
                  gap={1}
                  height={24}
                  label="events"
                  markers={Array []}
                  minHeights={
                    Array [
                      3,
                    ]
                  }
                  points={
                    Array [
                      Object {
                        "x": 1517281200,
                        "y": Array [
                          2,
                        ],
                      },
                      Object {
                        "x": 1517310000,
                        "y": Array [
                          1,
                        ],
                      },
                    ]
                  }
                  series={Array []}
                >
                  <StyledFigure
                    className="sparkline barchart"
                    style={
                      Object {
                        "height": 24,
                        "width": undefined,
                      }
                    }
                  >
                    <figure
                      className="sparkline barchart css-1b2kvnn-StyledFigure e1r7vyxv1"
                      style={
                        Object {
                          "height": 24,
                          "width": undefined,
                        }
                      }
                    >
                      <span
                        className="max-y"
                      >
                        <Count
                          value={10}
                        >
                          <span>
                            10
                          </span>
                        </Count>
                      </span>
                      <span
                        className="min-y"
                      >
                        0
                      </span>
                      <SvgContainer>
                        <div
                          className="css-6tdbe5-SvgContainer e1r7vyxv2"
                        >
                          <StyledSvg
                            overflow="visible"
                            preserveAspectRatio="none"
                            viewBox="0 0 100 400"
                          >
                            <svg
                              className="css-1w5ytn5-StyledSvg e1r7vyxv0"
                              overflow="visible"
                              preserveAspectRatio="none"
                              viewBox="0 0 100 400"
                            >
                              <Tooltip
                                containerDisplayMode="inline-block"
                                key="1517281200"
                                position="bottom"
                                title={
                                  <React.Fragment>
                                    <div
                                      style={
                                        Object {
                                          "width": "130px",
                                        }
                                      }
                                    >
                                      <div
                                        className="time-label"
                                      >
                                        <span>
                                          Jan 30th, 3:00 AM
                                          &#8594
                                          Jan 30th, 10:59 AM
                                        </span>
                                      </div>
                                    </div>
                                    <div
                                      className="value-label"
                                    >
                                      2
                                       
                                      events
                                    </div>
                                  </React.Fragment>
                                }
                              >
                                <Manager>
                                  <Reference>
                                    <InnerReference
                                      setReferenceNode={[Function]}
                                    >
                                      <g
                                        aria-describedby="tooltip-123456"
                                        onBlur={[Function]}
                                        onFocus={[Function]}
                                        onMouseEnter={[Function]}
                                        onMouseLeave={[Function]}
                                      >
                                        <rect
                                          height="100%"
                                          opacity="0"
                                          width="51.55%"
                                          x="-1%"
                                        />
                                        <rect
                                          className="chart-bar barchart-rect"
                                          data-test-id="chart-column"
                                          height="19.8%"
                                          key="0"
                                          width="49.55%"
                                          x="0%"
                                          y="80.2%"
                                        >
                                          2
                                        </rect>
                                      </g>
                                    </InnerReference>
                                  </Reference>
                                </Manager>
                              </Tooltip>
                              <Tooltip
                                containerDisplayMode="inline-block"
                                key="1517310000"
                                position="bottom"
                                title={
                                  <React.Fragment>
                                    <div
                                      style={
                                        Object {
                                          "width": "130px",
                                        }
                                      }
                                    >
                                      <div
                                        className="time-label"
                                      >
                                        <span>
                                          Jan 30th, 11:00 AM
                                          &#8594
                                          Jan 30th, 6:59 PM
                                        </span>
                                      </div>
                                    </div>
                                    <div
                                      className="value-label"
                                    >
                                      1
                                       
                                      events
                                    </div>
                                  </React.Fragment>
                                }
                              >
                                <Manager>
                                  <Reference>
                                    <InnerReference
                                      setReferenceNode={[Function]}
                                    >
                                      <g
                                        aria-describedby="tooltip-123456"
                                        onBlur={[Function]}
                                        onFocus={[Function]}
                                        onMouseEnter={[Function]}
                                        onMouseLeave={[Function]}
                                      >
                                        <rect
                                          height="100%"
                                          opacity="0"
                                          width="51.55%"
                                          x="49.55%"
                                        />
                                        <rect
                                          className="chart-bar barchart-rect"
                                          data-test-id="chart-column"
                                          height="9.9%"
                                          key="0"
                                          width="49.55%"
                                          x="50.55%"
                                          y="90.1%"
                                        >
                                          1
                                        </rect>
                                      </g>
                                    </InnerReference>
                                  </Reference>
                                </Manager>
                              </Tooltip>
                            </svg>
                          </StyledSvg>
                        </div>
                      </SvgContainer>
                    </figure>
                  </StyledFigure>
                </StackedBarChart>
              </BarChart>
            </LazyLoadMock>
          </GroupChart>
        </div>
      </Styled(div)>
      <Styled(div)
        justifyContent="flex-end"
        mx={2}
        width={
          Array [
            40,
            60,
            80,
            80,
          ]
        }
      >
        <div
          className="css-tij574"
        >
          <StyledCount
            value="327482"
          >
            <Count
              className="css-olool2-StyledCount e1x6ya7d3"
              value="327482"
            >
              <span
                className="css-olool2-StyledCount e1x6ya7d3"
              >
                327k
              </span>
            </Count>
          </StyledCount>
        </div>
      </Styled(div)>
      <Styled(div)
        justifyContent="flex-end"
        mx={2}
        width={
          Array [
            40,
            60,
            80,
            80,
          ]
        }
      >
        <div
          className="css-tij574"
        >
          <StyledCount
            value={35097}
          >
            <Count
              className="css-olool2-StyledCount e1x6ya7d3"
              value={35097}
            >
              <span
                className="css-olool2-StyledCount e1x6ya7d3"
              >
                35k
              </span>
            </Count>
          </StyledCount>
        </div>
      </Styled(div)>
      <Styled(div)
        className="hidden-xs hidden-sm"
        mx={2}
        width={80}
      >
        <div
          className="hidden-xs hidden-sm css-1k717jb"
        >
          <AssigneeSelector
            id="1337"
            size={20}
          >
            <AssigneeSelector
              className="css-1npvxbg-AssigneeSelector e78f2yb0"
              id="1337"
              size={20}
            >
              <div
                className="css-1npvxbg-AssigneeSelector e78f2yb0"
              >
                <DropdownAutoComplete
                  alignMenu="right"
                  busy={true}
                  emptyHidesInput={true}
                  itemSize="small"
                  items={null}
                  maxHeight={400}
                  menuFooter={
                    <ForwardRef(render)
                      data-test-id="invite-member"
                      disabled={false}
                      onClick={[Function]}
                      to=""
                    >
                      <ForwardRef(render)>
                        <ForwardRef(render)>
                          <ForwardRef(render)
                            isCircled={true}
                            size="14px"
                          />
                        </ForwardRef(render)>
                        <ForwardRef(render)>
                          Invite Member
                        </ForwardRef(render)>
                      </ForwardRef(render)>
                    </ForwardRef(render)>
                  }
                  menuHeader={null}
                  menuWithArrow={true}
                  onOpen={[Function]}
                  onSelect={[Function]}
                  searchPlaceholder="Filter teams and people"
                  zIndex={2}
                >
                  <DropdownAutoCompleteMenu
                    alignMenu="right"
                    blendCorner={true}
                    busy={true}
                    emptyHidesInput={true}
                    emptyMessage="No items"
                    itemSize="small"
                    items={null}
                    maxHeight={400}
                    menuFooter={
                      <ForwardRef(render)
                        data-test-id="invite-member"
                        disabled={false}
                        onClick={[Function]}
                        to=""
                      >
                        <ForwardRef(render)>
                          <ForwardRef(render)>
                            <ForwardRef(render)
                              isCircled={true}
                              size="14px"
                            />
                          </ForwardRef(render)>
                          <ForwardRef(render)>
                            Invite Member
                          </ForwardRef(render)>
                        </ForwardRef(render)>
                      </ForwardRef(render)>
                    }
                    menuHeader={null}
                    menuWithArrow={true}
                    onOpen={[Function]}
                    onSelect={[Function]}
                    searchPlaceholder="Filter teams and people"
                    zIndex={2}
                  >
                    <AutoComplete
                      closeOnSelect={true}
                      disabled={false}
                      inputIsActor={false}
                      itemToString={[Function]}
                      onOpen={[Function]}
                      onSelect={[Function]}
                      resetInputOnClose={true}
                      shouldSelectWithEnter={true}
                      shouldSelectWithTab={false}
                      zIndex={2}
                    >
                      <DropdownMenu
                        closeOnEscape={true}
                        isOpen={false}
                        keepMenuOpen={false}
                        onClickOutside={[Function]}
                      >
                        <AutoCompleteRoot>
                          <Component
                            className="css-j1qymt-AutoCompleteRoot ejumqxq0"
                          >
                            <div
                              className="css-j1qymt-AutoCompleteRoot ejumqxq0"
                            >
                              <Actor
                                isOpen={false}
                                onClick={[Function]}
                                onKeyDown={[Function]}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                role="button"
                                style={
                                  Object {
                                    "outline": "none",
                                  }
                                }
                                tabIndex="0"
                              >
                                <div
                                  className="css-1vv9ctx-Actor e53us8t0"
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  role="button"
                                  style={
                                    Object {
                                      "outline": "none",
                                    }
                                  }
                                  tabIndex="0"
                                >
                                  <DropdownButton
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onMouseEnter={[Function]}
                                    onMouseLeave={[Function]}
                                    style={
                                      Object {
                                        "outline": "none",
                                      }
                                    }
                                  >
                                    <div
                                      className="css-ca7qht-DropdownButton e78f2yb9"
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onMouseEnter={[Function]}
                                      onMouseLeave={[Function]}
                                      style={
                                        Object {
                                          "outline": "none",
                                        }
                                      }
                                    >
                                      <StyledIconUser
                                        color="gray600"
                                        size="20px"
                                      >
                                        <IconUser
                                          className="css-1kf90m6-StyledIconUser e78f2yb1"
                                          color="gray600"
                                          size="20px"
                                        >
                                          <ForwardRef(SvgIcon)
                                            className="css-1kf90m6-StyledIconUser e78f2yb1"
                                            color="gray600"
                                            size="20px"
                                          >
                                            <svg
                                              className="css-1kf90m6-StyledIconUser e78f2yb1"
                                              fill="#645574"
                                              height="20px"
                                              viewBox="0 0 16 16"
                                              width="20px"
                                            >
                                              <path
                                                d="M8,10.63a4,4,0,0,1-3.94-4V4a3.94,3.94,0,1,1,7.88,0V6.68A4,4,0,0,1,8,10.63ZM8,1.52A2.44,2.44,0,0,0,5.56,4V6.68a2.44,2.44,0,1,0,4.88,0V4A2.44,2.44,0,0,0,8,1.52Z"
                                              />
                                              <path
                                                d="M14.19,16H1.81A1.74,1.74,0,0,1,.07,14.24V12.32A3.72,3.72,0,0,1,3.19,8.64l2.46-.41a.76.76,0,0,1,.87.62.75.75,0,0,1-.62.86l-2.47.41a2.22,2.22,0,0,0-1.86,2.2v1.92a.24.24,0,0,0,.24.24H14.19a.24.24,0,0,0,.24-.24V12.32a2.22,2.22,0,0,0-1.86-2.2L10.1,9.71a.75.75,0,0,1-.62-.86.76.76,0,0,1,.87-.62l2.47.41a3.72,3.72,0,0,1,3.11,3.68v1.92A1.74,1.74,0,0,1,14.19,16Z"
                                              />
                                            </svg>
                                          </ForwardRef(SvgIcon)>
                                        </IconUser>
                                      </StyledIconUser>
                                      <StyledChevron
                                        direction="down"
                                        size="xs"
                                      >
                                        <IconChevron
                                          className="css-v3pqxi-StyledChevron e78f2yb8"
                                          direction="down"
                                          size="xs"
                                        >
                                          <EmotionCssPropInternal
                                            __EMOTION_LABEL_PLEASE_DO_NOT_USE__="IconChevron"
                                            __EMOTION_TYPE_PLEASE_DO_NOT_USE__={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "propTypes": Object {
                                                  "color": [Function],
                                                  "size": [Function],
                                                  "viewBox": [Function],
                                                },
                                                "render": [Function],
                                              }
                                            }
                                            className="css-v3pqxi-StyledChevron e78f2yb8"
                                            css={
                                              Object {
                                                "map": undefined,
                                                "name": "7chgxg-IconChevron",
                                                "next": undefined,
                                                "styles": "transform:rotate(180deg);;label:IconChevron;",
                                                "toString": [Function],
                                              }
                                            }
                                            size="xs"
                                          >
                                            <ForwardRef(SvgIcon)
                                              className="e78f2yb8 css-isrqi8-IconChevron-StyledChevron"
                                              size="xs"
                                            >
                                              <svg
                                                className="e78f2yb8 css-isrqi8-IconChevron-StyledChevron"
                                                fill="currentColor"
                                                height="12px"
                                                viewBox="0 0 16 16"
                                                width="12px"
                                              >
                                                <path
                                                  d="M14,11.75a.74.74,0,0,1-.53-.22L8,6.06,2.53,11.53a.75.75,0,0,1-1.06-1.06l6-6a.75.75,0,0,1,1.06,0l6,6a.75.75,0,0,1,0,1.06A.74.74,0,0,1,14,11.75Z"
                                                />
                                              </svg>
                                            </ForwardRef(SvgIcon)>
                                          </EmotionCssPropInternal>
                                        </IconChevron>
                                      </StyledChevron>
                                    </div>
                                  </DropdownButton>
                                </div>
                              </Actor>
                            </div>
                          </Component>
                        </AutoCompleteRoot>
                      </DropdownMenu>
                    </AutoComplete>
                  </DropdownAutoCompleteMenu>
                </DropdownAutoComplete>
              </div>
            </AssigneeSelector>
          </AssigneeSelector>
        </div>
      </Styled(div)>
    </div>
  </Group>
</StreamGroup>
`;
