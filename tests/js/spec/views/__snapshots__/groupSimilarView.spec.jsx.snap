// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Issues Similar View renders initially with loading component 1`] = `
<div>
  <div
    className="alert alert-block alert-warning"
  >
    <strong>
      Warning
      :
    </strong>
     
    This is an experimental feature. Data may not be immediately available while we process merges.
  </div>
  <LoadingIndicator />
</div>
`;

exports[`Issues Similar View renders with mocked data 1`] = `
<GroupGroupingView
  location={Object {}}
  params={
    Object {
      "groupId": "group-id",
      "orgId": "org-slug",
      "projectId": "project-slug",
    }
  }
>
  <div>
    <div
      className="alert alert-block alert-warning"
    >
      <strong>
        Warning
        :
      </strong>
       
      This is an experimental feature. Data may not be immediately available while we process merges.
    </div>
    <SimilarList
      filteredItems={
        Array [
          Object {
            "aggregate": Object {
              "exception": 0.375,
            },
            "isBelowThreshold": true,
            "issue": Object {
              "annotations": Array [],
              "assignedTo": null,
              "count": "2",
              "culprit": "Constructor.onSimilarUpdate(app/views/groupSimilar/groupingMergedList)",
              "firstSeen": "2017-07-25T02:21:52Z",
              "hasSeen": false,
              "id": "274",
              "isBookmarked": false,
              "isPublic": false,
              "isSubscribed": true,
              "lastSeen": "2017-07-25T02:22:19Z",
              "level": "error",
              "logger": "javascript",
              "metadata": Object {
                "type": "ReferenceError",
                "value": "unmergedList is not defined",
              },
              "numComments": 0,
              "permalink": "http://localhost:8000/sentry/internal/issues/274/",
              "project": Object {
                "name": "Internal",
                "slug": "internal",
              },
              "shareId": "312e323734",
              "shortId": "INTERNAL-4K",
              "status": "unresolved",
              "statusDetails": Object {},
              "subscriptionDetails": null,
              "title": "ReferenceError: unmergedList is not defined",
              "type": "error",
              "userCount": 1,
            },
            "score": Object {
              "exception:stacktrace:pairs": 0.375,
            },
            "scoresByInterface": Object {
              "exception": Array [
                Array [
                  "exception:stacktrace:pairs",
                  0.375,
                ],
              ],
            },
          },
          Object {
            "aggregate": Object {
              "exception": 0.01264,
            },
            "isBelowThreshold": true,
            "issue": Object {
              "annotations": Array [],
              "assignedTo": null,
              "count": "1",
              "culprit": "size(app/views/groupSimilar/groupingMergedList)",
              "firstSeen": "2017-07-25T02:20:35Z",
              "hasSeen": true,
              "id": "275",
              "isBookmarked": false,
              "isPublic": false,
              "isSubscribed": true,
              "lastSeen": "2017-07-25T02:20:35Z",
              "level": "error",
              "logger": "javascript",
              "metadata": Object {
                "type": "TypeError",
                "value": "Cannot read property 'size' of undefined",
              },
              "numComments": 0,
              "permalink": "http://localhost:8000/sentry/internal/issues/275/",
              "project": Object {
                "name": "Internal",
                "slug": "internal",
              },
              "shareId": "312e323735",
              "shortId": "INTERNAL-4M",
              "status": "unresolved",
              "statusDetails": Object {},
              "subscriptionDetails": null,
              "title": "TypeError: Cannot read property 'size' of undefined",
              "type": "error",
              "userCount": 1,
            },
            "score": Object {
              "exception:stacktrace:pairs": 0.01264,
            },
            "scoresByInterface": Object {
              "exception": Array [
                Array [
                  "exception:stacktrace:pairs",
                  0.01264,
                ],
              ],
            },
          },
          Object {
            "aggregate": Object {
              "exception": 0.0008615,
            },
            "isBelowThreshold": true,
            "issue": Object {
              "annotations": Array [],
              "assignedTo": Object {
                "avatar": Object {
                  "avatarType": "letter_avatar",
                  "avatarUuid": null,
                },
                "avatarUrl": "https://secure.gravatar.com/avatar/7b544e8eb9d08ed777be5aa82121155a?s=32&d=mm",
                "dateJoined": "2017-06-26T21:02:13.264Z",
                "email": "billy@sentry.io",
                "emails": Array [
                  Object {
                    "email": "billy@sentry.io",
                    "id": "1",
                    "is_verified": false,
                  },
                ],
                "has2fa": false,
                "id": "1",
                "identities": Array [],
                "isActive": true,
                "isManaged": false,
                "lastActive": "2017-07-26T18:28:19.391Z",
                "lastLogin": "2017-07-25T01:00:50.473Z",
                "name": "billy@sentry.io",
                "username": "billy@sentry.io",
              },
              "count": "15",
              "culprit": "stale(app/views/groupDetails)",
              "firstSeen": "2017-07-25T02:20:35Z",
              "hasSeen": true,
              "id": "216",
              "isBookmarked": false,
              "isPublic": false,
              "isSubscribed": true,
              "lastSeen": "2017-07-25T23:21:19Z",
              "level": "error",
              "logger": "javascript",
              "metadata": Object {
                "type": "TypeError",
                "value": "Cannot read property 'stale' of undefined",
              },
              "numComments": 0,
              "permalink": "http://localhost:8000/sentry/internal/issues/216/",
              "project": Object {
                "name": "Internal",
                "slug": "internal",
              },
              "shareId": "312e323136",
              "shortId": "INTERNAL-2S",
              "status": "unresolved",
              "statusDetails": Object {},
              "subscriptionDetails": Object {
                "reason": "changed_status",
              },
              "title": "TypeError: Cannot read property 'stale' of undefined",
              "type": "error",
              "userCount": 1,
            },
            "score": Object {
              "exception:stacktrace:application-chunks": 0.000235,
              "exception:stacktrace:pairs": 0.001488,
            },
            "scoresByInterface": Object {
              "exception": Array [
                Array [
                  "exception:stacktrace:application-chunks",
                  0.000235,
                ],
                Array [
                  "exception:stacktrace:pairs",
                  0.001488,
                ],
              ],
            },
          },
        ]
      }
      groupId="group-id"
      items={
        Array [
          Object {
            "aggregate": Object {
              "exception": 0.875,
            },
            "isBelowThreshold": false,
            "issue": Object {
              "annotations": Array [],
              "assignedTo": null,
              "count": "90",
              "culprit": "length(app/views/groupSimilar/groupSimilarView)",
              "firstSeen": "2017-07-10T18:32:43Z",
              "hasSeen": false,
              "id": "271",
              "isBookmarked": false,
              "isPublic": false,
              "isSubscribed": true,
              "lastSeen": "2017-07-24T23:41:44Z",
              "level": "error",
              "logger": "javascript",
              "metadata": Object {
                "type": "TypeError",
                "value": "Cannot read property 'length' of undefined",
              },
              "numComments": 0,
              "permalink": "http://localhost:8000/sentry/internal/issues/271/",
              "project": Object {
                "name": "Internal",
                "slug": "internal",
              },
              "shareId": "312e323731",
              "shortId": "INTERNAL-4G",
              "status": "resolved",
              "statusDetails": Object {},
              "subscriptionDetails": null,
              "title": "TypeError: Cannot read property 'length' of undefined",
              "type": "error",
              "userCount": 3,
            },
            "score": Object {
              "exception:stacktrace:pairs": 0.875,
            },
            "scoresByInterface": Object {
              "exception": Array [
                Array [
                  "exception:stacktrace:pairs",
                  0.875,
                ],
              ],
            },
          },
        ]
      }
      onMerge={[Function]}
      orgId="org-slug"
      projectId="project-slug"
    >
      <div
        className="similar-list-container"
      >
        <SpreadLayout
          center={true}
          className="similar-list-header"
          responsive={false}
        >
          <div
            className="spread-layout similar-list-header center"
          >
            <h2>
              <span>
                Similar Issues
              </span>
              <QueryCount
                count={4}
                hideIfEmpty={true}
                inline={true}
              >
                <div
                  className="query-count inline"
                >
                  <span>
                    (
                  </span>
                  <span
                    className="query-count-value"
                  >
                    4
                  </span>
                  <span>
                    )
                  </span>
                </div>
              </QueryCount>
            </h2>
            <StyledSimilarSpectrum>
              <SimilarSpectrum
                className="css-j2x47e-StyledSimilarSpectrum e1hn3xkk0"
              >
                <div
                  className="css-j2x47e-StyledSimilarSpectrum e1hn3xkk0"
                >
                  <span>
                    Similar
                  </span>
                  <SpectrumItem
                    colorIndex={4}
                  >
                    <span
                      className="css-1m9e7bp-SpectrumItem e1hn3xkk1"
                    />
                  </SpectrumItem>
                  <SpectrumItem
                    colorIndex={3}
                  >
                    <span
                      className="css-1tn9u0a-SpectrumItem e1hn3xkk1"
                    />
                  </SpectrumItem>
                  <SpectrumItem
                    colorIndex={2}
                  >
                    <span
                      className="css-zgizhk-SpectrumItem e1hn3xkk1"
                    />
                  </SpectrumItem>
                  <SpectrumItem
                    colorIndex={1}
                  >
                    <span
                      className="css-1p9s53a-SpectrumItem e1hn3xkk1"
                    />
                  </SpectrumItem>
                  <SpectrumItem
                    colorIndex={0}
                  >
                    <span
                      className="css-pvajr0-SpectrumItem e1hn3xkk1"
                    />
                  </SpectrumItem>
                  <span>
                    Not Similar
                  </span>
                </div>
              </SimilarSpectrum>
            </StyledSimilarSpectrum>
          </div>
        </SpreadLayout>
        <SimilarToolbar
          onMerge={[Function]}
        >
          <Toolbar
            className="similar-toolbar"
          >
            <div
              className="toolbar similar-toolbar"
            >
              <SpreadLayout
                center={true}
                responsive={true}
              >
                <div
                  className="spread-layout center allow-responsive"
                >
                  <FlowLayout
                    style={
                      Object {
                        "flex": 1,
                      }
                    }
                    truncate={true}
                  >
                    <div
                      className="flow-layout is-truncated"
                      style={
                        Object {
                          "flex": 1,
                        }
                      }
                    >
                      <FlowLayout
                        truncate={true}
                      >
                        <div
                          className="flow-layout is-truncated"
                        >
                          <div
                            className="similar-toolbar-actions"
                          >
                            <LinkWithConfirmation
                              className="btn btn-sm btn-default"
                              data-test-id="merge"
                              disabled={true}
                              message="Are you sure you want to merge these issues?"
                              onConfirm={[Function]}
                              title="Merging 0 issues"
                            >
                              <Confirm
                                cancelText="Cancel"
                                confirmText="Confirm"
                                data-test-id="merge"
                                disableConfirmButton={false}
                                disabled={true}
                                message="Are you sure you want to merge these issues?"
                                onConfirm={[Function]}
                                priority="primary"
                              >
                                <a
                                  className="btn btn-sm btn-default disabled"
                                  disabled={true}
                                  onClick={[Function]}
                                  title="Merging 0 issues"
                                >
                                  Merge
                                   (
                                  0
                                  )
                                </a>
                                <Modal
                                  animation={false}
                                  autoFocus={true}
                                  backdrop={true}
                                  bsClass="modal"
                                  dialogComponentClass={[Function]}
                                  enforceFocus={true}
                                  keyboard={true}
                                  manager={
                                    ModalManager {
                                      "add": [Function],
                                      "containers": Array [],
                                      "data": Array [],
                                      "handleContainerOverflow": true,
                                      "hideSiblingNodes": true,
                                      "isTopModal": [Function],
                                      "modals": Array [],
                                      "remove": [Function],
                                    }
                                  }
                                  onHide={[Function]}
                                  renderBackdrop={[Function]}
                                  restoreFocus={true}
                                  show={false}
                                >
                                  <Modal
                                    autoFocus={true}
                                    backdrop={true}
                                    backdropClassName="modal-backdrop"
                                    containerClassName="modal-open"
                                    enforceFocus={true}
                                    keyboard={true}
                                    manager={
                                      ModalManager {
                                        "add": [Function],
                                        "containers": Array [],
                                        "data": Array [],
                                        "handleContainerOverflow": true,
                                        "hideSiblingNodes": true,
                                        "isTopModal": [Function],
                                        "modals": Array [],
                                        "remove": [Function],
                                      }
                                    }
                                    onEntering={[Function]}
                                    onExited={[Function]}
                                    onHide={[Function]}
                                    renderBackdrop={[Function]}
                                    restoreFocus={true}
                                    show={false}
                                  />
                                </Modal>
                              </Confirm>
                            </LinkWithConfirmation>
                          </div>
                        </div>
                      </FlowLayout>
                    </div>
                  </FlowLayout>
                  <div
                    className="similar-score-columns"
                  >
                    <ToolbarHeader
                      className="similar-score-column event-count-header"
                    >
                      <div
                        className="toolbar-header similar-score-column event-count-header"
                      >
                        Events
                      </div>
                    </ToolbarHeader>
                    <ToolbarHeader
                      className="similar-score-column event-similar-header"
                    >
                      <div
                        className="toolbar-header similar-score-column event-similar-header"
                      >
                        Exception
                      </div>
                    </ToolbarHeader>
                    <ToolbarHeader
                      className="similar-score-column event-similar-header"
                    >
                      <div
                        className="toolbar-header similar-score-column event-similar-header"
                      >
                        Message
                      </div>
                    </ToolbarHeader>
                  </div>
                </div>
              </SpreadLayout>
            </div>
          </Toolbar>
        </SimilarToolbar>
        <div
          className="similar-list"
        >
          <SimilarIssueItem
            aggregate={
              Object {
                "exception": 0.875,
              }
            }
            groupId="group-id"
            isBelowThreshold={false}
            issue={
              Object {
                "annotations": Array [],
                "assignedTo": null,
                "count": "90",
                "culprit": "length(app/views/groupSimilar/groupSimilarView)",
                "firstSeen": "2017-07-10T18:32:43Z",
                "hasSeen": false,
                "id": "271",
                "isBookmarked": false,
                "isPublic": false,
                "isSubscribed": true,
                "lastSeen": "2017-07-24T23:41:44Z",
                "level": "error",
                "logger": "javascript",
                "metadata": Object {
                  "type": "TypeError",
                  "value": "Cannot read property 'length' of undefined",
                },
                "numComments": 0,
                "permalink": "http://localhost:8000/sentry/internal/issues/271/",
                "project": Object {
                  "name": "Internal",
                  "slug": "internal",
                },
                "shareId": "312e323731",
                "shortId": "INTERNAL-4G",
                "status": "resolved",
                "statusDetails": Object {},
                "subscriptionDetails": null,
                "title": "TypeError: Cannot read property 'length' of undefined",
                "type": "error",
                "userCount": 3,
              }
            }
            key="271"
            orgId="org-slug"
            projectId="project-slug"
            score={
              Object {
                "exception:stacktrace:pairs": 0.875,
              }
            }
            scoresByInterface={
              Object {
                "exception": Array [
                  Array [
                    "exception:stacktrace:pairs",
                    0.875,
                  ],
                ],
              }
            }
          >
            <SpreadLayout
              center={true}
              className="group similar-issue isResolved"
              data-test-id="similar-item-row"
              onClick={[Function]}
              responsive={true}
            >
              <div
                className="spread-layout group similar-issue isResolved center allow-responsive"
                data-test-id="similar-item-row"
                onClick={[Function]}
              >
                <FlowLayout
                  truncate={true}
                >
                  <div
                    className="flow-layout is-truncated"
                  >
                    <FlowLayout
                      truncate={true}
                    >
                      <div
                        className="flow-layout is-truncated"
                      >
                        <div
                          className="action-column"
                        >
                          <Checkbox
                            checked={false}
                            id="271"
                            onChange={[Function]}
                            value="271"
                          >
                            <input
                              checked={false}
                              className="chk-select"
                              id="271"
                              onChange={[Function]}
                              type="checkbox"
                              value="271"
                            />
                          </Checkbox>
                        </div>
                        <div
                          className="event-details level-error"
                          style={
                            Object {
                              "flex": 1,
                            }
                          }
                        >
                          <EventOrGroupHeader
                            data={
                              Object {
                                "annotations": Array [],
                                "assignedTo": null,
                                "count": "90",
                                "culprit": "length(app/views/groupSimilar/groupSimilarView)",
                                "firstSeen": "2017-07-10T18:32:43Z",
                                "hasSeen": false,
                                "id": "271",
                                "isBookmarked": false,
                                "isPublic": false,
                                "isSubscribed": true,
                                "lastSeen": "2017-07-24T23:41:44Z",
                                "level": "error",
                                "logger": "javascript",
                                "metadata": Object {
                                  "type": "TypeError",
                                  "value": "Cannot read property 'length' of undefined",
                                },
                                "numComments": 0,
                                "permalink": "http://localhost:8000/sentry/internal/issues/271/",
                                "project": Object {
                                  "name": "Internal",
                                  "slug": "internal",
                                },
                                "shareId": "312e323731",
                                "shortId": "INTERNAL-4G",
                                "status": "resolved",
                                "statusDetails": Object {},
                                "subscriptionDetails": null,
                                "title": "TypeError: Cannot read property 'length' of undefined",
                                "type": "error",
                                "userCount": 3,
                              }
                            }
                            includeLink={true}
                            orgId="org-slug"
                            projectId="project-slug"
                          >
                            <div
                              className="event-issue-header"
                            >
                              <Title>
                                <div
                                  className="css-leroxf-Title-truncateStyles eex8od0"
                                >
                                  <ProjectLink
                                    style={
                                      Object {
                                        "textDecoration": "line-through",
                                      }
                                    }
                                    to={
                                      Object {
                                        "pathname": "/org-slug/project-slug/issues/271/",
                                        "search": "",
                                      }
                                    }
                                  >
                                    <Link
                                      onlyActiveOnIndex={false}
                                      style={
                                        Object {
                                          "textDecoration": "line-through",
                                        }
                                      }
                                      to={
                                        Object {
                                          "pathname": "/org-slug/project-slug/issues/271/",
                                          "search": "",
                                        }
                                      }
                                    >
                                      <a
                                        onClick={[Function]}
                                        style={
                                          Object {
                                            "textDecoration": "line-through",
                                          }
                                        }
                                      >
                                        <Tooltip
                                          title="Error level: Error"
                                        >
                                          <GroupLevel
                                            className="tip"
                                            level="error"
                                            title="Error level: Error"
                                          >
                                            <div
                                              className="tip css-hpn2f3-GroupLevel eex8od5"
                                              title="Error level: Error"
                                            />
                                          </GroupLevel>
                                        </Tooltip>
                                        <EventOrGroupTitle
                                          data={
                                            Object {
                                              "annotations": Array [],
                                              "assignedTo": null,
                                              "count": "90",
                                              "culprit": "length(app/views/groupSimilar/groupSimilarView)",
                                              "firstSeen": "2017-07-10T18:32:43Z",
                                              "hasSeen": false,
                                              "id": "271",
                                              "isBookmarked": false,
                                              "isPublic": false,
                                              "isSubscribed": true,
                                              "lastSeen": "2017-07-24T23:41:44Z",
                                              "level": "error",
                                              "logger": "javascript",
                                              "metadata": Object {
                                                "type": "TypeError",
                                                "value": "Cannot read property 'length' of undefined",
                                              },
                                              "numComments": 0,
                                              "permalink": "http://localhost:8000/sentry/internal/issues/271/",
                                              "project": Object {
                                                "name": "Internal",
                                                "slug": "internal",
                                              },
                                              "shareId": "312e323731",
                                              "shortId": "INTERNAL-4G",
                                              "status": "resolved",
                                              "statusDetails": Object {},
                                              "subscriptionDetails": null,
                                              "title": "TypeError: Cannot read property 'length' of undefined",
                                              "type": "error",
                                              "userCount": 3,
                                            }
                                          }
                                          includeLink={true}
                                          orgId="org-slug"
                                          projectId="project-slug"
                                          style={
                                            Object {
                                              "fontWeight": 600,
                                            }
                                          }
                                        >
                                          <span
                                            style={
                                              Object {
                                                "fontWeight": 600,
                                              }
                                            }
                                          >
                                            <span
                                              style={
                                                Object {
                                                  "marginRight": 10,
                                                }
                                              }
                                            >
                                              TypeError
                                            </span>
                                            <em
                                              title="length(app/views/groupSimilar/groupSimilarView)"
                                            >
                                              length(app/views/groupSimilar/groupSimilarView)
                                            </em>
                                            <br />
                                          </span>
                                        </EventOrGroupTitle>
                                      </a>
                                    </Link>
                                  </ProjectLink>
                                </div>
                              </Title>
                              <Message>
                                <div
                                  className="css-y5cfdn-Message-truncateStyles eex8od2"
                                >
                                  Cannot read property 'length' of undefined
                                </div>
                              </Message>
                            </div>
                          </EventOrGroupHeader>
                          <EventOrGroupExtraDetails
                            annotations={Array []}
                            assignedTo={null}
                            count="90"
                            culprit="length(app/views/groupSimilar/groupSimilarView)"
                            firstSeen="2017-07-10T18:32:43Z"
                            group={true}
                            groupId="271"
                            hasSeen={false}
                            id="271"
                            isBookmarked={false}
                            isPublic={false}
                            isSubscribed={true}
                            lastSeen={null}
                            level="error"
                            logger="javascript"
                            metadata={
                              Object {
                                "type": "TypeError",
                                "value": "Cannot read property 'length' of undefined",
                              }
                            }
                            numComments={0}
                            orgId="org-slug"
                            permalink="http://localhost:8000/sentry/internal/issues/271/"
                            project={
                              Object {
                                "name": "Internal",
                                "slug": "internal",
                              }
                            }
                            projectId="project-slug"
                            shareId="312e323731"
                            shortId="INTERNAL-4G"
                            showAssignee={true}
                            showStatus={true}
                            status="resolved"
                            statusDetails={Object {}}
                            subscriptionDetails={null}
                            title="TypeError: Cannot read property 'length' of undefined"
                            type="error"
                            userCount={3}
                          >
                            <GroupExtra
                              align="center"
                            >
                              <Base
                                align="center"
                                className="css-1iq5qji-GroupExtra eec9orn0"
                              >
                                <div
                                  className="css-1iq5qji-GroupExtra eec9orn0"
                                  is={null}
                                >
                                  <GroupShortId
                                    shortId="INTERNAL-4G"
                                  >
                                    <ShortId
                                      className="css-yd3bt1-GroupShortId eec9orn4"
                                      shortId="INTERNAL-4G"
                                    >
                                      <StyledShortId
                                        className="css-yd3bt1-GroupShortId eec9orn4"
                                        onClick={[Function]}
                                        shortId="INTERNAL-4G"
                                      >
                                        <div
                                          className="eec9orn4 css-77itmv-StyledShortId-GroupShortId ebuncw00"
                                          onClick={[Function]}
                                        >
                                          <AutoSelectText>
                                            <div
                                              className="auto-select-text"
                                              onClick={[Function]}
                                            >
                                              <span>
                                                INTERNAL-4G
                                              </span>
                                            </div>
                                          </AutoSelectText>
                                        </div>
                                      </StyledShortId>
                                    </ShortId>
                                  </GroupShortId>
                                  <Times>
                                    <div
                                      className="css-139skj2-Times eec9orn3"
                                    >
                                      <div
                                        className="css-77t6iv"
                                      >
                                        <TimeSince
                                          className="hidden-xs hidden-sm"
                                          date="2017-07-10T18:32:43Z"
                                          suffix="old"
                                        >
                                          <time
                                            className="hidden-xs hidden-sm"
                                            dateTime="2017-07-10T18:32:43.000Z"
                                            title="July 10, 2017 6:32 PM UTC"
                                          >
                                            3 months old
                                          </time>
                                        </TimeSince>
                                      </div>
                                    </div>
                                  </Times>
                                  <GroupExtraCommentsAndLogger>
                                    <Base
                                      className="css-1ycmuq8-GroupExtraCommentsAndLogger eec9orn1"
                                    >
                                      <div
                                        className="css-1ycmuq8-GroupExtraCommentsAndLogger eec9orn1"
                                        is={null}
                                      >
                                        <Box
                                          className="event-annotation"
                                          mr={2}
                                        >
                                          <Base
                                            className="event-annotation css-6htue9"
                                            mr={2}
                                          >
                                            <div
                                              className="event-annotation css-6htue9"
                                              is={null}
                                            >
                                              <Link
                                                onlyActiveOnIndex={false}
                                                style={Object {}}
                                                to={
                                                  Object {
                                                    "pathname": "/org-slug/project-slug/",
                                                    "query": Object {
                                                      "query": "logger:javascript",
                                                    },
                                                  }
                                                }
                                              >
                                                <a
                                                  onClick={[Function]}
                                                  style={Object {}}
                                                >
                                                  javascript
                                                </a>
                                              </Link>
                                            </div>
                                          </Base>
                                        </Box>
                                      </div>
                                    </Base>
                                  </GroupExtraCommentsAndLogger>
                                </div>
                              </Base>
                            </GroupExtra>
                          </EventOrGroupExtraDetails>
                        </div>
                      </div>
                    </FlowLayout>
                    <button
                      className="btn btn-default btn-xs"
                      onClick={[Function]}
                      style={
                        Object {
                          "marginRight": 2,
                        }
                      }
                    >
                      Diff
                    </button>
                  </div>
                </FlowLayout>
                <div
                  className="similar-score-columns"
                >
                  <count
                    className="similar-score-column"
                    value="90"
                  >
                    <span
                      className="similar-score-column"
                    >
                      90
                    </span>
                  </count>
                  <div
                    className="similar-score-column"
                    key="exception"
                  >
                    <Hovercard
                      body={
                        <SimilarScoreCard
                          scoreList={
                            Array [
                              Array [
                                "exception:stacktrace:pairs",
                                0.875,
                              ],
                            ]
                          }
                        />
                      }
                      displayTimeout={100}
                    >
                      <Container
                        innerRef={
                          Object {
                            "current": <span
                              class="css-s35yzd-Container e38w1je1"
                            >
                              <div
                                class="css-omtyju-StyledScoreBar eecxaw40"
                              >
                                <div
                                  class="css-1jrlewc-Bar eecxaw41"
                                  color="#98b480"
                                  size="40"
                                />
                                <div
                                  class="css-1jrlewc-Bar eecxaw41"
                                  color="#98b480"
                                  size="40"
                                />
                                <div
                                  class="css-1jrlewc-Bar eecxaw41"
                                  color="#98b480"
                                  size="40"
                                />
                                <div
                                  class="css-1jrlewc-Bar eecxaw41"
                                  color="#98b480"
                                  size="40"
                                />
                                <div
                                  class="css-15vxee-Bar eecxaw41"
                                  size="40"
                                />
                              </div>
                            </span>,
                          }
                        }
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                      >
                        <span
                          className="css-s35yzd-Container e38w1je1"
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                        >
                          <StyledScoreBar
                            score={4}
                            vertical={true}
                          >
                            <ScoreBar
                              className="css-omtyju-StyledScoreBar eecxaw40"
                              palette={
                                Array [
                                  "#ec5e44",
                                  "#f38259",
                                  "#f9a66d",
                                  "#98b480",
                                  "#57be8c",
                                ]
                              }
                              score={4}
                              size={40}
                              thickness={4}
                              vertical={true}
                            >
                              <div
                                className="css-omtyju-StyledScoreBar eecxaw40"
                              >
                                <Bar
                                  color="#98b480"
                                  key="0"
                                  size={40}
                                  thickness={4}
                                  vertical={true}
                                >
                                  <div
                                    className="css-1jrlewc-Bar eecxaw41"
                                    color="#98b480"
                                    size={40}
                                  />
                                </Bar>
                                <Bar
                                  color="#98b480"
                                  key="1"
                                  size={40}
                                  thickness={4}
                                  vertical={true}
                                >
                                  <div
                                    className="css-1jrlewc-Bar eecxaw41"
                                    color="#98b480"
                                    size={40}
                                  />
                                </Bar>
                                <Bar
                                  color="#98b480"
                                  key="2"
                                  size={40}
                                  thickness={4}
                                  vertical={true}
                                >
                                  <div
                                    className="css-1jrlewc-Bar eecxaw41"
                                    color="#98b480"
                                    size={40}
                                  />
                                </Bar>
                                <Bar
                                  color="#98b480"
                                  key="3"
                                  size={40}
                                  thickness={4}
                                  vertical={true}
                                >
                                  <div
                                    className="css-1jrlewc-Bar eecxaw41"
                                    color="#98b480"
                                    size={40}
                                  />
                                </Bar>
                                <Bar
                                  empty={true}
                                  key="empty-0"
                                  size={40}
                                  thickness={4}
                                  vertical={true}
                                >
                                  <div
                                    className="css-15vxee-Bar eecxaw41"
                                    size={40}
                                  />
                                </Bar>
                              </div>
                            </ScoreBar>
                          </StyledScoreBar>
                        </span>
                      </Container>
                    </Hovercard>
                  </div>
                  <div
                    className="similar-score-column"
                    key="message"
                  >
                    <Hovercard
                      body={0}
                      displayTimeout={100}
                    >
                      <Container
                        innerRef={
                          Object {
                            "current": <span
                              class="css-s35yzd-Container e38w1je1"
                            >
                              <div
                                class="css-omtyju-StyledScoreBar eecxaw40"
                              >
                                <div
                                  class="css-15vxee-Bar eecxaw41"
                                  size="40"
                                />
                                <div
                                  class="css-15vxee-Bar eecxaw41"
                                  size="40"
                                />
                                <div
                                  class="css-15vxee-Bar eecxaw41"
                                  size="40"
                                />
                                <div
                                  class="css-15vxee-Bar eecxaw41"
                                  size="40"
                                />
                                <div
                                  class="css-15vxee-Bar eecxaw41"
                                  size="40"
                                />
                              </div>
                            </span>,
                          }
                        }
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                      >
                        <span
                          className="css-s35yzd-Container e38w1je1"
                          onMouseEnter={[Function]}
                          onMouseLeave={[Function]}
                        >
                          <StyledScoreBar
                            score={0}
                            vertical={true}
                          >
                            <ScoreBar
                              className="css-omtyju-StyledScoreBar eecxaw40"
                              palette={
                                Array [
                                  "#ec5e44",
                                  "#f38259",
                                  "#f9a66d",
                                  "#98b480",
                                  "#57be8c",
                                ]
                              }
                              score={0}
                              size={40}
                              thickness={4}
                              vertical={true}
                            >
                              <div
                                className="css-omtyju-StyledScoreBar eecxaw40"
                              >
                                <Bar
                                  empty={true}
                                  key="empty-0"
                                  size={40}
                                  thickness={4}
                                  vertical={true}
                                >
                                  <div
                                    className="css-15vxee-Bar eecxaw41"
                                    size={40}
                                  />
                                </Bar>
                                <Bar
                                  empty={true}
                                  key="empty-1"
                                  size={40}
                                  thickness={4}
                                  vertical={true}
                                >
                                  <div
                                    className="css-15vxee-Bar eecxaw41"
                                    size={40}
                                  />
                                </Bar>
                                <Bar
                                  empty={true}
                                  key="empty-2"
                                  size={40}
                                  thickness={4}
                                  vertical={true}
                                >
                                  <div
                                    className="css-15vxee-Bar eecxaw41"
                                    size={40}
                                  />
                                </Bar>
                                <Bar
                                  empty={true}
                                  key="empty-3"
                                  size={40}
                                  thickness={4}
                                  vertical={true}
                                >
                                  <div
                                    className="css-15vxee-Bar eecxaw41"
                                    size={40}
                                  />
                                </Bar>
                                <Bar
                                  empty={true}
                                  key="empty-4"
                                  size={40}
                                  thickness={4}
                                  vertical={true}
                                >
                                  <div
                                    className="css-15vxee-Bar eecxaw41"
                                    size={40}
                                  />
                                </Bar>
                              </div>
                            </ScoreBar>
                          </StyledScoreBar>
                        </span>
                      </Container>
                    </Hovercard>
                  </div>
                </div>
              </div>
            </SpreadLayout>
          </SimilarIssueItem>
          <div
            className="similar-items-footer"
          >
            <button
              className="btn btn-default btn-xl"
              onClick={[Function]}
            >
              Show 
              3
               issues below threshold
            </button>
          </div>
        </div>
        <Pagination
          onCursor={[Function]}
        />
      </div>
    </SimilarList>
  </div>
</GroupGroupingView>
`;
