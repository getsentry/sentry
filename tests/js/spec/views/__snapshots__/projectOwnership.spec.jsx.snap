// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ProjectTeamsSettings render() renders 1`] = `
<ProjectOwnership
  organization={
    Object {
      "access": Array [
        "org:read",
        "org:write",
        "org:admin",
        "org:integrations",
        "project:read",
        "project:write",
        "project:admin",
        "team:read",
        "team:write",
        "team:admin",
      ],
      "experiments": Object {},
      "features": Array [],
      "id": "3",
      "name": "Organization Name",
      "onboardingTasks": Array [],
      "projects": Array [],
      "scrapeJavaScript": true,
      "slug": "org-slug",
      "status": Object {
        "id": "active",
        "name": "active",
      },
      "teams": Array [],
    }
  }
  params={
    Object {
      "orgId": "org-slug",
      "projectId": "project-slug",
    }
  }
  project={
    Object {
      "allowedDomains": Array [
        "example.com",
        "https://example.com",
      ],
      "dataScrubber": false,
      "dataScrubberDefaults": false,
      "digestsMaxDelay": 60,
      "digestsMinDelay": 5,
      "environments": Array [],
      "features": Array [],
      "hasAccess": true,
      "id": "2",
      "isBookmarked": false,
      "isMember": true,
      "name": "Project Name",
      "resolveAge": 48,
      "safeFields": Array [
        "business-email",
        "company",
      ],
      "scrapeJavaScript": true,
      "scrubIPAddresses": false,
      "securityToken": "security-token",
      "securityTokenHeader": "x-security-header",
      "sensitiveFields": Array [
        "creditcard",
        "ssn",
      ],
      "slug": "project-slug",
      "storeCrashReports": false,
      "subjectPrefix": "[my-org]",
      "subjectTemplate": "[$project] \${tag:level}: $title",
      "teams": Array [],
      "verifySSL": true,
    }
  }
>
  <SideEffect(DocumentTitle)
    title="Issue Owners - project-slug - Sentry"
  >
    <DocumentTitle
      title="Issue Owners - project-slug - Sentry"
    >
      <div>
        <StyledSettingsPageHeading
          action={
            <ForwardRef
              size="small"
              to={
                Object {
                  "pathname": "/organizations/org-slug/issues/",
                  "query": Object {
                    "project": "2",
                  },
                }
              }
            >
              View Issues
            </ForwardRef>
          }
          noTitleStyles={false}
          title="Issue Owners"
        >
          <SettingsPageHeading
            action={
              <ForwardRef
                size="small"
                to={
                  Object {
                    "pathname": "/organizations/org-slug/issues/",
                    "query": Object {
                      "project": "2",
                    },
                  }
                }
              >
                View Issues
              </ForwardRef>
            }
            className="css-xtfhnp-StyledSettingsPageHeading e1uay4fd4"
            noTitleStyles={false}
            title="Issue Owners"
          >
            <div
              className="css-xtfhnp-StyledSettingsPageHeading e1uay4fd4"
            >
              <TitleAndActions>
                <div
                  className="css-ifzfc5-TitleAndActions e1uay4fd0"
                >
                  <Title
                    styled={false}
                  >
                    <div
                      className="css-u2ls9d-Title e1uay4fd1"
                    >
                      <HeaderTitle>
                        <h4
                          className="css-1bosio6-HeaderTitle eqkydle2"
                        >
                          Issue Owners
                        </h4>
                      </HeaderTitle>
                    </div>
                  </Title>
                  <Action>
                    <div
                      className="css-au7gsx-Action e1uay4fd3"
                    >
                      <forwardRef<Button>
                        size="small"
                        to={
                          Object {
                            "pathname": "/organizations/org-slug/issues/",
                            "query": Object {
                              "project": "2",
                            },
                          }
                        }
                      >
                        <Button
                          align="center"
                          disabled={false}
                          forwardRef={null}
                          size="small"
                          to={
                            Object {
                              "pathname": "/organizations/org-slug/issues/",
                              "query": Object {
                                "project": "2",
                              },
                            }
                          }
                        >
                          <StyledButton
                            aria-disabled={false}
                            aria-label="View Issues"
                            disabled={false}
                            forwardRef={null}
                            onClick={[Function]}
                            role="button"
                            size="small"
                            to={
                              Object {
                                "pathname": "/organizations/org-slug/issues/",
                                "query": Object {
                                  "project": "2",
                                },
                              }
                            }
                          >
                            <Component
                              aria-disabled={false}
                              aria-label="View Issues"
                              className="css-8od3q1-StyledButton edwq9my0"
                              forwardRef={null}
                              onClick={[Function]}
                              role="button"
                              size="small"
                              to={
                                Object {
                                  "pathname": "/organizations/org-slug/issues/",
                                  "query": Object {
                                    "project": "2",
                                  },
                                }
                              }
                            >
                              <Link
                                aria-disabled={false}
                                aria-label="View Issues"
                                className="css-8od3q1-StyledButton edwq9my0"
                                onClick={[Function]}
                                onlyActiveOnIndex={false}
                                role="button"
                                size="small"
                                style={Object {}}
                                to={
                                  Object {
                                    "pathname": "/organizations/org-slug/issues/",
                                    "query": Object {
                                      "project": "2",
                                    },
                                  }
                                }
                              >
                                <a
                                  aria-disabled={false}
                                  aria-label="View Issues"
                                  className="css-8od3q1-StyledButton edwq9my0"
                                  onClick={[Function]}
                                  role="button"
                                  size="small"
                                  style={Object {}}
                                >
                                  <ButtonLabel
                                    align="center"
                                    size="small"
                                  >
                                    <span
                                      className="css-n7mdnv-ButtonLabel edwq9my1"
                                    >
                                      View Issues
                                    </span>
                                  </ButtonLabel>
                                </a>
                              </Link>
                            </Component>
                          </StyledButton>
                        </Button>
                      </forwardRef<Button>>
                    </div>
                  </Action>
                </div>
              </TitleAndActions>
            </div>
          </SettingsPageHeading>
        </StyledSettingsPageHeading>
        <PermissionAlert>
          <WithOrganizationMockWrapper
            access={
              Array [
                "project:write",
              ]
            }
          >
            <withConfig(Access)
              access={
                Array [
                  "project:write",
                ]
              }
              organization={
                Object {
                  "access": Array [
                    "org:read",
                    "org:write",
                    "org:admin",
                    "org:integrations",
                    "project:read",
                    "project:write",
                    "project:admin",
                    "team:read",
                    "team:write",
                    "team:admin",
                  ],
                  "experiments": Object {},
                  "features": Array [],
                  "id": "3",
                  "name": "Organization Name",
                  "onboardingTasks": Array [],
                  "projects": Array [],
                  "scrapeJavaScript": true,
                  "slug": "org-slug",
                  "status": Object {
                    "id": "active",
                    "name": "active",
                  },
                  "teams": Array [],
                }
              }
            >
              <Access
                access={
                  Array [
                    "project:write",
                  ]
                }
                config={
                  Object {
                    "features": Set {},
                    "messages": Array [],
                    "user": Object {
                      "email": "foo@example.com",
                      "flags": Object {
                        "newsletter_consent_prompt": false,
                      },
                      "hasPasswordAuth": true,
                      "id": "1",
                      "isAuthenticated": true,
                      "name": "Foo Bar",
                      "options": Object {
                        "timezone": "UTC",
                      },
                      "permissions": Set {},
                      "username": "foo@example.com",
                    },
                  }
                }
                isSuperuser={false}
                organization={
                  Object {
                    "access": Array [
                      "org:read",
                      "org:write",
                      "org:admin",
                      "org:integrations",
                      "project:read",
                      "project:write",
                      "project:admin",
                      "team:read",
                      "team:write",
                      "team:admin",
                    ],
                    "experiments": Object {},
                    "features": Array [],
                    "id": "3",
                    "name": "Organization Name",
                    "onboardingTasks": Array [],
                    "projects": Array [],
                    "scrapeJavaScript": true,
                    "slug": "org-slug",
                    "status": Object {
                      "id": "active",
                      "name": "active",
                    },
                    "teams": Array [],
                  }
                }
                renderNoAccessMessage={false}
                requireAll={true}
              />
            </withConfig(Access)>
          </WithOrganizationMockWrapper>
        </PermissionAlert>
        <Panel>
          <Component
            className="css-ietoyz-Panel e119nu470"
          >
            <div
              className="css-ietoyz-Panel e119nu470"
            >
              <PanelHeader>
                <div
                  className="css-pi486d-PanelHeader en8g1d30"
                >
                  Ownership Rules
                </div>
              </PanelHeader>
              <PanelBody
                flexible={false}
                withPadding={true}
              >
                <FlexBox
                  withPadding={true}
                >
                  <div
                    className="css-1ha8x5g-FlexBox e1vnwt6f0"
                  >
                    <Block>
                      <div
                        className="css-1k16rvw-TextBlock-Block egbqmfy1"
                      >
                        Define rules here to configure automated ownership for new issues and direct email alerts
                      </div>
                    </Block>
                    <Block>
                      <div
                        className="css-1k16rvw-TextBlock-Block egbqmfy1"
                      >
                        Rules follow the pattern: 
                        <code>
                          type:glob owner owner
                        </code>
                      </div>
                    </Block>
                    <Block>
                      <div
                        className="css-1k16rvw-TextBlock-Block egbqmfy1"
                      >
                        <span
                          key="4"
                        >
                          <span
                            key="0"
                          >
                            Owners can be team identifiers starting with 
                          </span>
                          <code
                            key="1"
                          >
                            #
                          </code>
                          <span
                            key="2"
                          >
                            , or user emails
                          </span>
                        </span>
                      </div>
                    </Block>
                    <Block>
                      <div
                        className="css-1k16rvw-TextBlock-Block egbqmfy1"
                      >
                        Globbing Syntax:
                        <CodeBlock>
                          <pre
                            className="css-ikgwc2-CodeBlock egbqmfy0"
                          >
                            * matches everything
? matches any single character
                          </pre>
                        </CodeBlock>
                      </div>
                    </Block>
                    <Block>
                      <div
                        className="css-1k16rvw-TextBlock-Block egbqmfy1"
                      >
                        Examples:
                        <CodeBlock>
                          <pre
                            className="css-ikgwc2-CodeBlock egbqmfy0"
                          >
                            path:src/example/pipeline/* person@sentry.io #infrastructure
                            

                            url:http://example.com/settings/* #product
                            

                            tags.sku_class:enterprise #enterprise
                          </pre>
                        </CodeBlock>
                      </div>
                    </Block>
                    <OwnerInput
                      disabled={false}
                      initialText="url:src @dummy@example.com"
                      organization={
                        Object {
                          "access": Array [
                            "org:read",
                            "org:write",
                            "org:admin",
                            "org:integrations",
                            "project:read",
                            "project:write",
                            "project:admin",
                            "team:read",
                            "team:write",
                            "team:admin",
                          ],
                          "experiments": Object {},
                          "features": Array [],
                          "id": "3",
                          "name": "Organization Name",
                          "onboardingTasks": Array [],
                          "projects": Array [],
                          "scrapeJavaScript": true,
                          "slug": "org-slug",
                          "status": Object {
                            "id": "active",
                            "name": "active",
                          },
                          "teams": Array [],
                        }
                      }
                      params={
                        Object {
                          "orgId": "org-slug",
                          "projectId": "project-slug",
                        }
                      }
                      project={
                        Object {
                          "allowedDomains": Array [
                            "example.com",
                            "https://example.com",
                          ],
                          "dataScrubber": false,
                          "dataScrubberDefaults": false,
                          "digestsMaxDelay": 60,
                          "digestsMinDelay": 5,
                          "environments": Array [],
                          "features": Array [],
                          "hasAccess": true,
                          "id": "2",
                          "isBookmarked": false,
                          "isMember": true,
                          "name": "Project Name",
                          "resolveAge": 48,
                          "safeFields": Array [
                            "business-email",
                            "company",
                          ],
                          "scrapeJavaScript": true,
                          "scrubIPAddresses": false,
                          "securityToken": "security-token",
                          "securityTokenHeader": "x-security-header",
                          "sensitiveFields": Array [
                            "creditcard",
                            "ssn",
                          ],
                          "slug": "project-slug",
                          "storeCrashReports": false,
                          "subjectPrefix": "[my-org]",
                          "subjectTemplate": "[$project] \${tag:level}: $title",
                          "teams": Array [],
                          "verifySSL": true,
                        }
                      }
                    >
                      <RuleBuilder
                        disabled={false}
                        onAddRule={[Function]}
                        organization={
                          Object {
                            "access": Array [
                              "org:read",
                              "org:write",
                              "org:admin",
                              "org:integrations",
                              "project:read",
                              "project:write",
                              "project:admin",
                              "team:read",
                              "team:write",
                              "team:admin",
                            ],
                            "experiments": Object {},
                            "features": Array [],
                            "id": "3",
                            "name": "Organization Name",
                            "onboardingTasks": Array [],
                            "projects": Array [],
                            "scrapeJavaScript": true,
                            "slug": "org-slug",
                            "status": Object {
                              "id": "active",
                              "name": "active",
                            },
                            "teams": Array [],
                          }
                        }
                        project={
                          Object {
                            "allowedDomains": Array [
                              "example.com",
                              "https://example.com",
                            ],
                            "dataScrubber": false,
                            "dataScrubberDefaults": false,
                            "digestsMaxDelay": 60,
                            "digestsMinDelay": 5,
                            "environments": Array [],
                            "features": Array [],
                            "hasAccess": true,
                            "id": "2",
                            "isBookmarked": false,
                            "isMember": true,
                            "name": "Project Name",
                            "resolveAge": 48,
                            "safeFields": Array [
                              "business-email",
                              "company",
                            ],
                            "scrapeJavaScript": true,
                            "scrubIPAddresses": false,
                            "securityToken": "security-token",
                            "securityTokenHeader": "x-security-header",
                            "sensitiveFields": Array [
                              "creditcard",
                              "ssn",
                            ],
                            "slug": "project-slug",
                            "storeCrashReports": false,
                            "subjectPrefix": "[my-org]",
                            "subjectTemplate": "[$project] \${tag:level}: $title",
                            "teams": Array [],
                            "verifySSL": true,
                          }
                        }
                      >
                        <BuilderBar>
                          <div
                            className="css-1k7bckg-BuilderBar e1hyuoc75"
                          >
                            <BuilderSelect
                              clearable={false}
                              deprecatedSelectControl={true}
                              disabled={false}
                              hideErrorMessage={false}
                              multiple={false}
                              name="select-type"
                              onChange={[Function]}
                              options={
                                Array [
                                  Object {
                                    "label": "Path",
                                    "value": "path",
                                  },
                                  Object {
                                    "label": "Tag",
                                    "value": "tag",
                                  },
                                  Object {
                                    "label": "URL",
                                    "value": "url",
                                  },
                                ]
                              }
                              required={false}
                              showSearch={false}
                              style={
                                Object {
                                  "width": 140,
                                }
                              }
                              value="path"
                            >
                              <SelectField
                                className="css-1vsx268-BuilderSelect e1hyuoc76"
                                clearable={false}
                                deprecatedSelectControl={true}
                                disabled={false}
                                hideErrorMessage={false}
                                multiple={false}
                                name="select-type"
                                onChange={[Function]}
                                options={
                                  Array [
                                    Object {
                                      "label": "Path",
                                      "value": "path",
                                    },
                                    Object {
                                      "label": "Tag",
                                      "value": "tag",
                                    },
                                    Object {
                                      "label": "URL",
                                      "value": "url",
                                    },
                                  ]
                                }
                                required={false}
                                showSearch={false}
                                style={
                                  Object {
                                    "width": 140,
                                  }
                                }
                                value="path"
                              >
                                <div
                                  className="css-1vsx268-BuilderSelect e1hyuoc76"
                                  style={
                                    Object {
                                      "width": 140,
                                    }
                                  }
                                >
                                  <div
                                    className="controls"
                                  >
                                    <StyledSelectControl
                                      clearable={false}
                                      deprecatedSelectControl={true}
                                      disabled={false}
                                      id="id-select-type"
                                      multiple={false}
                                      name="select-type"
                                      onChange={[Function]}
                                      options={
                                        Array [
                                          Object {
                                            "label": "Path",
                                            "value": "path",
                                          },
                                          Object {
                                            "label": "Tag",
                                            "value": "tag",
                                          },
                                          Object {
                                            "label": "URL",
                                            "value": "url",
                                          },
                                        ]
                                      }
                                      required={false}
                                      value="path"
                                    >
                                      <ForwardRef(RefForwardedSelectControl)
                                        className="css-9gm53a-StyledSelectControl e1qrhqd00"
                                        clearable={false}
                                        deprecatedSelectControl={true}
                                        disabled={false}
                                        id="id-select-type"
                                        multiple={false}
                                        name="select-type"
                                        onChange={[Function]}
                                        options={
                                          Array [
                                            Object {
                                              "label": "Path",
                                              "value": "path",
                                            },
                                            Object {
                                              "label": "Tag",
                                              "value": "tag",
                                            },
                                            Object {
                                              "label": "URL",
                                              "value": "url",
                                            },
                                          ]
                                        }
                                        required={false}
                                        value="path"
                                      >
                                        <SelectControl
                                          className="css-9gm53a-StyledSelectControl e1qrhqd00"
                                          clearable={false}
                                          deprecatedSelectControl={true}
                                          disabled={false}
                                          forwardedRef={null}
                                          id="id-select-type"
                                          multiple={false}
                                          name="select-type"
                                          onChange={[Function]}
                                          options={
                                            Array [
                                              Object {
                                                "label": "Path",
                                                "value": "path",
                                              },
                                              Object {
                                                "label": "Tag",
                                                "value": "tag",
                                              },
                                              Object {
                                                "label": "URL",
                                                "value": "url",
                                              },
                                            ]
                                          }
                                          required={false}
                                          value="path"
                                        >
                                          <SelectControlLegacy
                                            className="css-9gm53a-StyledSelectControl e1qrhqd00"
                                            clearable={false}
                                            disabled={false}
                                            forwardedRef={null}
                                            height={36}
                                            id="id-select-type"
                                            multiple={false}
                                            name="select-type"
                                            onChange={[Function]}
                                            options={
                                              Array [
                                                Object {
                                                  "label": "Path",
                                                  "value": "path",
                                                },
                                                Object {
                                                  "label": "Tag",
                                                  "value": "tag",
                                                },
                                                Object {
                                                  "label": "URL",
                                                  "value": "url",
                                                },
                                              ]
                                            }
                                            required={false}
                                            value="path"
                                          >
                                            <StyledSelect
                                              arrowRenderer={[Function]}
                                              backspaceRemoves={false}
                                              className="css-9gm53a-StyledSelectControl e1qrhqd00"
                                              clearable={false}
                                              deleteRemoves={false}
                                              disabled={false}
                                              forwardedRef={null}
                                              height={36}
                                              id="id-select-type"
                                              multiple={false}
                                              name="select-type"
                                              onChange={[Function]}
                                              options={
                                                Array [
                                                  Object {
                                                    "label": "Path",
                                                    "value": "path",
                                                  },
                                                  Object {
                                                    "label": "Tag",
                                                    "value": "tag",
                                                  },
                                                  Object {
                                                    "label": "URL",
                                                    "value": "url",
                                                  },
                                                ]
                                              }
                                              required={false}
                                              value="path"
                                            >
                                              <SelectPicker
                                                arrowRenderer={[Function]}
                                                backspaceRemoves={false}
                                                className="e1qrhqd00 css-1oqptas-StyledSelect-StyledSelectControl e1ynsgsr0"
                                                clearable={false}
                                                deleteRemoves={false}
                                                disabled={false}
                                                forwardedRef={null}
                                                height={36}
                                                id="id-select-type"
                                                multiple={false}
                                                name="select-type"
                                                onChange={[Function]}
                                                options={
                                                  Array [
                                                    Object {
                                                      "label": "Path",
                                                      "value": "path",
                                                    },
                                                    Object {
                                                      "label": "Tag",
                                                      "value": "tag",
                                                    },
                                                    Object {
                                                      "label": "URL",
                                                      "value": "url",
                                                    },
                                                  ]
                                                }
                                                required={false}
                                                value="path"
                                              >
                                                <Select
                                                  arrowRenderer={[Function]}
                                                  autosize={true}
                                                  backspaceRemoves={false}
                                                  backspaceToRemoveMessage="Press backspace to remove {label}"
                                                  className="e1qrhqd00 css-1oqptas-StyledSelect-StyledSelectControl e1ynsgsr0"
                                                  clearAllText="Clear all"
                                                  clearRenderer={[Function]}
                                                  clearValueText="Clear value"
                                                  clearable={false}
                                                  closeOnSelect={true}
                                                  deleteRemoves={false}
                                                  delimiter=","
                                                  disabled={false}
                                                  escapeClearsValue={true}
                                                  filterOptions={[Function]}
                                                  height={36}
                                                  id="id-select-type"
                                                  ignoreAccents={true}
                                                  ignoreCase={true}
                                                  inputProps={Object {}}
                                                  isLoading={false}
                                                  joinValues={false}
                                                  labelKey="label"
                                                  matchPos="any"
                                                  matchProp="any"
                                                  menuBuffer={0}
                                                  menuRenderer={[Function]}
                                                  multi={false}
                                                  multiple={false}
                                                  name="select-type"
                                                  noResultsText="No results found"
                                                  onBlurResetsInput={true}
                                                  onChange={[Function]}
                                                  onCloseResetsInput={true}
                                                  onSelectResetsInput={true}
                                                  openOnClick={true}
                                                  optionComponent={[Function]}
                                                  options={
                                                    Array [
                                                      Object {
                                                        "label": "Path",
                                                        "value": "path",
                                                      },
                                                      Object {
                                                        "label": "Tag",
                                                        "value": "tag",
                                                      },
                                                      Object {
                                                        "label": "URL",
                                                        "value": "url",
                                                      },
                                                    ]
                                                  }
                                                  pageSize={5}
                                                  placeholder="Select..."
                                                  removeSelected={true}
                                                  required={false}
                                                  rtl={false}
                                                  scrollMenuIntoView={true}
                                                  searchable={true}
                                                  simpleValue={false}
                                                  tabSelectsValue={true}
                                                  trimFilter={true}
                                                  value="path"
                                                  valueComponent={[Function]}
                                                  valueKey="value"
                                                >
                                                  <div
                                                    className="Select e1qrhqd00 css-1oqptas-StyledSelect-StyledSelectControl e1ynsgsr0 has-value is-searchable Select--single"
                                                  >
                                                    <input
                                                      disabled={false}
                                                      key="hidden.0"
                                                      name="select-type"
                                                      type="hidden"
                                                      value="path"
                                                    />
                                                    <div
                                                      className="Select-control"
                                                      onKeyDown={[Function]}
                                                      onMouseDown={[Function]}
                                                      onTouchEnd={[Function]}
                                                      onTouchMove={[Function]}
                                                      onTouchStart={[Function]}
                                                    >
                                                      <div
                                                        className="Select-multi-value-wrapper"
                                                        id="react-select-2--value"
                                                      >
                                                        <Value
                                                          disabled={false}
                                                          id="react-select-2--value-item"
                                                          instancePrefix="react-select-2-"
                                                          onClick={null}
                                                          placeholder="Select..."
                                                          value={
                                                            Object {
                                                              "label": "Path",
                                                              "value": "path",
                                                            }
                                                          }
                                                        >
                                                          <div
                                                            className="Select-value"
                                                          >
                                                            <span
                                                              aria-selected="true"
                                                              className="Select-value-label"
                                                              id="react-select-2--value-item"
                                                              role="option"
                                                            >
                                                              Path
                                                            </span>
                                                          </div>
                                                        </Value>
                                                        <AutosizeInput
                                                          aria-activedescendant="react-select-2--value"
                                                          aria-expanded="false"
                                                          aria-haspopup="false"
                                                          aria-owns=""
                                                          className="Select-input"
                                                          id="id-select-type"
                                                          injectStyles={true}
                                                          minWidth="5"
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onFocus={[Function]}
                                                          required={false}
                                                          role="combobox"
                                                          value=""
                                                        >
                                                          <div
                                                            className="Select-input"
                                                            style={
                                                              Object {
                                                                "display": "inline-block",
                                                              }
                                                            }
                                                          >
                                                            <input
                                                              aria-activedescendant="react-select-2--value"
                                                              aria-expanded="false"
                                                              aria-haspopup="false"
                                                              aria-owns=""
                                                              id="id-select-type"
                                                              onBlur={[Function]}
                                                              onChange={[Function]}
                                                              onFocus={[Function]}
                                                              required={false}
                                                              role="combobox"
                                                              style={
                                                                Object {
                                                                  "boxSizing": "content-box",
                                                                  "width": "5px",
                                                                }
                                                              }
                                                              value=""
                                                            />
                                                            <div
                                                              style={
                                                                Object {
                                                                  "height": 0,
                                                                  "left": 0,
                                                                  "overflow": "scroll",
                                                                  "position": "absolute",
                                                                  "top": 0,
                                                                  "visibility": "hidden",
                                                                  "whiteSpace": "pre",
                                                                }
                                                              }
                                                            />
                                                          </div>
                                                        </AutosizeInput>
                                                      </div>
                                                      <span
                                                        className="Select-arrow-zone"
                                                        onMouseDown={[Function]}
                                                      >
                                                        <StyledIconChevron
                                                          direction="down"
                                                          size="xs"
                                                        >
                                                          <IconChevron
                                                            className="css-1y21wp1-StyledIconChevron e1ynsgsr1"
                                                            direction="down"
                                                            size="xs"
                                                          >
                                                            <EmotionCssPropInternal
                                                              __EMOTION_LABEL_PLEASE_DO_NOT_USE__="IconChevron"
                                                              __EMOTION_TYPE_PLEASE_DO_NOT_USE__={
                                                                Object {
                                                                  "$$typeof": Symbol(react.forward_ref),
                                                                  "propTypes": Object {
                                                                    "color": [Function],
                                                                    "size": [Function],
                                                                    "viewBox": [Function],
                                                                  },
                                                                  "render": [Function],
                                                                }
                                                              }
                                                              className="css-1y21wp1-StyledIconChevron e1ynsgsr1"
                                                              css={
                                                                Object {
                                                                  "map": undefined,
                                                                  "name": "7chgxg-IconChevron",
                                                                  "next": undefined,
                                                                  "styles": "transform:rotate(180deg);;label:IconChevron;",
                                                                  "toString": [Function],
                                                                }
                                                              }
                                                              size="xs"
                                                            >
                                                              <ForwardRef(SvgIcon)
                                                                className="e1ynsgsr1 css-7arx5j-IconChevron-StyledIconChevron"
                                                                size="xs"
                                                              >
                                                                <svg
                                                                  className="e1ynsgsr1 css-7arx5j-IconChevron-StyledIconChevron"
                                                                  fill="currentColor"
                                                                  height="12px"
                                                                  viewBox="0 0 16 16"
                                                                  width="12px"
                                                                >
                                                                  <path
                                                                    d="M14,11.75a.74.74,0,0,1-.53-.22L8,6.06,2.53,11.53a.75.75,0,0,1-1.06-1.06l6-6a.75.75,0,0,1,1.06,0l6,6a.75.75,0,0,1,0,1.06A.74.74,0,0,1,14,11.75Z"
                                                                  />
                                                                </svg>
                                                              </ForwardRef(SvgIcon)>
                                                            </EmotionCssPropInternal>
                                                          </IconChevron>
                                                        </StyledIconChevron>
                                                      </span>
                                                    </div>
                                                  </div>
                                                </Select>
                                              </SelectPicker>
                                            </StyledSelect>
                                          </SelectControlLegacy>
                                        </SelectControl>
                                      </ForwardRef(RefForwardedSelectControl)>
                                    </StyledSelectControl>
                                  </div>
                                </div>
                              </SelectField>
                            </BuilderSelect>
                            <BuilderInput
                              controlled={true}
                              disabled={false}
                              onChange={[Function]}
                              placeholder="src/example/*"
                              value=""
                            >
                              <input
                                className="css-dcbptt-Input-BuilderInput e1hyuoc77"
                                disabled={false}
                                onChange={[Function]}
                                placeholder="src/example/*"
                                value=""
                              />
                            </BuilderInput>
                            <Divider
                              direction="right"
                            >
                              <IconChevron
                                className="css-1tfw4ao-Divider e1hyuoc79"
                                direction="right"
                              >
                                <EmotionCssPropInternal
                                  __EMOTION_LABEL_PLEASE_DO_NOT_USE__="IconChevron"
                                  __EMOTION_TYPE_PLEASE_DO_NOT_USE__={
                                    Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "propTypes": Object {
                                        "color": [Function],
                                        "size": [Function],
                                        "viewBox": [Function],
                                      },
                                      "render": [Function],
                                    }
                                  }
                                  className="css-1tfw4ao-Divider e1hyuoc79"
                                  css={
                                    Object {
                                      "map": undefined,
                                      "name": "72rehw-IconChevron",
                                      "next": undefined,
                                      "styles": "transform:rotate(90deg);;label:IconChevron;",
                                      "toString": [Function],
                                    }
                                  }
                                >
                                  <ForwardRef(SvgIcon)
                                    className="e1hyuoc79 css-1uo1iiq-IconChevron-Divider"
                                  >
                                    <svg
                                      className="e1hyuoc79 css-1uo1iiq-IconChevron-Divider"
                                      fill="currentColor"
                                      height="16px"
                                      viewBox="0 0 16 16"
                                      width="16px"
                                    >
                                      <path
                                        d="M14,11.75a.74.74,0,0,1-.53-.22L8,6.06,2.53,11.53a.75.75,0,0,1-1.06-1.06l6-6a.75.75,0,0,1,1.06,0l6,6a.75.75,0,0,1,0,1.06A.74.74,0,0,1,14,11.75Z"
                                      />
                                    </svg>
                                  </ForwardRef(SvgIcon)>
                                </EmotionCssPropInternal>
                              </IconChevron>
                            </Divider>
                            <SelectOwnersWrapper>
                              <div
                                className="css-1518iv7-SelectOwnersWrapper e1hyuoc710"
                              >
                                <SelectOwners
                                  disabled={false}
                                  onChange={[Function]}
                                  organization={
                                    Object {
                                      "access": Array [
                                        "org:read",
                                        "org:write",
                                        "org:admin",
                                        "org:integrations",
                                        "project:read",
                                        "project:write",
                                        "project:admin",
                                        "team:read",
                                        "team:write",
                                        "team:admin",
                                      ],
                                      "experiments": Object {},
                                      "features": Array [],
                                      "id": "3",
                                      "name": "Organization Name",
                                      "onboardingTasks": Array [],
                                      "projects": Array [],
                                      "scrapeJavaScript": true,
                                      "slug": "org-slug",
                                      "status": Object {
                                        "id": "active",
                                        "name": "active",
                                      },
                                      "teams": Array [],
                                    }
                                  }
                                  project={
                                    Object {
                                      "allowedDomains": Array [
                                        "example.com",
                                        "https://example.com",
                                      ],
                                      "dataScrubber": false,
                                      "dataScrubberDefaults": false,
                                      "digestsMaxDelay": 60,
                                      "digestsMinDelay": 5,
                                      "environments": Array [],
                                      "features": Array [],
                                      "hasAccess": true,
                                      "id": "2",
                                      "isBookmarked": false,
                                      "isMember": true,
                                      "name": "Project Name",
                                      "resolveAge": 48,
                                      "safeFields": Array [
                                        "business-email",
                                        "company",
                                      ],
                                      "scrapeJavaScript": true,
                                      "scrubIPAddresses": false,
                                      "securityToken": "security-token",
                                      "securityTokenHeader": "x-security-header",
                                      "sensitiveFields": Array [
                                        "creditcard",
                                        "ssn",
                                      ],
                                      "slug": "project-slug",
                                      "storeCrashReports": false,
                                      "subjectPrefix": "[my-org]",
                                      "subjectTemplate": "[$project] \${tag:level}: $title",
                                      "teams": Array [],
                                      "verifySSL": true,
                                    }
                                  }
                                  value={Array []}
                                >
                                  <EmotionCssPropInternal
                                    __EMOTION_TYPE_PLEASE_DO_NOT_USE__={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "render": [Function],
                                      }
                                    }
                                    async={true}
                                    cache={false}
                                    clearable={true}
                                    css={
                                      Object {
                                        "name": "fs1hps-SelectOwners",
                                        "styles": "width:200px;;label:SelectOwners;",
                                      }
                                    }
                                    defaultOptions={true}
                                    deprecatedSelectControl={true}
                                    disabled={false}
                                    filterOptions={[Function]}
                                    loadOptions={[Function]}
                                    onChange={[Function]}
                                    onInputChange={[Function]}
                                    placeholder="owners"
                                    value={Array []}
                                    valueComponent={[Function]}
                                  >
                                    <ForwardRef(MultiSelectControl)
                                      async={true}
                                      cache={false}
                                      className="css-fs1hps-SelectOwners"
                                      clearable={true}
                                      defaultOptions={true}
                                      deprecatedSelectControl={true}
                                      disabled={false}
                                      filterOptions={[Function]}
                                      loadOptions={[Function]}
                                      onChange={[Function]}
                                      onInputChange={[Function]}
                                      placeholder="owners"
                                      value={Array []}
                                      valueComponent={[Function]}
                                    >
                                      <ForwardRef(RefForwardedSelectControl)
                                        async={true}
                                        cache={false}
                                        className="css-fs1hps-SelectOwners"
                                        clearable={true}
                                        defaultOptions={true}
                                        deprecatedSelectControl={true}
                                        disabled={false}
                                        filterOptions={[Function]}
                                        forwardedRef={[Function]}
                                        loadOptions={[Function]}
                                        multiple={true}
                                        onChange={[Function]}
                                        onInputChange={[Function]}
                                        placeholder="owners"
                                        value={Array []}
                                        valueComponent={[Function]}
                                      >
                                        <SelectControl
                                          async={true}
                                          cache={false}
                                          className="css-fs1hps-SelectOwners"
                                          clearable={true}
                                          defaultOptions={true}
                                          deprecatedSelectControl={true}
                                          disabled={false}
                                          filterOptions={[Function]}
                                          forwardedRef={[Function]}
                                          loadOptions={[Function]}
                                          multiple={true}
                                          onChange={[Function]}
                                          onInputChange={[Function]}
                                          placeholder="owners"
                                          value={Array []}
                                          valueComponent={[Function]}
                                        >
                                          <SelectControlLegacy
                                            async={true}
                                            cache={false}
                                            className="css-fs1hps-SelectOwners"
                                            clearable={true}
                                            defaultOptions={true}
                                            disabled={false}
                                            filterOptions={[Function]}
                                            forwardedRef={[Function]}
                                            height={36}
                                            loadOptions={[Function]}
                                            multiple={true}
                                            onChange={[Function]}
                                            onInputChange={[Function]}
                                            placeholder="owners"
                                            value={Array []}
                                            valueComponent={[Function]}
                                          >
                                            <StyledSelect
                                              arrowRenderer={[Function]}
                                              async={true}
                                              backspaceRemoves={true}
                                              cache={false}
                                              className="css-fs1hps-SelectOwners"
                                              clearable={true}
                                              defaultOptions={true}
                                              deleteRemoves={true}
                                              disabled={false}
                                              filterOptions={[Function]}
                                              forwardedRef={[Function]}
                                              height={36}
                                              loadOptions={[Function]}
                                              multi={true}
                                              multiple={true}
                                              onChange={[Function]}
                                              onInputChange={[Function]}
                                              placeholder="owners"
                                              value={Array []}
                                              valueComponent={[Function]}
                                            >
                                              <SelectPicker
                                                arrowRenderer={[Function]}
                                                async={true}
                                                backspaceRemoves={true}
                                                cache={false}
                                                className="css-1p79jy6-StyledSelect-SelectOwners e1ynsgsr0"
                                                clearable={true}
                                                defaultOptions={true}
                                                deleteRemoves={true}
                                                disabled={false}
                                                filterOptions={[Function]}
                                                forwardedRef={[Function]}
                                                height={36}
                                                loadOptions={[Function]}
                                                multi={true}
                                                multiple={true}
                                                onChange={[Function]}
                                                onInputChange={[Function]}
                                                placeholder="owners"
                                                value={Array []}
                                                valueComponent={[Function]}
                                              >
                                                <Async
                                                  arrowRenderer={[Function]}
                                                  autoload={true}
                                                  backspaceRemoves={true}
                                                  cache={false}
                                                  className="css-1p79jy6-StyledSelect-SelectOwners e1ynsgsr0"
                                                  clearable={true}
                                                  defaultOptions={true}
                                                  deleteRemoves={true}
                                                  disabled={false}
                                                  filterOptions={[Function]}
                                                  height={36}
                                                  ignoreAccents={true}
                                                  ignoreCase={true}
                                                  loadOptions={[Function]}
                                                  loadingPlaceholder="Loading..."
                                                  multi={true}
                                                  multiple={true}
                                                  onChange={[Function]}
                                                  onInputChange={[Function]}
                                                  options={Array []}
                                                  placeholder="owners"
                                                  searchPromptText="Type to search"
                                                  value={Array []}
                                                  valueComponent={[Function]}
                                                >
                                                  <Select
                                                    arrowRenderer={[Function]}
                                                    autoload={true}
                                                    autosize={true}
                                                    backspaceRemoves={true}
                                                    backspaceToRemoveMessage="Press backspace to remove {label}"
                                                    cache={false}
                                                    className="css-1p79jy6-StyledSelect-SelectOwners e1ynsgsr0"
                                                    clearAllText="Clear all"
                                                    clearRenderer={[Function]}
                                                    clearValueText="Clear value"
                                                    clearable={true}
                                                    closeOnSelect={true}
                                                    defaultOptions={true}
                                                    deleteRemoves={true}
                                                    delimiter=","
                                                    disabled={false}
                                                    escapeClearsValue={true}
                                                    filterOptions={[Function]}
                                                    height={36}
                                                    ignoreAccents={true}
                                                    ignoreCase={true}
                                                    inputProps={Object {}}
                                                    isLoading={true}
                                                    joinValues={false}
                                                    labelKey="label"
                                                    loadOptions={[Function]}
                                                    loadingPlaceholder="Loading..."
                                                    matchPos="any"
                                                    matchProp="any"
                                                    menuBuffer={0}
                                                    menuRenderer={[Function]}
                                                    multi={true}
                                                    multiple={true}
                                                    noResultsText="Loading..."
                                                    onBlurResetsInput={true}
                                                    onChange={[Function]}
                                                    onCloseResetsInput={true}
                                                    onInputChange={[Function]}
                                                    onSelectResetsInput={true}
                                                    openOnClick={true}
                                                    optionComponent={[Function]}
                                                    options={Array []}
                                                    pageSize={5}
                                                    placeholder="Loading..."
                                                    removeSelected={true}
                                                    required={false}
                                                    rtl={false}
                                                    scrollMenuIntoView={true}
                                                    searchPromptText="Type to search"
                                                    searchable={true}
                                                    simpleValue={false}
                                                    tabSelectsValue={true}
                                                    trimFilter={true}
                                                    value={Array []}
                                                    valueComponent={[Function]}
                                                    valueKey="value"
                                                  >
                                                    <div
                                                      className="Select css-1p79jy6-StyledSelect-SelectOwners e1ynsgsr0 is-clearable is-loading is-searchable Select--multi"
                                                    >
                                                      <div
                                                        className="Select-control"
                                                        onKeyDown={[Function]}
                                                        onMouseDown={[Function]}
                                                        onTouchEnd={[Function]}
                                                        onTouchMove={[Function]}
                                                        onTouchStart={[Function]}
                                                      >
                                                        <div
                                                          className="Select-multi-value-wrapper"
                                                          id="react-select-3--value"
                                                        >
                                                          <div
                                                            className="Select-placeholder"
                                                          >
                                                            Loading...
                                                          </div>
                                                          <AutosizeInput
                                                            aria-activedescendant="react-select-3--value"
                                                            aria-expanded="false"
                                                            aria-haspopup="false"
                                                            aria-owns=""
                                                            className="Select-input"
                                                            injectStyles={true}
                                                            minWidth="5"
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocus={[Function]}
                                                            required={false}
                                                            role="combobox"
                                                            value=""
                                                          >
                                                            <div
                                                              className="Select-input"
                                                              style={
                                                                Object {
                                                                  "display": "inline-block",
                                                                }
                                                              }
                                                            >
                                                              <input
                                                                aria-activedescendant="react-select-3--value"
                                                                aria-expanded="false"
                                                                aria-haspopup="false"
                                                                aria-owns=""
                                                                onBlur={[Function]}
                                                                onChange={[Function]}
                                                                onFocus={[Function]}
                                                                required={false}
                                                                role="combobox"
                                                                style={
                                                                  Object {
                                                                    "boxSizing": "content-box",
                                                                    "width": "5px",
                                                                  }
                                                                }
                                                                value=""
                                                              />
                                                              <div
                                                                style={
                                                                  Object {
                                                                    "height": 0,
                                                                    "left": 0,
                                                                    "overflow": "scroll",
                                                                    "position": "absolute",
                                                                    "top": 0,
                                                                    "visibility": "hidden",
                                                                    "whiteSpace": "pre",
                                                                  }
                                                                }
                                                              />
                                                            </div>
                                                          </AutosizeInput>
                                                        </div>
                                                        <span
                                                          aria-hidden="true"
                                                          className="Select-loading-zone"
                                                        >
                                                          <span
                                                            className="Select-loading"
                                                          />
                                                        </span>
                                                        <span
                                                          className="Select-arrow-zone"
                                                          onMouseDown={[Function]}
                                                        >
                                                          <StyledIconChevron
                                                            direction="down"
                                                            size="xs"
                                                          >
                                                            <IconChevron
                                                              className="css-1y21wp1-StyledIconChevron e1ynsgsr1"
                                                              direction="down"
                                                              size="xs"
                                                            >
                                                              <EmotionCssPropInternal
                                                                __EMOTION_LABEL_PLEASE_DO_NOT_USE__="IconChevron"
                                                                __EMOTION_TYPE_PLEASE_DO_NOT_USE__={
                                                                  Object {
                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                    "propTypes": Object {
                                                                      "color": [Function],
                                                                      "size": [Function],
                                                                      "viewBox": [Function],
                                                                    },
                                                                    "render": [Function],
                                                                  }
                                                                }
                                                                className="css-1y21wp1-StyledIconChevron e1ynsgsr1"
                                                                css={
                                                                  Object {
                                                                    "map": undefined,
                                                                    "name": "7chgxg-IconChevron",
                                                                    "next": undefined,
                                                                    "styles": "transform:rotate(180deg);;label:IconChevron;",
                                                                    "toString": [Function],
                                                                  }
                                                                }
                                                                size="xs"
                                                              >
                                                                <ForwardRef(SvgIcon)
                                                                  className="e1ynsgsr1 css-7arx5j-IconChevron-StyledIconChevron"
                                                                  size="xs"
                                                                >
                                                                  <svg
                                                                    className="e1ynsgsr1 css-7arx5j-IconChevron-StyledIconChevron"
                                                                    fill="currentColor"
                                                                    height="12px"
                                                                    viewBox="0 0 16 16"
                                                                    width="12px"
                                                                  >
                                                                    <path
                                                                      d="M14,11.75a.74.74,0,0,1-.53-.22L8,6.06,2.53,11.53a.75.75,0,0,1-1.06-1.06l6-6a.75.75,0,0,1,1.06,0l6,6a.75.75,0,0,1,0,1.06A.74.74,0,0,1,14,11.75Z"
                                                                    />
                                                                  </svg>
                                                                </ForwardRef(SvgIcon)>
                                                              </EmotionCssPropInternal>
                                                            </IconChevron>
                                                          </StyledIconChevron>
                                                        </span>
                                                      </div>
                                                    </div>
                                                  </Select>
                                                </Async>
                                              </SelectPicker>
                                            </StyledSelect>
                                          </SelectControlLegacy>
                                        </SelectControl>
                                      </ForwardRef(RefForwardedSelectControl)>
                                    </ForwardRef(MultiSelectControl)>
                                  </EmotionCssPropInternal>
                                </SelectOwners>
                              </div>
                            </SelectOwnersWrapper>
                            <AddButton
                              disabled={true}
                              icon={
                                <ForwardRef(IconAdd)
                                  isCircled={true}
                                  size="xs"
                                />
                              }
                              onClick={[Function]}
                              priority="primary"
                              size="small"
                            >
                              <forwardRef<Button>
                                className="css-f6y09s-AddButton e1hyuoc711"
                                disabled={true}
                                icon={
                                  <ForwardRef(IconAdd)
                                    isCircled={true}
                                    size="xs"
                                  />
                                }
                                onClick={[Function]}
                                priority="primary"
                                size="small"
                              >
                                <Button
                                  align="center"
                                  className="css-f6y09s-AddButton e1hyuoc711"
                                  disabled={true}
                                  forwardRef={null}
                                  icon={
                                    <ForwardRef(IconAdd)
                                      isCircled={true}
                                      size="xs"
                                    />
                                  }
                                  onClick={[Function]}
                                  priority="primary"
                                  size="small"
                                >
                                  <StyledButton
                                    aria-disabled={true}
                                    className="css-f6y09s-AddButton e1hyuoc711"
                                    disabled={true}
                                    forwardRef={null}
                                    onClick={[Function]}
                                    priority="primary"
                                    role="button"
                                    size="small"
                                  >
                                    <Component
                                      aria-disabled={true}
                                      className="e1hyuoc711 css-10s1rks-StyledButton-AddButton edwq9my0"
                                      forwardRef={null}
                                      onClick={[Function]}
                                      role="button"
                                      size="small"
                                    >
                                      <button
                                        aria-disabled={true}
                                        className="e1hyuoc711 css-10s1rks-StyledButton-AddButton edwq9my0"
                                        onClick={[Function]}
                                        role="button"
                                        size="small"
                                      >
                                        <ButtonLabel
                                          align="center"
                                          priority="primary"
                                          size="small"
                                        >
                                          <span
                                            className="css-n7mdnv-ButtonLabel edwq9my1"
                                          >
                                            <Icon
                                              hasChildren={false}
                                              size="small"
                                            >
                                              <span
                                                className="css-dm7gfi-Icon edwq9my2"
                                                size="small"
                                              >
                                                <IconAdd
                                                  isCircled={true}
                                                  size="xs"
                                                >
                                                  <ForwardRef(SvgIcon)
                                                    size="xs"
                                                  >
                                                    <svg
                                                      fill="currentColor"
                                                      height="12px"
                                                      viewBox="0 0 16 16"
                                                      width="12px"
                                                    >
                                                      <path
                                                        d="M11.28,8.75H4.72a.75.75,0,1,1,0-1.5h6.56a.75.75,0,1,1,0,1.5Z"
                                                      />
                                                      <path
                                                        d="M8,12a.76.76,0,0,1-.75-.75V4.72a.75.75,0,0,1,1.5,0v6.56A.76.76,0,0,1,8,12Z"
                                                      />
                                                      <path
                                                        d="M8,16a8,8,0,1,1,8-8A8,8,0,0,1,8,16ZM8,1.53A6.47,6.47,0,1,0,14.47,8,6.47,6.47,0,0,0,8,1.53Z"
                                                      />
                                                    </svg>
                                                  </ForwardRef(SvgIcon)>
                                                </IconAdd>
                                              </span>
                                            </Icon>
                                          </span>
                                        </ButtonLabel>
                                      </button>
                                    </Component>
                                  </StyledButton>
                                </Button>
                              </forwardRef<Button>>
                            </AddButton>
                          </div>
                        </BuilderBar>
                      </RuleBuilder>
                      <div
                        onKeyDown={[Function]}
                        style={
                          Object {
                            "position": "relative",
                          }
                        }
                      >
                        <StyledTextArea
                          autoCapitalize="off"
                          autoComplete="off"
                          autoCorrect="off"
                          disabled={false}
                          onChange={[Function]}
                          placeholder="#example usage
path:src/example/pipeline/* person@sentry.io #infra
url:http://example.com/settings/* #product
tags.sku_class:enterprise #enterprise"
                          spellCheck="false"
                          value="url:src @dummy@example.com"
                        >
                          <ForwardRef
                            autoCapitalize="off"
                            autoComplete="off"
                            autoCorrect="off"
                            className="css-1ws5ptf-StyledTextArea en3n9di3"
                            disabled={false}
                            onChange={[Function]}
                            placeholder="#example usage
path:src/example/pipeline/* person@sentry.io #infra
url:http://example.com/settings/* #product
tags.sku_class:enterprise #enterprise"
                            spellCheck="false"
                            value="url:src @dummy@example.com"
                          >
                            <TextareaAutosizeClass
                              async={false}
                              autoCapitalize="off"
                              autoComplete="off"
                              autoCorrect="off"
                              className="css-1ws5ptf-StyledTextArea en3n9di3"
                              disabled={false}
                              innerRef={null}
                              onChange={[Function]}
                              placeholder="#example usage
path:src/example/pipeline/* person@sentry.io #infra
url:http://example.com/settings/* #product
tags.sku_class:enterprise #enterprise"
                              rows={1}
                              spellCheck="false"
                              value="url:src @dummy@example.com"
                            >
                              <textarea
                                async={false}
                                autoCapitalize="off"
                                autoComplete="off"
                                autoCorrect="off"
                                className="css-1ws5ptf-StyledTextArea en3n9di3"
                                disabled={false}
                                onChange={[Function]}
                                placeholder="#example usage
path:src/example/pipeline/* person@sentry.io #infra
url:http://example.com/settings/* #product
tags.sku_class:enterprise #enterprise"
                                rows={1}
                                spellCheck="false"
                                value="url:src @dummy@example.com"
                              />
                            </TextareaAutosizeClass>
                          </ForwardRef>
                        </StyledTextArea>
                        <ActionBar>
                          <div
                            className="css-hgonoe-ActionBar en3n9di0"
                          >
                            <div />
                            <SaveButton>
                              <div
                                className="css-q90es8-SaveButton en3n9di2"
                              >
                                <forwardRef<Button>
                                  disabled={true}
                                  onClick={[Function]}
                                  priority="primary"
                                  size="small"
                                >
                                  <Button
                                    align="center"
                                    disabled={true}
                                    forwardRef={null}
                                    onClick={[Function]}
                                    priority="primary"
                                    size="small"
                                  >
                                    <StyledButton
                                      aria-disabled={true}
                                      aria-label="Save Changes"
                                      disabled={true}
                                      forwardRef={null}
                                      onClick={[Function]}
                                      priority="primary"
                                      role="button"
                                      size="small"
                                    >
                                      <Component
                                        aria-disabled={true}
                                        aria-label="Save Changes"
                                        className="css-1a2o3lm-StyledButton edwq9my0"
                                        forwardRef={null}
                                        onClick={[Function]}
                                        role="button"
                                        size="small"
                                      >
                                        <button
                                          aria-disabled={true}
                                          aria-label="Save Changes"
                                          className="css-1a2o3lm-StyledButton edwq9my0"
                                          onClick={[Function]}
                                          role="button"
                                          size="small"
                                        >
                                          <ButtonLabel
                                            align="center"
                                            priority="primary"
                                            size="small"
                                          >
                                            <span
                                              className="css-n7mdnv-ButtonLabel edwq9my1"
                                            >
                                              Save Changes
                                            </span>
                                          </ButtonLabel>
                                        </button>
                                      </Component>
                                    </StyledButton>
                                  </Button>
                                </forwardRef<Button>>
                              </div>
                            </SaveButton>
                          </div>
                        </ActionBar>
                      </div>
                    </OwnerInput>
                  </div>
                </FlexBox>
              </PanelBody>
            </div>
          </Component>
        </Panel>
        <Form
          allowUndo={false}
          apiEndpoint="/projects/org-slug/project-slug/ownership/"
          apiMethod="PUT"
          cancelLabel="Cancel"
          className="form-stacked"
          hideFooter={true}
          initialData={
            Object {
              "fallthrough": "false",
            }
          }
          requireChanges={false}
          saveOnBlur={true}
          submitDisabled={false}
          submitLabel="Save Changes"
          submitPriority="primary"
        >
          <form
            className="form-stacked"
            onSubmit={[Function]}
          >
            <div>
              <JsonForm
                additionalFieldProps={Object {}}
                forms={
                  Array [
                    Object {
                      "fields": Array [
                        Object {
                          "disabled": false,
                          "help": "Issue owners will receive notifications for issues they are responsible for.",
                          "label": "All users with access to this project are issue owners",
                          "name": "fallthrough",
                          "type": "boolean",
                        },
                      ],
                      "title": "If ownership cannot be determined for an issue...",
                    },
                  ]
                }
              >
                <Styled(div)>
                  <div
                    className="css-vurnku"
                  >
                    <FormPanel
                      additionalFieldProps={Object {}}
                      fields={
                        Array [
                          Object {
                            "disabled": false,
                            "help": "Issue owners will receive notifications for issues they are responsible for.",
                            "label": "All users with access to this project are issue owners",
                            "name": "fallthrough",
                            "type": "boolean",
                          },
                        ]
                      }
                      title="If ownership cannot be determined for an issue..."
                    >
                      <Panel
                        id="If-ownership-cannot-be-determined-for-an-issue..."
                      >
                        <Component
                          className="css-ietoyz-Panel e119nu470"
                          id="If-ownership-cannot-be-determined-for-an-issue..."
                        >
                          <div
                            className="css-ietoyz-Panel e119nu470"
                            id="If-ownership-cannot-be-determined-for-an-issue..."
                          >
                            <PanelHeader>
                              <div
                                className="css-pi486d-PanelHeader en8g1d30"
                              >
                                If ownership cannot be determined for an issue...
                              </div>
                            </PanelHeader>
                            <PanelBody
                              flexible={false}
                              withPadding={false}
                            >
                              <FlexBox
                                withPadding={false}
                              >
                                <div
                                  className="css-1nto0rx-FlexBox e1vnwt6f0"
                                >
                                  <FieldFromConfig
                                    field={
                                      Object {
                                        "disabled": false,
                                        "help": "Issue owners will receive notifications for issues they are responsible for.",
                                        "label": "All users with access to this project are issue owners",
                                        "name": "fallthrough",
                                        "type": "boolean",
                                      }
                                    }
                                    highlighted={false}
                                    key="fallthrough"
                                  >
                                    <BooleanField
                                      disabled={false}
                                      field={[Function]}
                                      help="Issue owners will receive notifications for issues they are responsible for."
                                      highlighted={false}
                                      label="All users with access to this project are issue owners"
                                      name="fallthrough"
                                      type="boolean"
                                    >
                                      <InputField
                                        disabled={false}
                                        field={[Function]}
                                        help="Issue owners will receive notifications for issues they are responsible for."
                                        highlighted={false}
                                        label="All users with access to this project are issue owners"
                                        name="fallthrough"
                                        resetOnError={true}
                                        type="boolean"
                                      >
                                        <FormField
                                          disabled={false}
                                          field={[Function]}
                                          flexibleControlStateSize={false}
                                          help="Issue owners will receive notifications for issues they are responsible for."
                                          hideErrorMessage={false}
                                          highlighted={false}
                                          label="All users with access to this project are issue owners"
                                          name="fallthrough"
                                          resetOnError={true}
                                          type="boolean"
                                        >
                                          <Field
                                            alignRight={false}
                                            disabled={false}
                                            field={[Function]}
                                            flexibleControlStateSize={false}
                                            help="Issue owners will receive notifications for issues they are responsible for."
                                            highlighted={false}
                                            id="fallthrough"
                                            inline={true}
                                            label="All users with access to this project are issue owners"
                                            name="fallthrough"
                                            required={false}
                                            resetOnError={true}
                                            showHelpInTooltip={false}
                                            type="boolean"
                                            visible={true}
                                          >
                                            <FieldWrapper
                                              hasControlState={true}
                                              highlighted={false}
                                              inline={true}
                                            >
                                              <div
                                                className="css-zwp5he-FieldWrapper-FieldWrapper e2iyls20"
                                              >
                                                <FieldDescription
                                                  htmlFor="fallthrough"
                                                  inline={true}
                                                >
                                                  <label
                                                    className="css-boiybi-FieldDescription e3z18c30"
                                                    htmlFor="fallthrough"
                                                  >
                                                    <FieldLabel
                                                      disabled={false}
                                                    >
                                                      <div
                                                        className="css-wufuns-FieldLabel e16ushrl0"
                                                      >
                                                        <span>
                                                          All users with access to this project are issue owners
                                                        </span>
                                                      </div>
                                                    </FieldLabel>
                                                    <FieldHelp
                                                      inline={true}
                                                    >
                                                      <div
                                                        className="css-1ooulq2-FieldHelp e54sr8f0"
                                                      >
                                                        Issue owners will receive notifications for issues they are responsible for.
                                                      </div>
                                                    </FieldHelp>
                                                  </label>
                                                </FieldDescription>
                                                <FieldControl
                                                  alignRight={false}
                                                  controlState={
                                                    <FormFieldControlState
                                                      model={
                                                        FormModel {
                                                          "api": Client {
                                                            "_chain": [Function],
                                                            "_wrapRequest": [Function],
                                                            "bulkUpdate": [Function],
                                                            "handleRequestError": [Function],
                                                            "hasProjectBeenRenamed": [Function],
                                                          },
                                                          "errors": Object {},
                                                          "fieldDescriptor": Map {
                                                            "fallthrough" => Object {
                                                              "access": undefined,
                                                              "children": [Function],
                                                              "className": undefined,
                                                              "disabled": false,
                                                              "features": undefined,
                                                              "field": [Function],
                                                              "flexibleControlStateSize": false,
                                                              "help": "Issue owners will receive notifications for issues they are responsible for.",
                                                              "hideErrorMessage": false,
                                                              "highlighted": false,
                                                              "label": "All users with access to this project are issue owners",
                                                              "name": "fallthrough",
                                                              "resetOnError": true,
                                                              "type": "boolean",
                                                            },
                                                          },
                                                          "fieldState": Object {},
                                                          "fields": Object {
                                                            "fallthrough": "false",
                                                          },
                                                          "formErrors": undefined,
                                                          "formState": undefined,
                                                          "initialData": Object {
                                                            "fallthrough": "false",
                                                          },
                                                          "options": Object {
                                                            "allowUndo": false,
                                                            "apiEndpoint": "/projects/org-slug/project-slug/ownership/",
                                                            "apiMethod": "PUT",
                                                            "onFieldChange": undefined,
                                                            "onSubmitError": undefined,
                                                            "onSubmitSuccess": undefined,
                                                            "resetOnError": undefined,
                                                            "saveOnBlur": true,
                                                          },
                                                          "snapshots": Array [
                                                            Map {
                                                              "fallthrough" => "false",
                                                            },
                                                          ],
                                                        }
                                                      }
                                                      name="fallthrough"
                                                    />
                                                  }
                                                  disabled={false}
                                                  errorState={
                                                    <Observer>
                                                      [Function]
                                                    </Observer>
                                                  }
                                                  flexibleControlStateSize={false}
                                                  inline={true}
                                                >
                                                  <FieldControlErrorWrapper
                                                    inline={true}
                                                  >
                                                    <div
                                                      className="css-qe5fr0-FieldControlErrorWrapper e12jpfuq0"
                                                    >
                                                      <FieldControlWrapper>
                                                        <div
                                                          className="css-1evsibf-FieldControlWrapper e12jpfuq2"
                                                        >
                                                          <FieldControlStyled
                                                            alignRight={false}
                                                          >
                                                            <div
                                                              className="css-ld1e0a-FieldControlStyled e12jpfuq1"
                                                            >
                                                              <Observer>
                                                                <ForwardRef
                                                                  error={false}
                                                                  field={[Function]}
                                                                  help="Issue owners will receive notifications for issues they are responsible for."
                                                                  highlighted={false}
                                                                  id="fallthrough"
                                                                  initialData={
                                                                    Object {
                                                                      "fallthrough": "false",
                                                                    }
                                                                  }
                                                                  isActive={true}
                                                                  isDisabled={false}
                                                                  label="All users with access to this project are issue owners"
                                                                  model={
                                                                    FormModel {
                                                                      "api": Client {
                                                                        "_chain": [Function],
                                                                        "_wrapRequest": [Function],
                                                                        "bulkUpdate": [Function],
                                                                        "handleRequestError": [Function],
                                                                        "hasProjectBeenRenamed": [Function],
                                                                      },
                                                                      "errors": Object {},
                                                                      "fieldDescriptor": Map {
                                                                        "fallthrough" => Object {
                                                                          "access": undefined,
                                                                          "children": [Function],
                                                                          "className": undefined,
                                                                          "disabled": false,
                                                                          "features": undefined,
                                                                          "field": [Function],
                                                                          "flexibleControlStateSize": false,
                                                                          "help": "Issue owners will receive notifications for issues they are responsible for.",
                                                                          "hideErrorMessage": false,
                                                                          "highlighted": false,
                                                                          "label": "All users with access to this project are issue owners",
                                                                          "name": "fallthrough",
                                                                          "resetOnError": true,
                                                                          "type": "boolean",
                                                                        },
                                                                      },
                                                                      "fieldState": Object {},
                                                                      "fields": Object {
                                                                        "fallthrough": "false",
                                                                      },
                                                                      "formErrors": undefined,
                                                                      "formState": undefined,
                                                                      "initialData": Object {
                                                                        "fallthrough": "false",
                                                                      },
                                                                      "options": Object {
                                                                        "allowUndo": false,
                                                                        "apiEndpoint": "/projects/org-slug/project-slug/ownership/",
                                                                        "apiMethod": "PUT",
                                                                        "onFieldChange": undefined,
                                                                        "onSubmitError": undefined,
                                                                        "onSubmitSuccess": undefined,
                                                                        "resetOnError": undefined,
                                                                        "saveOnBlur": true,
                                                                      },
                                                                      "snapshots": Array [
                                                                        Map {
                                                                          "fallthrough" => "false",
                                                                        },
                                                                      ],
                                                                    }
                                                                  }
                                                                  name="fallthrough"
                                                                  onKeyDown={[Function]}
                                                                  resetOnError={true}
                                                                  size="lg"
                                                                  toggle={[Function]}
                                                                  type="boolean"
                                                                >
                                                                  <Switch
                                                                    error={false}
                                                                    field={[Function]}
                                                                    forwardRef={[Function]}
                                                                    help="Issue owners will receive notifications for issues they are responsible for."
                                                                    highlighted={false}
                                                                    id="fallthrough"
                                                                    initialData={
                                                                      Object {
                                                                        "fallthrough": "false",
                                                                      }
                                                                    }
                                                                    isActive={true}
                                                                    isDisabled={false}
                                                                    label="All users with access to this project are issue owners"
                                                                    model={
                                                                      FormModel {
                                                                        "api": Client {
                                                                          "_chain": [Function],
                                                                          "_wrapRequest": [Function],
                                                                          "bulkUpdate": [Function],
                                                                          "handleRequestError": [Function],
                                                                          "hasProjectBeenRenamed": [Function],
                                                                        },
                                                                        "errors": Object {},
                                                                        "fieldDescriptor": Map {
                                                                          "fallthrough" => Object {
                                                                            "access": undefined,
                                                                            "children": [Function],
                                                                            "className": undefined,
                                                                            "disabled": false,
                                                                            "features": undefined,
                                                                            "field": [Function],
                                                                            "flexibleControlStateSize": false,
                                                                            "help": "Issue owners will receive notifications for issues they are responsible for.",
                                                                            "hideErrorMessage": false,
                                                                            "highlighted": false,
                                                                            "label": "All users with access to this project are issue owners",
                                                                            "name": "fallthrough",
                                                                            "resetOnError": true,
                                                                            "type": "boolean",
                                                                          },
                                                                        },
                                                                        "fieldState": Object {},
                                                                        "fields": Object {
                                                                          "fallthrough": "false",
                                                                        },
                                                                        "formErrors": undefined,
                                                                        "formState": undefined,
                                                                        "initialData": Object {
                                                                          "fallthrough": "false",
                                                                        },
                                                                        "options": Object {
                                                                          "allowUndo": false,
                                                                          "apiEndpoint": "/projects/org-slug/project-slug/ownership/",
                                                                          "apiMethod": "PUT",
                                                                          "onFieldChange": undefined,
                                                                          "onSubmitError": undefined,
                                                                          "onSubmitSuccess": undefined,
                                                                          "resetOnError": undefined,
                                                                          "saveOnBlur": true,
                                                                        },
                                                                        "snapshots": Array [
                                                                          Map {
                                                                            "fallthrough" => "false",
                                                                          },
                                                                        ],
                                                                      }
                                                                    }
                                                                    name="fallthrough"
                                                                    onKeyDown={[Function]}
                                                                    resetOnError={true}
                                                                    size="lg"
                                                                    toggle={[Function]}
                                                                    type="boolean"
                                                                  >
                                                                    <SwitchButton
                                                                      aria-checked={true}
                                                                      data-test-id="switch"
                                                                      id="fallthrough"
                                                                      isActive={true}
                                                                      isDisabled={false}
                                                                      name="fallthrough"
                                                                      onClick={[Function]}
                                                                      role="checkbox"
                                                                      size="lg"
                                                                      type="button"
                                                                    >
                                                                      <button
                                                                        aria-checked={true}
                                                                        className="css-1jbgjht-SwitchButton ezmyi9u0"
                                                                        data-test-id="switch"
                                                                        id="fallthrough"
                                                                        name="fallthrough"
                                                                        onClick={[Function]}
                                                                        role="checkbox"
                                                                        size="lg"
                                                                        type="button"
                                                                      >
                                                                        <Toggle
                                                                          isActive={true}
                                                                          isDisabled={false}
                                                                          size="lg"
                                                                        >
                                                                          <span
                                                                            className="css-2c6uwf-Toggle ezmyi9u1"
                                                                            size="lg"
                                                                          />
                                                                        </Toggle>
                                                                      </button>
                                                                    </SwitchButton>
                                                                  </Switch>
                                                                </ForwardRef>
                                                              </Observer>
                                                            </div>
                                                          </FieldControlStyled>
                                                          <FieldControlState
                                                            flexibleControlStateSize={false}
                                                          >
                                                            <div
                                                              className="css-1347hil-FieldControlState ep9s0su0"
                                                            >
                                                              <FormFieldControlState
                                                                model={
                                                                  FormModel {
                                                                    "api": Client {
                                                                      "_chain": [Function],
                                                                      "_wrapRequest": [Function],
                                                                      "bulkUpdate": [Function],
                                                                      "handleRequestError": [Function],
                                                                      "hasProjectBeenRenamed": [Function],
                                                                    },
                                                                    "errors": Object {},
                                                                    "fieldDescriptor": Map {
                                                                      "fallthrough" => Object {
                                                                        "access": undefined,
                                                                        "children": [Function],
                                                                        "className": undefined,
                                                                        "disabled": false,
                                                                        "features": undefined,
                                                                        "field": [Function],
                                                                        "flexibleControlStateSize": false,
                                                                        "help": "Issue owners will receive notifications for issues they are responsible for.",
                                                                        "hideErrorMessage": false,
                                                                        "highlighted": false,
                                                                        "label": "All users with access to this project are issue owners",
                                                                        "name": "fallthrough",
                                                                        "resetOnError": true,
                                                                        "type": "boolean",
                                                                      },
                                                                    },
                                                                    "fieldState": Object {},
                                                                    "fields": Object {
                                                                      "fallthrough": "false",
                                                                    },
                                                                    "formErrors": undefined,
                                                                    "formState": undefined,
                                                                    "initialData": Object {
                                                                      "fallthrough": "false",
                                                                    },
                                                                    "options": Object {
                                                                      "allowUndo": false,
                                                                      "apiEndpoint": "/projects/org-slug/project-slug/ownership/",
                                                                      "apiMethod": "PUT",
                                                                      "onFieldChange": undefined,
                                                                      "onSubmitError": undefined,
                                                                      "onSubmitSuccess": undefined,
                                                                      "resetOnError": undefined,
                                                                      "saveOnBlur": true,
                                                                    },
                                                                    "snapshots": Array [
                                                                      Map {
                                                                        "fallthrough" => "false",
                                                                      },
                                                                    ],
                                                                  }
                                                                }
                                                                name="fallthrough"
                                                              >
                                                                <Observer>
                                                                  <ControlState
                                                                    error={false}
                                                                    isSaved={null}
                                                                    isSaving={null}
                                                                  />
                                                                </Observer>
                                                              </FormFieldControlState>
                                                            </div>
                                                          </FieldControlState>
                                                        </div>
                                                      </FieldControlWrapper>
                                                      <Observer />
                                                    </div>
                                                  </FieldControlErrorWrapper>
                                                </FieldControl>
                                              </div>
                                            </FieldWrapper>
                                          </Field>
                                        </FormField>
                                      </InputField>
                                    </BooleanField>
                                  </FieldFromConfig>
                                </div>
                              </FlexBox>
                            </PanelBody>
                          </div>
                        </Component>
                      </Panel>
                    </FormPanel>
                  </div>
                </Styled(div)>
              </JsonForm>
            </div>
          </form>
        </Form>
        <Form
          allowUndo={false}
          apiEndpoint="/projects/org-slug/project-slug/ownership/"
          apiMethod="PUT"
          cancelLabel="Cancel"
          className="form-stacked"
          hideFooter={true}
          initialData={
            Object {
              "autoAssignment": "false",
            }
          }
          requireChanges={false}
          saveOnBlur={true}
          submitDisabled={false}
          submitLabel="Save Changes"
          submitPriority="primary"
        >
          <form
            className="form-stacked"
            onSubmit={[Function]}
          >
            <div>
              <JsonForm
                additionalFieldProps={Object {}}
                forms={
                  Array [
                    Object {
                      "fields": Array [
                        Object {
                          "disabled": false,
                          "help": "Issue owners will be automatically assigned.",
                          "label": "The issue is assigned to the team or user",
                          "name": "autoAssignment",
                          "type": "boolean",
                        },
                      ],
                      "title": "If a new event matches any of the ownership rules...",
                    },
                  ]
                }
              >
                <Styled(div)>
                  <div
                    className="css-vurnku"
                  >
                    <FormPanel
                      additionalFieldProps={Object {}}
                      fields={
                        Array [
                          Object {
                            "disabled": false,
                            "help": "Issue owners will be automatically assigned.",
                            "label": "The issue is assigned to the team or user",
                            "name": "autoAssignment",
                            "type": "boolean",
                          },
                        ]
                      }
                      title="If a new event matches any of the ownership rules..."
                    >
                      <Panel
                        id="If-a-new-event-matches-any-of-the-ownership-rules..."
                      >
                        <Component
                          className="css-ietoyz-Panel e119nu470"
                          id="If-a-new-event-matches-any-of-the-ownership-rules..."
                        >
                          <div
                            className="css-ietoyz-Panel e119nu470"
                            id="If-a-new-event-matches-any-of-the-ownership-rules..."
                          >
                            <PanelHeader>
                              <div
                                className="css-pi486d-PanelHeader en8g1d30"
                              >
                                If a new event matches any of the ownership rules...
                              </div>
                            </PanelHeader>
                            <PanelBody
                              flexible={false}
                              withPadding={false}
                            >
                              <FlexBox
                                withPadding={false}
                              >
                                <div
                                  className="css-1nto0rx-FlexBox e1vnwt6f0"
                                >
                                  <FieldFromConfig
                                    field={
                                      Object {
                                        "disabled": false,
                                        "help": "Issue owners will be automatically assigned.",
                                        "label": "The issue is assigned to the team or user",
                                        "name": "autoAssignment",
                                        "type": "boolean",
                                      }
                                    }
                                    highlighted={false}
                                    key="autoAssignment"
                                  >
                                    <BooleanField
                                      disabled={false}
                                      field={[Function]}
                                      help="Issue owners will be automatically assigned."
                                      highlighted={false}
                                      label="The issue is assigned to the team or user"
                                      name="autoAssignment"
                                      type="boolean"
                                    >
                                      <InputField
                                        disabled={false}
                                        field={[Function]}
                                        help="Issue owners will be automatically assigned."
                                        highlighted={false}
                                        label="The issue is assigned to the team or user"
                                        name="autoAssignment"
                                        resetOnError={true}
                                        type="boolean"
                                      >
                                        <FormField
                                          disabled={false}
                                          field={[Function]}
                                          flexibleControlStateSize={false}
                                          help="Issue owners will be automatically assigned."
                                          hideErrorMessage={false}
                                          highlighted={false}
                                          label="The issue is assigned to the team or user"
                                          name="autoAssignment"
                                          resetOnError={true}
                                          type="boolean"
                                        >
                                          <Field
                                            alignRight={false}
                                            disabled={false}
                                            field={[Function]}
                                            flexibleControlStateSize={false}
                                            help="Issue owners will be automatically assigned."
                                            highlighted={false}
                                            id="autoAssignment"
                                            inline={true}
                                            label="The issue is assigned to the team or user"
                                            name="autoAssignment"
                                            required={false}
                                            resetOnError={true}
                                            showHelpInTooltip={false}
                                            type="boolean"
                                            visible={true}
                                          >
                                            <FieldWrapper
                                              hasControlState={true}
                                              highlighted={false}
                                              inline={true}
                                            >
                                              <div
                                                className="css-zwp5he-FieldWrapper-FieldWrapper e2iyls20"
                                              >
                                                <FieldDescription
                                                  htmlFor="autoAssignment"
                                                  inline={true}
                                                >
                                                  <label
                                                    className="css-boiybi-FieldDescription e3z18c30"
                                                    htmlFor="autoAssignment"
                                                  >
                                                    <FieldLabel
                                                      disabled={false}
                                                    >
                                                      <div
                                                        className="css-wufuns-FieldLabel e16ushrl0"
                                                      >
                                                        <span>
                                                          The issue is assigned to the team or user
                                                        </span>
                                                      </div>
                                                    </FieldLabel>
                                                    <FieldHelp
                                                      inline={true}
                                                    >
                                                      <div
                                                        className="css-1ooulq2-FieldHelp e54sr8f0"
                                                      >
                                                        Issue owners will be automatically assigned.
                                                      </div>
                                                    </FieldHelp>
                                                  </label>
                                                </FieldDescription>
                                                <FieldControl
                                                  alignRight={false}
                                                  controlState={
                                                    <FormFieldControlState
                                                      model={
                                                        FormModel {
                                                          "api": Client {
                                                            "_chain": [Function],
                                                            "_wrapRequest": [Function],
                                                            "bulkUpdate": [Function],
                                                            "handleRequestError": [Function],
                                                            "hasProjectBeenRenamed": [Function],
                                                          },
                                                          "errors": Object {},
                                                          "fieldDescriptor": Map {
                                                            "autoAssignment" => Object {
                                                              "access": undefined,
                                                              "children": [Function],
                                                              "className": undefined,
                                                              "disabled": false,
                                                              "features": undefined,
                                                              "field": [Function],
                                                              "flexibleControlStateSize": false,
                                                              "help": "Issue owners will be automatically assigned.",
                                                              "hideErrorMessage": false,
                                                              "highlighted": false,
                                                              "label": "The issue is assigned to the team or user",
                                                              "name": "autoAssignment",
                                                              "resetOnError": true,
                                                              "type": "boolean",
                                                            },
                                                          },
                                                          "fieldState": Object {},
                                                          "fields": Object {
                                                            "autoAssignment": "false",
                                                          },
                                                          "formErrors": undefined,
                                                          "formState": undefined,
                                                          "initialData": Object {
                                                            "autoAssignment": "false",
                                                          },
                                                          "options": Object {
                                                            "allowUndo": false,
                                                            "apiEndpoint": "/projects/org-slug/project-slug/ownership/",
                                                            "apiMethod": "PUT",
                                                            "onFieldChange": undefined,
                                                            "onSubmitError": undefined,
                                                            "onSubmitSuccess": undefined,
                                                            "resetOnError": undefined,
                                                            "saveOnBlur": true,
                                                          },
                                                          "snapshots": Array [
                                                            Map {
                                                              "autoAssignment" => "false",
                                                            },
                                                          ],
                                                        }
                                                      }
                                                      name="autoAssignment"
                                                    />
                                                  }
                                                  disabled={false}
                                                  errorState={
                                                    <Observer>
                                                      [Function]
                                                    </Observer>
                                                  }
                                                  flexibleControlStateSize={false}
                                                  inline={true}
                                                >
                                                  <FieldControlErrorWrapper
                                                    inline={true}
                                                  >
                                                    <div
                                                      className="css-qe5fr0-FieldControlErrorWrapper e12jpfuq0"
                                                    >
                                                      <FieldControlWrapper>
                                                        <div
                                                          className="css-1evsibf-FieldControlWrapper e12jpfuq2"
                                                        >
                                                          <FieldControlStyled
                                                            alignRight={false}
                                                          >
                                                            <div
                                                              className="css-ld1e0a-FieldControlStyled e12jpfuq1"
                                                            >
                                                              <Observer>
                                                                <ForwardRef
                                                                  error={false}
                                                                  field={[Function]}
                                                                  help="Issue owners will be automatically assigned."
                                                                  highlighted={false}
                                                                  id="autoAssignment"
                                                                  initialData={
                                                                    Object {
                                                                      "autoAssignment": "false",
                                                                    }
                                                                  }
                                                                  isActive={true}
                                                                  isDisabled={false}
                                                                  label="The issue is assigned to the team or user"
                                                                  model={
                                                                    FormModel {
                                                                      "api": Client {
                                                                        "_chain": [Function],
                                                                        "_wrapRequest": [Function],
                                                                        "bulkUpdate": [Function],
                                                                        "handleRequestError": [Function],
                                                                        "hasProjectBeenRenamed": [Function],
                                                                      },
                                                                      "errors": Object {},
                                                                      "fieldDescriptor": Map {
                                                                        "autoAssignment" => Object {
                                                                          "access": undefined,
                                                                          "children": [Function],
                                                                          "className": undefined,
                                                                          "disabled": false,
                                                                          "features": undefined,
                                                                          "field": [Function],
                                                                          "flexibleControlStateSize": false,
                                                                          "help": "Issue owners will be automatically assigned.",
                                                                          "hideErrorMessage": false,
                                                                          "highlighted": false,
                                                                          "label": "The issue is assigned to the team or user",
                                                                          "name": "autoAssignment",
                                                                          "resetOnError": true,
                                                                          "type": "boolean",
                                                                        },
                                                                      },
                                                                      "fieldState": Object {},
                                                                      "fields": Object {
                                                                        "autoAssignment": "false",
                                                                      },
                                                                      "formErrors": undefined,
                                                                      "formState": undefined,
                                                                      "initialData": Object {
                                                                        "autoAssignment": "false",
                                                                      },
                                                                      "options": Object {
                                                                        "allowUndo": false,
                                                                        "apiEndpoint": "/projects/org-slug/project-slug/ownership/",
                                                                        "apiMethod": "PUT",
                                                                        "onFieldChange": undefined,
                                                                        "onSubmitError": undefined,
                                                                        "onSubmitSuccess": undefined,
                                                                        "resetOnError": undefined,
                                                                        "saveOnBlur": true,
                                                                      },
                                                                      "snapshots": Array [
                                                                        Map {
                                                                          "autoAssignment" => "false",
                                                                        },
                                                                      ],
                                                                    }
                                                                  }
                                                                  name="autoAssignment"
                                                                  onKeyDown={[Function]}
                                                                  resetOnError={true}
                                                                  size="lg"
                                                                  toggle={[Function]}
                                                                  type="boolean"
                                                                >
                                                                  <Switch
                                                                    error={false}
                                                                    field={[Function]}
                                                                    forwardRef={[Function]}
                                                                    help="Issue owners will be automatically assigned."
                                                                    highlighted={false}
                                                                    id="autoAssignment"
                                                                    initialData={
                                                                      Object {
                                                                        "autoAssignment": "false",
                                                                      }
                                                                    }
                                                                    isActive={true}
                                                                    isDisabled={false}
                                                                    label="The issue is assigned to the team or user"
                                                                    model={
                                                                      FormModel {
                                                                        "api": Client {
                                                                          "_chain": [Function],
                                                                          "_wrapRequest": [Function],
                                                                          "bulkUpdate": [Function],
                                                                          "handleRequestError": [Function],
                                                                          "hasProjectBeenRenamed": [Function],
                                                                        },
                                                                        "errors": Object {},
                                                                        "fieldDescriptor": Map {
                                                                          "autoAssignment" => Object {
                                                                            "access": undefined,
                                                                            "children": [Function],
                                                                            "className": undefined,
                                                                            "disabled": false,
                                                                            "features": undefined,
                                                                            "field": [Function],
                                                                            "flexibleControlStateSize": false,
                                                                            "help": "Issue owners will be automatically assigned.",
                                                                            "hideErrorMessage": false,
                                                                            "highlighted": false,
                                                                            "label": "The issue is assigned to the team or user",
                                                                            "name": "autoAssignment",
                                                                            "resetOnError": true,
                                                                            "type": "boolean",
                                                                          },
                                                                        },
                                                                        "fieldState": Object {},
                                                                        "fields": Object {
                                                                          "autoAssignment": "false",
                                                                        },
                                                                        "formErrors": undefined,
                                                                        "formState": undefined,
                                                                        "initialData": Object {
                                                                          "autoAssignment": "false",
                                                                        },
                                                                        "options": Object {
                                                                          "allowUndo": false,
                                                                          "apiEndpoint": "/projects/org-slug/project-slug/ownership/",
                                                                          "apiMethod": "PUT",
                                                                          "onFieldChange": undefined,
                                                                          "onSubmitError": undefined,
                                                                          "onSubmitSuccess": undefined,
                                                                          "resetOnError": undefined,
                                                                          "saveOnBlur": true,
                                                                        },
                                                                        "snapshots": Array [
                                                                          Map {
                                                                            "autoAssignment" => "false",
                                                                          },
                                                                        ],
                                                                      }
                                                                    }
                                                                    name="autoAssignment"
                                                                    onKeyDown={[Function]}
                                                                    resetOnError={true}
                                                                    size="lg"
                                                                    toggle={[Function]}
                                                                    type="boolean"
                                                                  >
                                                                    <SwitchButton
                                                                      aria-checked={true}
                                                                      data-test-id="switch"
                                                                      id="autoAssignment"
                                                                      isActive={true}
                                                                      isDisabled={false}
                                                                      name="autoAssignment"
                                                                      onClick={[Function]}
                                                                      role="checkbox"
                                                                      size="lg"
                                                                      type="button"
                                                                    >
                                                                      <button
                                                                        aria-checked={true}
                                                                        className="css-1jbgjht-SwitchButton ezmyi9u0"
                                                                        data-test-id="switch"
                                                                        id="autoAssignment"
                                                                        name="autoAssignment"
                                                                        onClick={[Function]}
                                                                        role="checkbox"
                                                                        size="lg"
                                                                        type="button"
                                                                      >
                                                                        <Toggle
                                                                          isActive={true}
                                                                          isDisabled={false}
                                                                          size="lg"
                                                                        >
                                                                          <span
                                                                            className="css-2c6uwf-Toggle ezmyi9u1"
                                                                            size="lg"
                                                                          />
                                                                        </Toggle>
                                                                      </button>
                                                                    </SwitchButton>
                                                                  </Switch>
                                                                </ForwardRef>
                                                              </Observer>
                                                            </div>
                                                          </FieldControlStyled>
                                                          <FieldControlState
                                                            flexibleControlStateSize={false}
                                                          >
                                                            <div
                                                              className="css-1347hil-FieldControlState ep9s0su0"
                                                            >
                                                              <FormFieldControlState
                                                                model={
                                                                  FormModel {
                                                                    "api": Client {
                                                                      "_chain": [Function],
                                                                      "_wrapRequest": [Function],
                                                                      "bulkUpdate": [Function],
                                                                      "handleRequestError": [Function],
                                                                      "hasProjectBeenRenamed": [Function],
                                                                    },
                                                                    "errors": Object {},
                                                                    "fieldDescriptor": Map {
                                                                      "autoAssignment" => Object {
                                                                        "access": undefined,
                                                                        "children": [Function],
                                                                        "className": undefined,
                                                                        "disabled": false,
                                                                        "features": undefined,
                                                                        "field": [Function],
                                                                        "flexibleControlStateSize": false,
                                                                        "help": "Issue owners will be automatically assigned.",
                                                                        "hideErrorMessage": false,
                                                                        "highlighted": false,
                                                                        "label": "The issue is assigned to the team or user",
                                                                        "name": "autoAssignment",
                                                                        "resetOnError": true,
                                                                        "type": "boolean",
                                                                      },
                                                                    },
                                                                    "fieldState": Object {},
                                                                    "fields": Object {
                                                                      "autoAssignment": "false",
                                                                    },
                                                                    "formErrors": undefined,
                                                                    "formState": undefined,
                                                                    "initialData": Object {
                                                                      "autoAssignment": "false",
                                                                    },
                                                                    "options": Object {
                                                                      "allowUndo": false,
                                                                      "apiEndpoint": "/projects/org-slug/project-slug/ownership/",
                                                                      "apiMethod": "PUT",
                                                                      "onFieldChange": undefined,
                                                                      "onSubmitError": undefined,
                                                                      "onSubmitSuccess": undefined,
                                                                      "resetOnError": undefined,
                                                                      "saveOnBlur": true,
                                                                    },
                                                                    "snapshots": Array [
                                                                      Map {
                                                                        "autoAssignment" => "false",
                                                                      },
                                                                    ],
                                                                  }
                                                                }
                                                                name="autoAssignment"
                                                              >
                                                                <Observer>
                                                                  <ControlState
                                                                    error={false}
                                                                    isSaved={null}
                                                                    isSaving={null}
                                                                  />
                                                                </Observer>
                                                              </FormFieldControlState>
                                                            </div>
                                                          </FieldControlState>
                                                        </div>
                                                      </FieldControlWrapper>
                                                      <Observer />
                                                    </div>
                                                  </FieldControlErrorWrapper>
                                                </FieldControl>
                                              </div>
                                            </FieldWrapper>
                                          </Field>
                                        </FormField>
                                      </InputField>
                                    </BooleanField>
                                  </FieldFromConfig>
                                </div>
                              </FlexBox>
                            </PanelBody>
                          </div>
                        </Component>
                      </Panel>
                    </FormPanel>
                  </div>
                </Styled(div)>
              </JsonForm>
            </div>
          </form>
        </Form>
      </div>
    </DocumentTitle>
  </SideEffect(DocumentTitle)>
</ProjectOwnership>
`;
