// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ProjectTeamsSettings render() renders 1`] = `
<SideEffect(DocumentTitle)
  title="Issue Owners - project-slug - Sentry"
>
  <div>
    <StyledSettingsPageHeading
      action={
        <ForwardRef
          size="small"
          to={
            Object {
              "pathname": "/organizations/org-slug/issues/",
              "query": Object {
                "project": "2",
              },
            }
          }
        >
          View Issues
        </ForwardRef>
      }
      noTitleStyles={false}
      title="Issue Owners"
    />
    <PermissionAlert />
    <Panel>
      <PanelHeader>
        Ownership Rules
      </PanelHeader>
      <PanelBody
        flexible={false}
        withPadding={true}
      >
        <Block>
          Define rules here to configure automated ownership for new issues and direct email alerts
        </Block>
        <Block>
          Rules follow the pattern: 
          <code>
            type:glob owner owner
          </code>
        </Block>
        <Block>
          <span
            key="4"
          >
            <span
              key="0"
            >
              Owners can be team identifiers starting with 
            </span>
            <code
              key="1"
            >
              #
            </code>
            <span
              key="2"
            >
              , or user emails
            </span>
          </span>
        </Block>
        <Block>
          Globbing Syntax:
          <CodeBlock>
            * matches everything
? matches any single character
          </CodeBlock>
        </Block>
        <Block>
          Examples:
          <CodeBlock>
            path:src/example/pipeline/* person@sentry.io #infrastructure
            

            url:http://example.com/settings/* #product
            

            tags.sku_class:enterprise #enterprise
          </CodeBlock>
        </Block>
        <OwnerInput
          disabled={false}
          initialText="url:src @dummy@example.com"
          organization={
            Object {
              "access": Array [
                "org:read",
                "org:write",
                "org:admin",
                "org:integrations",
                "project:read",
                "project:write",
                "project:admin",
                "team:read",
                "team:write",
                "team:admin",
              ],
              "experiments": Object {},
              "features": Array [],
              "id": "3",
              "name": "Organization Name",
              "onboardingTasks": Array [],
              "projects": Array [],
              "scrapeJavaScript": true,
              "slug": "org-slug",
              "status": Object {
                "id": "active",
                "name": "active",
              },
              "teams": Array [],
            }
          }
          params={
            Object {
              "orgId": "org-slug",
              "projectId": "project-slug",
            }
          }
          project={
            Object {
              "allowedDomains": Array [
                "example.com",
                "https://example.com",
              ],
              "dataScrubber": false,
              "dataScrubberDefaults": false,
              "digestsMaxDelay": 60,
              "digestsMinDelay": 5,
              "environments": Array [],
              "features": Array [],
              "hasAccess": true,
              "id": "2",
              "isBookmarked": false,
              "isMember": true,
              "name": "Project Name",
              "resolveAge": 48,
              "safeFields": Array [
                "business-email",
                "company",
              ],
              "scrapeJavaScript": true,
              "scrubIPAddresses": false,
              "securityToken": "security-token",
              "securityTokenHeader": "x-security-header",
              "sensitiveFields": Array [
                "creditcard",
                "ssn",
              ],
              "slug": "project-slug",
              "storeCrashReports": false,
              "subjectPrefix": "[my-org]",
              "subjectTemplate": "[$project] \${tag:level}: $title",
              "teams": Array [],
              "verifySSL": true,
            }
          }
        />
      </PanelBody>
    </Panel>
    <Form
      allowUndo={false}
      apiEndpoint="/projects/org-slug/project-slug/ownership/"
      apiMethod="PUT"
      cancelLabel="Cancel"
      className="form-stacked"
      hideFooter={true}
      initialData={
        Object {
          "fallthrough": "false",
        }
      }
      requireChanges={false}
      saveOnBlur={true}
      submitDisabled={false}
      submitLabel="Save Changes"
      submitPriority="primary"
    >
      <JsonForm
        additionalFieldProps={Object {}}
        forms={
          Array [
            Object {
              "fields": Array [
                Object {
                  "disabled": false,
                  "help": "Issue owners will receive notifications for issues they are responsible for.",
                  "label": "All users with access to this project are issue owners",
                  "name": "fallthrough",
                  "type": "boolean",
                },
              ],
              "title": "If ownership cannot be determined for an issue...",
            },
          ]
        }
      />
    </Form>
    <Form
      allowUndo={false}
      apiEndpoint="/projects/org-slug/project-slug/ownership/"
      apiMethod="PUT"
      cancelLabel="Cancel"
      className="form-stacked"
      hideFooter={true}
      initialData={
        Object {
          "autoAssignment": "false",
        }
      }
      requireChanges={false}
      saveOnBlur={true}
      submitDisabled={false}
      submitLabel="Save Changes"
      submitPriority="primary"
    >
      <JsonForm
        additionalFieldProps={Object {}}
        forms={
          Array [
            Object {
              "fields": Array [
                Object {
                  "disabled": false,
                  "help": "Issue owners will be automatically assigned.",
                  "label": "The issue is assigned to the team or user",
                  "name": "autoAssignment",
                  "type": "boolean",
                },
              ],
              "title": "If a new event matches any of the ownership rules...",
            },
          ]
        }
      />
    </Form>
  </div>
</SideEffect(DocumentTitle)>
`;
