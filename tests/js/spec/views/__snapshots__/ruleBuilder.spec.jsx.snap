// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RuleBuilder renders 1`] = `
<RuleBuilder
  onAddRule={
    [MockFunction] {
      "calls": Array [
        Array [
          "path:some/path/* janebloggs@example.com",
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  organization={
    Object {
      "access": Array [
        "org:read",
        "org:write",
        "org:admin",
        "org:integrations",
        "project:read",
        "project:write",
        "project:admin",
        "team:read",
        "team:write",
        "team:admin",
      ],
      "features": Array [],
      "id": "3",
      "name": "Organization Name",
      "onboardingTasks": Array [],
      "projects": Array [],
      "scrapeJavaScript": true,
      "slug": "org-slug",
      "status": Object {
        "id": "active",
        "name": "active",
      },
      "teams": Array [],
    }
  }
  project={
    Object {
      "environments": Array [],
      "hasAccess": true,
      "id": "2",
      "isBookmarked": false,
      "isMember": true,
      "name": "Project Name",
      "slug": "project-slug",
      "teams": Array [
        Object {
          "id": "3",
          "isMember": true,
          "memberCount": 0,
          "name": "COOL TEAM",
          "slug": "cool-team",
        },
      ],
    }
  }
>
  <BuilderBar>
    <div
      className="css-1k7bckg-BuilderBar e1hyuoc75"
    >
      <BuilderSelect
        clearable={false}
        deprecatedSelectControl={true}
        disabled={false}
        hideErrorMessage={false}
        multiple={false}
        name="select-type"
        onChange={[Function]}
        options={
          Array [
            Object {
              "label": "Path",
              "value": "path",
            },
            Object {
              "label": "URL",
              "value": "url",
            },
          ]
        }
        required={false}
        showSearch={false}
        style={
          Object {
            "width": 140,
          }
        }
        value="path"
      >
        <SelectField
          className="css-10lzdlx-BuilderSelect e1hyuoc76"
          clearable={false}
          deprecatedSelectControl={true}
          disabled={false}
          hideErrorMessage={false}
          multiple={false}
          name="select-type"
          onChange={[Function]}
          options={
            Array [
              Object {
                "label": "Path",
                "value": "path",
              },
              Object {
                "label": "URL",
                "value": "url",
              },
            ]
          }
          required={false}
          showSearch={false}
          style={
            Object {
              "width": 140,
            }
          }
          value="path"
        >
          <div
            className="css-10lzdlx-BuilderSelect e1hyuoc76"
            style={
              Object {
                "width": 140,
              }
            }
          >
            <div
              className="controls"
            >
              <StyledSelectControl
                clearable={false}
                deprecatedSelectControl={true}
                disabled={false}
                id="id-select-type"
                multiple={false}
                name="select-type"
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "label": "Path",
                      "value": "path",
                    },
                    Object {
                      "label": "URL",
                      "value": "url",
                    },
                  ]
                }
                required={false}
                value="path"
              >
                <ForwardRef(RefForwardedSelectControl)
                  className="css-9gm53a-StyledSelectControl e1qrhqd00"
                  clearable={false}
                  deprecatedSelectControl={true}
                  disabled={false}
                  id="id-select-type"
                  multiple={false}
                  name="select-type"
                  onChange={[Function]}
                  options={
                    Array [
                      Object {
                        "label": "Path",
                        "value": "path",
                      },
                      Object {
                        "label": "URL",
                        "value": "url",
                      },
                    ]
                  }
                  required={false}
                  value="path"
                >
                  <SelectControl
                    className="css-9gm53a-StyledSelectControl e1qrhqd00"
                    clearable={false}
                    deprecatedSelectControl={true}
                    disabled={false}
                    forwardedRef={null}
                    id="id-select-type"
                    multiple={false}
                    name="select-type"
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "Path",
                          "value": "path",
                        },
                        Object {
                          "label": "URL",
                          "value": "url",
                        },
                      ]
                    }
                    required={false}
                    value="path"
                  >
                    <SelectControlLegacy
                      className="css-9gm53a-StyledSelectControl e1qrhqd00"
                      clearable={false}
                      disabled={false}
                      forwardedRef={null}
                      height={36}
                      id="id-select-type"
                      multiple={false}
                      name="select-type"
                      onChange={[Function]}
                      options={
                        Array [
                          Object {
                            "label": "Path",
                            "value": "path",
                          },
                          Object {
                            "label": "URL",
                            "value": "url",
                          },
                        ]
                      }
                      required={false}
                      value="path"
                    >
                      <StyledSelect
                        arrowRenderer={[Function]}
                        backspaceRemoves={false}
                        className="css-9gm53a-StyledSelectControl e1qrhqd00"
                        clearable={false}
                        deleteRemoves={false}
                        disabled={false}
                        forwardedRef={null}
                        height={36}
                        id="id-select-type"
                        multiple={false}
                        name="select-type"
                        onChange={[Function]}
                        options={
                          Array [
                            Object {
                              "label": "Path",
                              "value": "path",
                            },
                            Object {
                              "label": "URL",
                              "value": "url",
                            },
                          ]
                        }
                        required={false}
                        value="path"
                      >
                        <SelectPicker
                          arrowRenderer={[Function]}
                          backspaceRemoves={false}
                          className="e1qrhqd00 css-j0gflv-StyledSelect-StyledSelectControl e1ynsgsr0"
                          clearable={false}
                          deleteRemoves={false}
                          disabled={false}
                          forwardedRef={null}
                          height={36}
                          id="id-select-type"
                          multiple={false}
                          name="select-type"
                          onChange={[Function]}
                          options={
                            Array [
                              Object {
                                "label": "Path",
                                "value": "path",
                              },
                              Object {
                                "label": "URL",
                                "value": "url",
                              },
                            ]
                          }
                          required={false}
                          value="path"
                        >
                          <Select
                            arrowRenderer={[Function]}
                            autosize={true}
                            backspaceRemoves={false}
                            backspaceToRemoveMessage="Press backspace to remove {label}"
                            className="e1qrhqd00 css-j0gflv-StyledSelect-StyledSelectControl e1ynsgsr0"
                            clearAllText="Clear all"
                            clearRenderer={[Function]}
                            clearValueText="Clear value"
                            clearable={false}
                            closeOnSelect={true}
                            deleteRemoves={false}
                            delimiter=","
                            disabled={false}
                            escapeClearsValue={true}
                            filterOptions={[Function]}
                            height={36}
                            id="id-select-type"
                            ignoreAccents={true}
                            ignoreCase={true}
                            inputProps={Object {}}
                            isLoading={false}
                            joinValues={false}
                            labelKey="label"
                            matchPos="any"
                            matchProp="any"
                            menuBuffer={0}
                            menuRenderer={[Function]}
                            multi={false}
                            multiple={false}
                            name="select-type"
                            noResultsText="No results found"
                            onBlurResetsInput={true}
                            onChange={[Function]}
                            onCloseResetsInput={true}
                            onSelectResetsInput={true}
                            openOnClick={true}
                            optionComponent={[Function]}
                            options={
                              Array [
                                Object {
                                  "label": "Path",
                                  "value": "path",
                                },
                                Object {
                                  "label": "URL",
                                  "value": "url",
                                },
                              ]
                            }
                            pageSize={5}
                            placeholder="Select..."
                            removeSelected={true}
                            required={false}
                            rtl={false}
                            scrollMenuIntoView={true}
                            searchable={true}
                            simpleValue={false}
                            tabSelectsValue={true}
                            trimFilter={true}
                            value="path"
                            valueComponent={[Function]}
                            valueKey="value"
                          >
                            <div
                              className="Select e1qrhqd00 css-j0gflv-StyledSelect-StyledSelectControl e1ynsgsr0 has-value is-searchable Select--single"
                            >
                              <input
                                disabled={false}
                                key="hidden.0"
                                name="select-type"
                                type="hidden"
                                value="path"
                              />
                              <div
                                className="Select-control"
                                onKeyDown={[Function]}
                                onMouseDown={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                              >
                                <div
                                  className="Select-multi-value-wrapper"
                                  id="react-select-2--value"
                                >
                                  <Value
                                    disabled={false}
                                    id="react-select-2--value-item"
                                    instancePrefix="react-select-2-"
                                    onClick={null}
                                    placeholder="Select..."
                                    value={
                                      Object {
                                        "label": "Path",
                                        "value": "path",
                                      }
                                    }
                                  >
                                    <div
                                      className="Select-value"
                                    >
                                      <span
                                        aria-selected="true"
                                        className="Select-value-label"
                                        id="react-select-2--value-item"
                                        role="option"
                                      >
                                        Path
                                      </span>
                                    </div>
                                  </Value>
                                  <AutosizeInput
                                    aria-activedescendant="react-select-2--value"
                                    aria-expanded="false"
                                    aria-haspopup="false"
                                    aria-owns=""
                                    className="Select-input"
                                    id="id-select-type"
                                    injectStyles={true}
                                    minWidth="5"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    required={false}
                                    role="combobox"
                                    value=""
                                  >
                                    <div
                                      className="Select-input"
                                      style={
                                        Object {
                                          "display": "inline-block",
                                        }
                                      }
                                    >
                                      <input
                                        aria-activedescendant="react-select-2--value"
                                        aria-expanded="false"
                                        aria-haspopup="false"
                                        aria-owns=""
                                        id="id-select-type"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        required={false}
                                        role="combobox"
                                        style={
                                          Object {
                                            "boxSizing": "content-box",
                                            "width": "5px",
                                          }
                                        }
                                        value=""
                                      />
                                      <div
                                        style={
                                          Object {
                                            "height": 0,
                                            "left": 0,
                                            "overflow": "scroll",
                                            "position": "absolute",
                                            "top": 0,
                                            "visibility": "hidden",
                                            "whiteSpace": "pre",
                                          }
                                        }
                                      />
                                    </div>
                                  </AutosizeInput>
                                </div>
                                <span
                                  className="Select-arrow-zone"
                                  onMouseDown={[Function]}
                                >
                                  <span
                                    className="icon-arrow-down"
                                  />
                                </span>
                              </div>
                            </div>
                          </Select>
                        </SelectPicker>
                      </StyledSelect>
                    </SelectControlLegacy>
                  </SelectControl>
                </ForwardRef(RefForwardedSelectControl)>
              </StyledSelectControl>
            </div>
          </div>
        </SelectField>
      </BuilderSelect>
      <BuilderInput
        controlled={true}
        onChange={[Function]}
        placeholder="src/example/*"
        value=""
      >
        <input
          className="css-n5owx7-Input-BuilderInput e1hyuoc77"
          onChange={[Function]}
          placeholder="src/example/*"
          value=""
        />
      </BuilderInput>
      <Divider
        src="icon-chevron-right"
      >
        <ForwardRef
          className="css-1qihtir-InlineSvg-Divider e1hyuoc78"
          src="icon-chevron-right"
        >
          <svg
            className="css-1qihtir-InlineSvg-Divider e1hyuoc78"
            height="1em"
            viewBox={Object {}}
            width="1em"
          >
            <use
              href="#test"
              xlinkHref="#test"
            />
          </svg>
        </ForwardRef>
      </Divider>
      <SelectOwnersWrapper>
        <div
          className="css-1518iv7-SelectOwnersWrapper e1hyuoc79"
        >
          <SelectOwners
            onChange={[Function]}
            organization={
              Object {
                "access": Array [
                  "org:read",
                  "org:write",
                  "org:admin",
                  "org:integrations",
                  "project:read",
                  "project:write",
                  "project:admin",
                  "team:read",
                  "team:write",
                  "team:admin",
                ],
                "features": Array [],
                "id": "3",
                "name": "Organization Name",
                "onboardingTasks": Array [],
                "projects": Array [],
                "scrapeJavaScript": true,
                "slug": "org-slug",
                "status": Object {
                  "id": "active",
                  "name": "active",
                },
                "teams": Array [],
              }
            }
            project={
              Object {
                "environments": Array [],
                "hasAccess": true,
                "id": "2",
                "isBookmarked": false,
                "isMember": true,
                "name": "Project Name",
                "slug": "project-slug",
                "teams": Array [
                  Object {
                    "id": "3",
                    "isMember": true,
                    "memberCount": 0,
                    "name": "COOL TEAM",
                    "slug": "cool-team",
                  },
                ],
              }
            }
            value={Array []}
          >
            <EmotionCssPropInternal
              __EMOTION_TYPE_PLEASE_DO_NOT_USE__={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                }
              }
              async={true}
              cache={false}
              clearable={true}
              css={
                Object {
                  "name": "fs1hps-SelectOwners",
                  "styles": "width:200px;;label:SelectOwners;",
                }
              }
              defaultOptions={true}
              deprecatedSelectControl={true}
              filterOptions={[Function]}
              loadOptions={[Function]}
              onChange={[Function]}
              onInputChange={[Function]}
              placeholder="owners"
              value={Array []}
              valueComponent={[Function]}
            >
              <ForwardRef(MultiSelectControl)
                async={true}
                cache={false}
                className="css-fs1hps-SelectOwners"
                clearable={true}
                defaultOptions={true}
                deprecatedSelectControl={true}
                filterOptions={[Function]}
                loadOptions={[Function]}
                onChange={[Function]}
                onInputChange={[Function]}
                placeholder="owners"
                value={Array []}
                valueComponent={[Function]}
              >
                <ForwardRef(RefForwardedSelectControl)
                  async={true}
                  cache={false}
                  className="css-fs1hps-SelectOwners"
                  clearable={true}
                  defaultOptions={true}
                  deprecatedSelectControl={true}
                  filterOptions={[Function]}
                  forwardedRef={[Function]}
                  loadOptions={[Function]}
                  multiple={true}
                  onChange={[Function]}
                  onInputChange={[Function]}
                  placeholder="owners"
                  value={Array []}
                  valueComponent={[Function]}
                >
                  <SelectControl
                    async={true}
                    cache={false}
                    className="css-fs1hps-SelectOwners"
                    clearable={true}
                    defaultOptions={true}
                    deprecatedSelectControl={true}
                    filterOptions={[Function]}
                    forwardedRef={[Function]}
                    loadOptions={[Function]}
                    multiple={true}
                    onChange={[Function]}
                    onInputChange={[Function]}
                    placeholder="owners"
                    value={Array []}
                    valueComponent={[Function]}
                  >
                    <SelectControlLegacy
                      async={true}
                      cache={false}
                      className="css-fs1hps-SelectOwners"
                      clearable={true}
                      defaultOptions={true}
                      filterOptions={[Function]}
                      forwardedRef={[Function]}
                      height={36}
                      loadOptions={[Function]}
                      multiple={true}
                      onChange={[Function]}
                      onInputChange={[Function]}
                      placeholder="owners"
                      value={Array []}
                      valueComponent={[Function]}
                    >
                      <StyledSelect
                        arrowRenderer={[Function]}
                        async={true}
                        backspaceRemoves={true}
                        cache={false}
                        className="css-fs1hps-SelectOwners"
                        clearable={true}
                        defaultOptions={true}
                        deleteRemoves={true}
                        filterOptions={[Function]}
                        forwardedRef={[Function]}
                        height={36}
                        loadOptions={[Function]}
                        multi={true}
                        multiple={true}
                        onChange={[Function]}
                        onInputChange={[Function]}
                        placeholder="owners"
                        value={Array []}
                        valueComponent={[Function]}
                      >
                        <SelectPicker
                          arrowRenderer={[Function]}
                          async={true}
                          backspaceRemoves={true}
                          cache={false}
                          className="css-gv7e0o-StyledSelect-SelectOwners e1ynsgsr0"
                          clearable={true}
                          defaultOptions={true}
                          deleteRemoves={true}
                          filterOptions={[Function]}
                          forwardedRef={[Function]}
                          height={36}
                          loadOptions={[Function]}
                          multi={true}
                          multiple={true}
                          onChange={[Function]}
                          onInputChange={[Function]}
                          placeholder="owners"
                          value={Array []}
                          valueComponent={[Function]}
                        >
                          <Async
                            arrowRenderer={[Function]}
                            autoload={true}
                            backspaceRemoves={true}
                            cache={false}
                            className="css-gv7e0o-StyledSelect-SelectOwners e1ynsgsr0"
                            clearable={true}
                            defaultOptions={true}
                            deleteRemoves={true}
                            filterOptions={[Function]}
                            height={36}
                            ignoreAccents={true}
                            ignoreCase={true}
                            loadOptions={[Function]}
                            loadingPlaceholder="Loading..."
                            multi={true}
                            multiple={true}
                            onChange={[Function]}
                            onInputChange={[Function]}
                            options={Array []}
                            placeholder="owners"
                            searchPromptText="Type to search"
                            value={Array []}
                            valueComponent={[Function]}
                          >
                            <Select
                              arrowRenderer={[Function]}
                              autoload={true}
                              autosize={true}
                              backspaceRemoves={true}
                              backspaceToRemoveMessage="Press backspace to remove {label}"
                              cache={false}
                              className="css-gv7e0o-StyledSelect-SelectOwners e1ynsgsr0"
                              clearAllText="Clear all"
                              clearRenderer={[Function]}
                              clearValueText="Clear value"
                              clearable={true}
                              closeOnSelect={true}
                              defaultOptions={true}
                              deleteRemoves={true}
                              delimiter=","
                              disabled={false}
                              escapeClearsValue={true}
                              filterOptions={[Function]}
                              height={36}
                              ignoreAccents={true}
                              ignoreCase={true}
                              inputProps={Object {}}
                              isLoading={false}
                              joinValues={false}
                              labelKey="label"
                              loadOptions={[Function]}
                              loadingPlaceholder="Loading..."
                              matchPos="any"
                              matchProp="any"
                              menuBuffer={0}
                              menuRenderer={[Function]}
                              multi={true}
                              multiple={true}
                              noResultsText="Type to search"
                              onBlurResetsInput={true}
                              onChange={[Function]}
                              onCloseResetsInput={true}
                              onInputChange={[Function]}
                              onSelectResetsInput={true}
                              openOnClick={true}
                              optionComponent={[Function]}
                              options={
                                Array [
                                  Object {
                                    "actor": Object {
                                      "id": "1",
                                      "name": "Jane Bloggs",
                                      "type": "user",
                                    },
                                    "label": <IdBadge
                                      avatarSize={24}
                                      hideEmail={true}
                                      useLink={false}
                                      user={
                                        Object {
                                          "email": "janebloggs@example.com",
                                          "flags": Object {
                                            "newsletter_consent_prompt": false,
                                          },
                                          "hasPasswordAuth": true,
                                          "id": "1",
                                          "isAuthenticated": true,
                                          "name": "Jane Bloggs",
                                          "options": Object {
                                            "timezone": "UTC",
                                          },
                                          "user": Object {
                                            "email": "janebloggs@example.com",
                                            "id": "1",
                                            "name": "Jane Bloggs",
                                          },
                                          "username": "foo@example.com",
                                        }
                                      }
                                    />,
                                    "searchKey": "janebloggs@example.com jane bloggs",
                                    "value": "user:1",
                                  },
                                  Object {
                                    "actor": Object {
                                      "id": "3",
                                      "name": "cool-team",
                                      "type": "team",
                                    },
                                    "label": <IdBadge
                                      team={
                                        Object {
                                          "id": "3",
                                          "isMember": true,
                                          "memberCount": 0,
                                          "name": "COOL TEAM",
                                          "slug": "cool-team",
                                        }
                                      }
                                    />,
                                    "searchKey": "#cool-team",
                                    "value": "team:3",
                                  },
                                  Object {
                                    "actor": Object {
                                      "id": "4",
                                      "name": "team-not-in-project",
                                      "type": "team",
                                    },
                                    "disabled": true,
                                    "label": <ForwardRef(render)
                                      justifyContent="space-between"
                                    >
                                      <ForwardRef(render)>
                                        <Tooltip
                                          containerDisplayMode="inline-block"
                                          position="left"
                                          title="#team-not-in-project is not a member of project"
                                        >
                                          <IdBadge
                                            team={
                                              Object {
                                                "id": "4",
                                                "isMember": true,
                                                "memberCount": 0,
                                                "name": "TEAM NOT IN PROJECT",
                                                "slug": "team-not-in-project",
                                              }
                                            }
                                          />
                                        </Tooltip>
                                      </ForwardRef(render)>
                                      <Tooltip
                                        containerDisplayMode="inline-block"
                                        position="top"
                                        title="Add #team-not-in-project to project"
                                      >
                                        <ForwardRef(render)
                                          borderless={true}
                                          disabled={false}
                                          icon={
                                            <ForwardRef(IconAdd)
                                              circle={true}
                                            />
                                          }
                                          onClick={[Function]}
                                          size="zero"
                                        />
                                      </Tooltip>
                                    </ForwardRef(render)>,
                                    "searchKey": "#team-not-in-project",
                                    "value": "team:4",
                                  },
                                  Object {
                                    "actor": Object {
                                      "id": "2",
                                      "name": "John Smith",
                                      "type": "user",
                                    },
                                    "disabled": true,
                                    "label": <ForwardRef(render)>
                                      <Tooltip
                                        containerDisplayMode="inline-block"
                                        position="left"
                                        title="John Smith is not a member of project"
                                      >
                                        <IdBadge
                                          avatarSize={24}
                                          hideEmail={true}
                                          useLink={false}
                                          user={
                                            Object {
                                              "email": "johnsmith@example.com",
                                              "id": "2",
                                              "name": "John Smith",
                                            }
                                          }
                                        />
                                      </Tooltip>
                                    </ForwardRef(render)>,
                                    "searchKey": "johnsmith@example.com john smith",
                                    "value": "user:2",
                                  },
                                ]
                              }
                              pageSize={5}
                              placeholder="owners"
                              removeSelected={true}
                              required={false}
                              rtl={false}
                              scrollMenuIntoView={true}
                              searchPromptText="Type to search"
                              searchable={true}
                              simpleValue={false}
                              tabSelectsValue={true}
                              trimFilter={true}
                              value={Array []}
                              valueComponent={[Function]}
                              valueKey="value"
                            >
                              <div
                                className="Select css-gv7e0o-StyledSelect-SelectOwners e1ynsgsr0 is-clearable is-searchable Select--multi"
                              >
                                <div
                                  className="Select-control"
                                  onKeyDown={[Function]}
                                  onMouseDown={[Function]}
                                  onTouchEnd={[Function]}
                                  onTouchMove={[Function]}
                                  onTouchStart={[Function]}
                                >
                                  <div
                                    className="Select-multi-value-wrapper"
                                    id="react-select-3--value"
                                  >
                                    <div
                                      className="Select-placeholder"
                                    >
                                      owners
                                    </div>
                                    <AutosizeInput
                                      aria-activedescendant="react-select-3--value"
                                      aria-expanded="false"
                                      aria-haspopup="false"
                                      aria-owns=""
                                      className="Select-input"
                                      injectStyles={true}
                                      minWidth="5"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      required={false}
                                      role="combobox"
                                      value=""
                                    >
                                      <div
                                        className="Select-input"
                                        style={
                                          Object {
                                            "display": "inline-block",
                                          }
                                        }
                                      >
                                        <input
                                          aria-activedescendant="react-select-3--value"
                                          aria-expanded="false"
                                          aria-haspopup="false"
                                          aria-owns=""
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          required={false}
                                          role="combobox"
                                          style={
                                            Object {
                                              "boxSizing": "content-box",
                                              "width": "5px",
                                            }
                                          }
                                          value=""
                                        />
                                        <div
                                          style={
                                            Object {
                                              "height": 0,
                                              "left": 0,
                                              "overflow": "scroll",
                                              "position": "absolute",
                                              "top": 0,
                                              "visibility": "hidden",
                                              "whiteSpace": "pre",
                                            }
                                          }
                                        />
                                      </div>
                                    </AutosizeInput>
                                  </div>
                                  <span
                                    className="Select-arrow-zone"
                                    onMouseDown={[Function]}
                                  >
                                    <span
                                      className="icon-arrow-down"
                                    />
                                  </span>
                                </div>
                              </div>
                            </Select>
                          </Async>
                        </SelectPicker>
                      </StyledSelect>
                    </SelectControlLegacy>
                  </SelectControl>
                </ForwardRef(RefForwardedSelectControl)>
              </ForwardRef(MultiSelectControl)>
            </EmotionCssPropInternal>
          </SelectOwners>
        </div>
      </SelectOwnersWrapper>
      <AddButton
        disabled={true}
        icon={
          <ForwardRef(IconAdd)
            circle={true}
            size="xs"
          />
        }
        onClick={[Function]}
        priority="primary"
        size="small"
      >
        <forwardRef<Button>
          className="css-f6y09s-AddButton e1hyuoc710"
          disabled={true}
          icon={
            <ForwardRef(IconAdd)
              circle={true}
              size="xs"
            />
          }
          onClick={[Function]}
          priority="primary"
          size="small"
        >
          <Button
            align="center"
            className="css-f6y09s-AddButton e1hyuoc710"
            disabled={true}
            forwardRef={null}
            icon={
              <ForwardRef(IconAdd)
                circle={true}
                size="xs"
              />
            }
            onClick={[Function]}
            priority="primary"
            size="small"
          >
            <StyledButton
              aria-disabled={true}
              className="css-f6y09s-AddButton e1hyuoc710"
              disabled={true}
              forwardRef={null}
              onClick={[Function]}
              priority="primary"
              role="button"
              size="small"
            >
              <Component
                aria-disabled={true}
                className="e1hyuoc710 css-1vf07fg-StyledButton-AddButton edwq9my0"
                forwardRef={null}
                onClick={[Function]}
                role="button"
                size="small"
              >
                <button
                  aria-disabled={true}
                  className="e1hyuoc710 css-1vf07fg-StyledButton-AddButton edwq9my0"
                  onClick={[Function]}
                  role="button"
                  size="small"
                >
                  <ButtonLabel
                    align="center"
                    priority="primary"
                    size="small"
                  >
                    <Component
                      align="center"
                      className="css-19gcr2f-ButtonLabel edwq9my1"
                      priority="primary"
                      size="small"
                    >
                      <span
                        className="css-19gcr2f-ButtonLabel edwq9my1"
                      >
                        <Icon
                          hasChildren={false}
                          size="small"
                        >
                          <Component
                            className="css-1j44i9a-Icon edwq9my2"
                            hasChildren={false}
                            size="small"
                          >
                            <span
                              className="css-1j44i9a-Icon edwq9my2"
                              size="small"
                            >
                              <ForwardRef(IconAdd)
                                circle={true}
                                size="xs"
                              >
                                <svg
                                  fill="currentColor"
                                  height="12px"
                                  viewBox="0 0 16 16"
                                  width="12px"
                                >
                                  <g>
                                    <path
                                      d="M11.28,8.75H4.72a.75.75,0,1,1,0-1.5h6.56a.75.75,0,1,1,0,1.5Z"
                                    />
                                    <path
                                      d="M8,12a.76.76,0,0,1-.75-.75V4.72a.75.75,0,0,1,1.5,0v6.56A.76.76,0,0,1,8,12Z"
                                    />
                                    <path
                                      d="M8,16a8,8,0,1,1,8-8A8,8,0,0,1,8,16ZM8,1.53A6.47,6.47,0,1,0,14.47,8,6.47,6.47,0,0,0,8,1.53Z"
                                    />
                                  </g>
                                </svg>
                              </ForwardRef(IconAdd)>
                            </span>
                          </Component>
                        </Icon>
                      </span>
                    </Component>
                  </ButtonLabel>
                </button>
              </Component>
            </StyledButton>
          </Button>
        </forwardRef<Button>>
      </AddButton>
    </div>
  </BuilderBar>
</RuleBuilder>
`;

exports[`RuleBuilder renders with suggestions 1`] = `
<RuleBuilder
  onAddRule={[MockFunction]}
  organization={
    Object {
      "access": Array [
        "org:read",
        "org:write",
        "org:admin",
        "org:integrations",
        "project:read",
        "project:write",
        "project:admin",
        "team:read",
        "team:write",
        "team:admin",
      ],
      "features": Array [],
      "id": "3",
      "name": "Organization Name",
      "onboardingTasks": Array [],
      "projects": Array [],
      "scrapeJavaScript": true,
      "slug": "org-slug",
      "status": Object {
        "id": "active",
        "name": "active",
      },
      "teams": Array [],
    }
  }
  paths={
    Array [
      "a/bar",
      "a/foo",
    ]
  }
  project={
    Object {
      "environments": Array [],
      "hasAccess": true,
      "id": "2",
      "isBookmarked": false,
      "isMember": true,
      "name": "Project Name",
      "slug": "project-slug",
      "teams": Array [
        Object {
          "id": "3",
          "isMember": true,
          "memberCount": 0,
          "name": "COOL TEAM",
          "slug": "cool-team",
        },
      ],
    }
  }
  urls={
    Array [
      "example.com/a",
      "example.com/a/foo",
    ]
  }
>
  <Candidates>
    <div
      className="css-1s7yiyd-Candidates e1hyuoc70"
    >
      <RuleCandidate
        key="a/bar"
        onClick={[Function]}
      >
        <div
          className="css-11joymd-RuleCandidate e1hyuoc73"
          onClick={[Function]}
        >
          <StyledIconAdd
            circle={true}
          >
            <ForwardRef(IconAdd)
              circle={true}
              className="css-zq12t8-StyledIconAdd e1hyuoc74"
            >
              <svg
                className="css-zq12t8-StyledIconAdd e1hyuoc74"
                fill="currentColor"
                height="16px"
                viewBox="0 0 16 16"
                width="16px"
              >
                <g>
                  <path
                    d="M11.28,8.75H4.72a.75.75,0,1,1,0-1.5h6.56a.75.75,0,1,1,0,1.5Z"
                  />
                  <path
                    d="M8,12a.76.76,0,0,1-.75-.75V4.72a.75.75,0,0,1,1.5,0v6.56A.76.76,0,0,1,8,12Z"
                  />
                  <path
                    d="M8,16a8,8,0,1,1,8-8A8,8,0,0,1,8,16ZM8,1.53A6.47,6.47,0,1,0,14.47,8,6.47,6.47,0,0,0,8,1.53Z"
                  />
                </g>
              </svg>
            </ForwardRef(IconAdd)>
          </StyledIconAdd>
          <StyledTextOverflow>
            <div
              className="css-hmonbk-TextOverflow-StyledTextOverflow e1hyuoc72"
            >
              a/bar
            </div>
          </StyledTextOverflow>
          <TypeHint>
            <div
              className="css-acyfg9-TypeHint e1hyuoc71"
            >
              [PATH]
            </div>
          </TypeHint>
        </div>
      </RuleCandidate>
      <RuleCandidate
        key="a/foo"
        onClick={[Function]}
      >
        <div
          className="css-11joymd-RuleCandidate e1hyuoc73"
          onClick={[Function]}
        >
          <StyledIconAdd
            circle={true}
          >
            <ForwardRef(IconAdd)
              circle={true}
              className="css-zq12t8-StyledIconAdd e1hyuoc74"
            >
              <svg
                className="css-zq12t8-StyledIconAdd e1hyuoc74"
                fill="currentColor"
                height="16px"
                viewBox="0 0 16 16"
                width="16px"
              >
                <g>
                  <path
                    d="M11.28,8.75H4.72a.75.75,0,1,1,0-1.5h6.56a.75.75,0,1,1,0,1.5Z"
                  />
                  <path
                    d="M8,12a.76.76,0,0,1-.75-.75V4.72a.75.75,0,0,1,1.5,0v6.56A.76.76,0,0,1,8,12Z"
                  />
                  <path
                    d="M8,16a8,8,0,1,1,8-8A8,8,0,0,1,8,16ZM8,1.53A6.47,6.47,0,1,0,14.47,8,6.47,6.47,0,0,0,8,1.53Z"
                  />
                </g>
              </svg>
            </ForwardRef(IconAdd)>
          </StyledIconAdd>
          <StyledTextOverflow>
            <div
              className="css-hmonbk-TextOverflow-StyledTextOverflow e1hyuoc72"
            >
              a/foo
            </div>
          </StyledTextOverflow>
          <TypeHint>
            <div
              className="css-acyfg9-TypeHint e1hyuoc71"
            >
              [PATH]
            </div>
          </TypeHint>
        </div>
      </RuleCandidate>
      <RuleCandidate
        key="example.com/a"
        onClick={[Function]}
      >
        <div
          className="css-11joymd-RuleCandidate e1hyuoc73"
          onClick={[Function]}
        >
          <StyledIconAdd
            circle={true}
          >
            <ForwardRef(IconAdd)
              circle={true}
              className="css-zq12t8-StyledIconAdd e1hyuoc74"
            >
              <svg
                className="css-zq12t8-StyledIconAdd e1hyuoc74"
                fill="currentColor"
                height="16px"
                viewBox="0 0 16 16"
                width="16px"
              >
                <g>
                  <path
                    d="M11.28,8.75H4.72a.75.75,0,1,1,0-1.5h6.56a.75.75,0,1,1,0,1.5Z"
                  />
                  <path
                    d="M8,12a.76.76,0,0,1-.75-.75V4.72a.75.75,0,0,1,1.5,0v6.56A.76.76,0,0,1,8,12Z"
                  />
                  <path
                    d="M8,16a8,8,0,1,1,8-8A8,8,0,0,1,8,16ZM8,1.53A6.47,6.47,0,1,0,14.47,8,6.47,6.47,0,0,0,8,1.53Z"
                  />
                </g>
              </svg>
            </ForwardRef(IconAdd)>
          </StyledIconAdd>
          <StyledTextOverflow>
            <div
              className="css-hmonbk-TextOverflow-StyledTextOverflow e1hyuoc72"
            >
              example.com/a
            </div>
          </StyledTextOverflow>
          <TypeHint>
            <div
              className="css-acyfg9-TypeHint e1hyuoc71"
            >
              [URL]
            </div>
          </TypeHint>
        </div>
      </RuleCandidate>
      <RuleCandidate
        key="example.com/a/foo"
        onClick={[Function]}
      >
        <div
          className="css-11joymd-RuleCandidate e1hyuoc73"
          onClick={[Function]}
        >
          <StyledIconAdd
            circle={true}
          >
            <ForwardRef(IconAdd)
              circle={true}
              className="css-zq12t8-StyledIconAdd e1hyuoc74"
            >
              <svg
                className="css-zq12t8-StyledIconAdd e1hyuoc74"
                fill="currentColor"
                height="16px"
                viewBox="0 0 16 16"
                width="16px"
              >
                <g>
                  <path
                    d="M11.28,8.75H4.72a.75.75,0,1,1,0-1.5h6.56a.75.75,0,1,1,0,1.5Z"
                  />
                  <path
                    d="M8,12a.76.76,0,0,1-.75-.75V4.72a.75.75,0,0,1,1.5,0v6.56A.76.76,0,0,1,8,12Z"
                  />
                  <path
                    d="M8,16a8,8,0,1,1,8-8A8,8,0,0,1,8,16ZM8,1.53A6.47,6.47,0,1,0,14.47,8,6.47,6.47,0,0,0,8,1.53Z"
                  />
                </g>
              </svg>
            </ForwardRef(IconAdd)>
          </StyledIconAdd>
          <StyledTextOverflow>
            <div
              className="css-hmonbk-TextOverflow-StyledTextOverflow e1hyuoc72"
            >
              example.com/a/foo
            </div>
          </StyledTextOverflow>
          <TypeHint>
            <div
              className="css-acyfg9-TypeHint e1hyuoc71"
            >
              [URL]
            </div>
          </TypeHint>
        </div>
      </RuleCandidate>
    </div>
  </Candidates>
  <BuilderBar>
    <div
      className="css-1k7bckg-BuilderBar e1hyuoc75"
    >
      <BuilderSelect
        clearable={false}
        deprecatedSelectControl={true}
        disabled={false}
        hideErrorMessage={false}
        multiple={false}
        name="select-type"
        onChange={[Function]}
        options={
          Array [
            Object {
              "label": "Path",
              "value": "path",
            },
            Object {
              "label": "URL",
              "value": "url",
            },
          ]
        }
        required={false}
        showSearch={false}
        style={
          Object {
            "width": 140,
          }
        }
        value="path"
      >
        <SelectField
          className="css-10lzdlx-BuilderSelect e1hyuoc76"
          clearable={false}
          deprecatedSelectControl={true}
          disabled={false}
          hideErrorMessage={false}
          multiple={false}
          name="select-type"
          onChange={[Function]}
          options={
            Array [
              Object {
                "label": "Path",
                "value": "path",
              },
              Object {
                "label": "URL",
                "value": "url",
              },
            ]
          }
          required={false}
          showSearch={false}
          style={
            Object {
              "width": 140,
            }
          }
          value="path"
        >
          <div
            className="css-10lzdlx-BuilderSelect e1hyuoc76"
            style={
              Object {
                "width": 140,
              }
            }
          >
            <div
              className="controls"
            >
              <StyledSelectControl
                clearable={false}
                deprecatedSelectControl={true}
                disabled={false}
                id="id-select-type"
                multiple={false}
                name="select-type"
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "label": "Path",
                      "value": "path",
                    },
                    Object {
                      "label": "URL",
                      "value": "url",
                    },
                  ]
                }
                required={false}
                value="path"
              >
                <ForwardRef(RefForwardedSelectControl)
                  className="css-9gm53a-StyledSelectControl e1qrhqd00"
                  clearable={false}
                  deprecatedSelectControl={true}
                  disabled={false}
                  id="id-select-type"
                  multiple={false}
                  name="select-type"
                  onChange={[Function]}
                  options={
                    Array [
                      Object {
                        "label": "Path",
                        "value": "path",
                      },
                      Object {
                        "label": "URL",
                        "value": "url",
                      },
                    ]
                  }
                  required={false}
                  value="path"
                >
                  <SelectControl
                    className="css-9gm53a-StyledSelectControl e1qrhqd00"
                    clearable={false}
                    deprecatedSelectControl={true}
                    disabled={false}
                    forwardedRef={null}
                    id="id-select-type"
                    multiple={false}
                    name="select-type"
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "Path",
                          "value": "path",
                        },
                        Object {
                          "label": "URL",
                          "value": "url",
                        },
                      ]
                    }
                    required={false}
                    value="path"
                  >
                    <SelectControlLegacy
                      className="css-9gm53a-StyledSelectControl e1qrhqd00"
                      clearable={false}
                      disabled={false}
                      forwardedRef={null}
                      height={36}
                      id="id-select-type"
                      multiple={false}
                      name="select-type"
                      onChange={[Function]}
                      options={
                        Array [
                          Object {
                            "label": "Path",
                            "value": "path",
                          },
                          Object {
                            "label": "URL",
                            "value": "url",
                          },
                        ]
                      }
                      required={false}
                      value="path"
                    >
                      <StyledSelect
                        arrowRenderer={[Function]}
                        backspaceRemoves={false}
                        className="css-9gm53a-StyledSelectControl e1qrhqd00"
                        clearable={false}
                        deleteRemoves={false}
                        disabled={false}
                        forwardedRef={null}
                        height={36}
                        id="id-select-type"
                        multiple={false}
                        name="select-type"
                        onChange={[Function]}
                        options={
                          Array [
                            Object {
                              "label": "Path",
                              "value": "path",
                            },
                            Object {
                              "label": "URL",
                              "value": "url",
                            },
                          ]
                        }
                        required={false}
                        value="path"
                      >
                        <SelectPicker
                          arrowRenderer={[Function]}
                          backspaceRemoves={false}
                          className="e1qrhqd00 css-j0gflv-StyledSelect-StyledSelectControl e1ynsgsr0"
                          clearable={false}
                          deleteRemoves={false}
                          disabled={false}
                          forwardedRef={null}
                          height={36}
                          id="id-select-type"
                          multiple={false}
                          name="select-type"
                          onChange={[Function]}
                          options={
                            Array [
                              Object {
                                "label": "Path",
                                "value": "path",
                              },
                              Object {
                                "label": "URL",
                                "value": "url",
                              },
                            ]
                          }
                          required={false}
                          value="path"
                        >
                          <Select
                            arrowRenderer={[Function]}
                            autosize={true}
                            backspaceRemoves={false}
                            backspaceToRemoveMessage="Press backspace to remove {label}"
                            className="e1qrhqd00 css-j0gflv-StyledSelect-StyledSelectControl e1ynsgsr0"
                            clearAllText="Clear all"
                            clearRenderer={[Function]}
                            clearValueText="Clear value"
                            clearable={false}
                            closeOnSelect={true}
                            deleteRemoves={false}
                            delimiter=","
                            disabled={false}
                            escapeClearsValue={true}
                            filterOptions={[Function]}
                            height={36}
                            id="id-select-type"
                            ignoreAccents={true}
                            ignoreCase={true}
                            inputProps={Object {}}
                            isLoading={false}
                            joinValues={false}
                            labelKey="label"
                            matchPos="any"
                            matchProp="any"
                            menuBuffer={0}
                            menuRenderer={[Function]}
                            multi={false}
                            multiple={false}
                            name="select-type"
                            noResultsText="No results found"
                            onBlurResetsInput={true}
                            onChange={[Function]}
                            onCloseResetsInput={true}
                            onSelectResetsInput={true}
                            openOnClick={true}
                            optionComponent={[Function]}
                            options={
                              Array [
                                Object {
                                  "label": "Path",
                                  "value": "path",
                                },
                                Object {
                                  "label": "URL",
                                  "value": "url",
                                },
                              ]
                            }
                            pageSize={5}
                            placeholder="Select..."
                            removeSelected={true}
                            required={false}
                            rtl={false}
                            scrollMenuIntoView={true}
                            searchable={true}
                            simpleValue={false}
                            tabSelectsValue={true}
                            trimFilter={true}
                            value="path"
                            valueComponent={[Function]}
                            valueKey="value"
                          >
                            <div
                              className="Select e1qrhqd00 css-j0gflv-StyledSelect-StyledSelectControl e1ynsgsr0 has-value is-searchable Select--single"
                            >
                              <input
                                disabled={false}
                                key="hidden.0"
                                name="select-type"
                                type="hidden"
                                value="path"
                              />
                              <div
                                className="Select-control"
                                onKeyDown={[Function]}
                                onMouseDown={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                              >
                                <div
                                  className="Select-multi-value-wrapper"
                                  id="react-select-4--value"
                                >
                                  <Value
                                    disabled={false}
                                    id="react-select-4--value-item"
                                    instancePrefix="react-select-4-"
                                    onClick={null}
                                    placeholder="Select..."
                                    value={
                                      Object {
                                        "label": "Path",
                                        "value": "path",
                                      }
                                    }
                                  >
                                    <div
                                      className="Select-value"
                                    >
                                      <span
                                        aria-selected="true"
                                        className="Select-value-label"
                                        id="react-select-4--value-item"
                                        role="option"
                                      >
                                        Path
                                      </span>
                                    </div>
                                  </Value>
                                  <AutosizeInput
                                    aria-activedescendant="react-select-4--value"
                                    aria-expanded="false"
                                    aria-haspopup="false"
                                    aria-owns=""
                                    className="Select-input"
                                    id="id-select-type"
                                    injectStyles={true}
                                    minWidth="5"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    required={false}
                                    role="combobox"
                                    value=""
                                  >
                                    <div
                                      className="Select-input"
                                      style={
                                        Object {
                                          "display": "inline-block",
                                        }
                                      }
                                    >
                                      <input
                                        aria-activedescendant="react-select-4--value"
                                        aria-expanded="false"
                                        aria-haspopup="false"
                                        aria-owns=""
                                        id="id-select-type"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        required={false}
                                        role="combobox"
                                        style={
                                          Object {
                                            "boxSizing": "content-box",
                                            "width": "5px",
                                          }
                                        }
                                        value=""
                                      />
                                      <div
                                        style={
                                          Object {
                                            "height": 0,
                                            "left": 0,
                                            "overflow": "scroll",
                                            "position": "absolute",
                                            "top": 0,
                                            "visibility": "hidden",
                                            "whiteSpace": "pre",
                                          }
                                        }
                                      />
                                    </div>
                                  </AutosizeInput>
                                </div>
                                <span
                                  className="Select-arrow-zone"
                                  onMouseDown={[Function]}
                                >
                                  <span
                                    className="icon-arrow-down"
                                  />
                                </span>
                              </div>
                            </div>
                          </Select>
                        </SelectPicker>
                      </StyledSelect>
                    </SelectControlLegacy>
                  </SelectControl>
                </ForwardRef(RefForwardedSelectControl)>
              </StyledSelectControl>
            </div>
          </div>
        </SelectField>
      </BuilderSelect>
      <BuilderInput
        controlled={true}
        onChange={[Function]}
        placeholder="src/example/*"
        value="a/bar"
      >
        <input
          className="css-n5owx7-Input-BuilderInput e1hyuoc77"
          onChange={[Function]}
          placeholder="src/example/*"
          value="a/bar"
        />
      </BuilderInput>
      <Divider
        src="icon-chevron-right"
      >
        <ForwardRef
          className="css-1qihtir-InlineSvg-Divider e1hyuoc78"
          src="icon-chevron-right"
        >
          <svg
            className="css-1qihtir-InlineSvg-Divider e1hyuoc78"
            height="1em"
            viewBox={Object {}}
            width="1em"
          >
            <use
              href="#test"
              xlinkHref="#test"
            />
          </svg>
        </ForwardRef>
      </Divider>
      <SelectOwnersWrapper>
        <div
          className="css-1518iv7-SelectOwnersWrapper e1hyuoc79"
        >
          <SelectOwners
            onChange={[Function]}
            organization={
              Object {
                "access": Array [
                  "org:read",
                  "org:write",
                  "org:admin",
                  "org:integrations",
                  "project:read",
                  "project:write",
                  "project:admin",
                  "team:read",
                  "team:write",
                  "team:admin",
                ],
                "features": Array [],
                "id": "3",
                "name": "Organization Name",
                "onboardingTasks": Array [],
                "projects": Array [],
                "scrapeJavaScript": true,
                "slug": "org-slug",
                "status": Object {
                  "id": "active",
                  "name": "active",
                },
                "teams": Array [],
              }
            }
            project={
              Object {
                "environments": Array [],
                "hasAccess": true,
                "id": "2",
                "isBookmarked": false,
                "isMember": true,
                "name": "Project Name",
                "slug": "project-slug",
                "teams": Array [
                  Object {
                    "id": "3",
                    "isMember": true,
                    "memberCount": 0,
                    "name": "COOL TEAM",
                    "slug": "cool-team",
                  },
                ],
              }
            }
            value={
              Array [
                Object {
                  "actor": Object {
                    "id": "1",
                    "name": "Jane Bloggs",
                    "type": "user",
                  },
                  "label": <IdBadge
                    avatarSize={24}
                    hideEmail={true}
                    useLink={false}
                    user={
                      Object {
                        "email": "janebloggs@example.com",
                        "flags": Object {
                          "newsletter_consent_prompt": false,
                        },
                        "hasPasswordAuth": true,
                        "id": "1",
                        "isAuthenticated": true,
                        "name": "Jane Bloggs",
                        "options": Object {
                          "timezone": "UTC",
                        },
                        "user": Object {
                          "email": "janebloggs@example.com",
                          "id": "1",
                          "name": "Jane Bloggs",
                        },
                        "username": "foo@example.com",
                      }
                    }
                  />,
                  "searchKey": "janebloggs@example.com jane bloggs",
                  "value": "user:1",
                },
              ]
            }
          >
            <EmotionCssPropInternal
              __EMOTION_TYPE_PLEASE_DO_NOT_USE__={
                Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "render": [Function],
                }
              }
              async={true}
              cache={false}
              clearable={true}
              css={
                Object {
                  "name": "fs1hps-SelectOwners",
                  "styles": "width:200px;;label:SelectOwners;",
                }
              }
              defaultOptions={true}
              deprecatedSelectControl={true}
              filterOptions={[Function]}
              loadOptions={[Function]}
              onChange={[Function]}
              onInputChange={[Function]}
              placeholder="owners"
              value={
                Array [
                  Object {
                    "actor": Object {
                      "id": "1",
                      "name": "Jane Bloggs",
                      "type": "user",
                    },
                    "label": <IdBadge
                      avatarSize={24}
                      hideEmail={true}
                      useLink={false}
                      user={
                        Object {
                          "email": "janebloggs@example.com",
                          "flags": Object {
                            "newsletter_consent_prompt": false,
                          },
                          "hasPasswordAuth": true,
                          "id": "1",
                          "isAuthenticated": true,
                          "name": "Jane Bloggs",
                          "options": Object {
                            "timezone": "UTC",
                          },
                          "user": Object {
                            "email": "janebloggs@example.com",
                            "id": "1",
                            "name": "Jane Bloggs",
                          },
                          "username": "foo@example.com",
                        }
                      }
                    />,
                    "searchKey": "janebloggs@example.com jane bloggs",
                    "value": "user:1",
                  },
                ]
              }
              valueComponent={[Function]}
            >
              <ForwardRef(MultiSelectControl)
                async={true}
                cache={false}
                className="css-fs1hps-SelectOwners"
                clearable={true}
                defaultOptions={true}
                deprecatedSelectControl={true}
                filterOptions={[Function]}
                loadOptions={[Function]}
                onChange={[Function]}
                onInputChange={[Function]}
                placeholder="owners"
                value={
                  Array [
                    Object {
                      "actor": Object {
                        "id": "1",
                        "name": "Jane Bloggs",
                        "type": "user",
                      },
                      "label": <IdBadge
                        avatarSize={24}
                        hideEmail={true}
                        useLink={false}
                        user={
                          Object {
                            "email": "janebloggs@example.com",
                            "flags": Object {
                              "newsletter_consent_prompt": false,
                            },
                            "hasPasswordAuth": true,
                            "id": "1",
                            "isAuthenticated": true,
                            "name": "Jane Bloggs",
                            "options": Object {
                              "timezone": "UTC",
                            },
                            "user": Object {
                              "email": "janebloggs@example.com",
                              "id": "1",
                              "name": "Jane Bloggs",
                            },
                            "username": "foo@example.com",
                          }
                        }
                      />,
                      "searchKey": "janebloggs@example.com jane bloggs",
                      "value": "user:1",
                    },
                  ]
                }
                valueComponent={[Function]}
              >
                <ForwardRef(RefForwardedSelectControl)
                  async={true}
                  cache={false}
                  className="css-fs1hps-SelectOwners"
                  clearable={true}
                  defaultOptions={true}
                  deprecatedSelectControl={true}
                  filterOptions={[Function]}
                  forwardedRef={[Function]}
                  loadOptions={[Function]}
                  multiple={true}
                  onChange={[Function]}
                  onInputChange={[Function]}
                  placeholder="owners"
                  value={
                    Array [
                      Object {
                        "actor": Object {
                          "id": "1",
                          "name": "Jane Bloggs",
                          "type": "user",
                        },
                        "label": <IdBadge
                          avatarSize={24}
                          hideEmail={true}
                          useLink={false}
                          user={
                            Object {
                              "email": "janebloggs@example.com",
                              "flags": Object {
                                "newsletter_consent_prompt": false,
                              },
                              "hasPasswordAuth": true,
                              "id": "1",
                              "isAuthenticated": true,
                              "name": "Jane Bloggs",
                              "options": Object {
                                "timezone": "UTC",
                              },
                              "user": Object {
                                "email": "janebloggs@example.com",
                                "id": "1",
                                "name": "Jane Bloggs",
                              },
                              "username": "foo@example.com",
                            }
                          }
                        />,
                        "searchKey": "janebloggs@example.com jane bloggs",
                        "value": "user:1",
                      },
                    ]
                  }
                  valueComponent={[Function]}
                >
                  <SelectControl
                    async={true}
                    cache={false}
                    className="css-fs1hps-SelectOwners"
                    clearable={true}
                    defaultOptions={true}
                    deprecatedSelectControl={true}
                    filterOptions={[Function]}
                    forwardedRef={[Function]}
                    loadOptions={[Function]}
                    multiple={true}
                    onChange={[Function]}
                    onInputChange={[Function]}
                    placeholder="owners"
                    value={
                      Array [
                        Object {
                          "actor": Object {
                            "id": "1",
                            "name": "Jane Bloggs",
                            "type": "user",
                          },
                          "label": <IdBadge
                            avatarSize={24}
                            hideEmail={true}
                            useLink={false}
                            user={
                              Object {
                                "email": "janebloggs@example.com",
                                "flags": Object {
                                  "newsletter_consent_prompt": false,
                                },
                                "hasPasswordAuth": true,
                                "id": "1",
                                "isAuthenticated": true,
                                "name": "Jane Bloggs",
                                "options": Object {
                                  "timezone": "UTC",
                                },
                                "user": Object {
                                  "email": "janebloggs@example.com",
                                  "id": "1",
                                  "name": "Jane Bloggs",
                                },
                                "username": "foo@example.com",
                              }
                            }
                          />,
                          "searchKey": "janebloggs@example.com jane bloggs",
                          "value": "user:1",
                        },
                      ]
                    }
                    valueComponent={[Function]}
                  >
                    <SelectControlLegacy
                      async={true}
                      cache={false}
                      className="css-fs1hps-SelectOwners"
                      clearable={true}
                      defaultOptions={true}
                      filterOptions={[Function]}
                      forwardedRef={[Function]}
                      height={36}
                      loadOptions={[Function]}
                      multiple={true}
                      onChange={[Function]}
                      onInputChange={[Function]}
                      placeholder="owners"
                      value={
                        Array [
                          Object {
                            "actor": Object {
                              "id": "1",
                              "name": "Jane Bloggs",
                              "type": "user",
                            },
                            "label": <IdBadge
                              avatarSize={24}
                              hideEmail={true}
                              useLink={false}
                              user={
                                Object {
                                  "email": "janebloggs@example.com",
                                  "flags": Object {
                                    "newsletter_consent_prompt": false,
                                  },
                                  "hasPasswordAuth": true,
                                  "id": "1",
                                  "isAuthenticated": true,
                                  "name": "Jane Bloggs",
                                  "options": Object {
                                    "timezone": "UTC",
                                  },
                                  "user": Object {
                                    "email": "janebloggs@example.com",
                                    "id": "1",
                                    "name": "Jane Bloggs",
                                  },
                                  "username": "foo@example.com",
                                }
                              }
                            />,
                            "searchKey": "janebloggs@example.com jane bloggs",
                            "value": "user:1",
                          },
                        ]
                      }
                      valueComponent={[Function]}
                    >
                      <StyledSelect
                        arrowRenderer={[Function]}
                        async={true}
                        backspaceRemoves={true}
                        cache={false}
                        className="css-fs1hps-SelectOwners"
                        clearable={true}
                        defaultOptions={true}
                        deleteRemoves={true}
                        filterOptions={[Function]}
                        forwardedRef={[Function]}
                        height={36}
                        loadOptions={[Function]}
                        multi={true}
                        multiple={true}
                        onChange={[Function]}
                        onInputChange={[Function]}
                        placeholder="owners"
                        value={
                          Array [
                            Object {
                              "actor": Object {
                                "id": "1",
                                "name": "Jane Bloggs",
                                "type": "user",
                              },
                              "label": <IdBadge
                                avatarSize={24}
                                hideEmail={true}
                                useLink={false}
                                user={
                                  Object {
                                    "email": "janebloggs@example.com",
                                    "flags": Object {
                                      "newsletter_consent_prompt": false,
                                    },
                                    "hasPasswordAuth": true,
                                    "id": "1",
                                    "isAuthenticated": true,
                                    "name": "Jane Bloggs",
                                    "options": Object {
                                      "timezone": "UTC",
                                    },
                                    "user": Object {
                                      "email": "janebloggs@example.com",
                                      "id": "1",
                                      "name": "Jane Bloggs",
                                    },
                                    "username": "foo@example.com",
                                  }
                                }
                              />,
                              "searchKey": "janebloggs@example.com jane bloggs",
                              "value": "user:1",
                            },
                          ]
                        }
                        valueComponent={[Function]}
                      >
                        <SelectPicker
                          arrowRenderer={[Function]}
                          async={true}
                          backspaceRemoves={true}
                          cache={false}
                          className="css-gv7e0o-StyledSelect-SelectOwners e1ynsgsr0"
                          clearable={true}
                          defaultOptions={true}
                          deleteRemoves={true}
                          filterOptions={[Function]}
                          forwardedRef={[Function]}
                          height={36}
                          loadOptions={[Function]}
                          multi={true}
                          multiple={true}
                          onChange={[Function]}
                          onInputChange={[Function]}
                          placeholder="owners"
                          value={
                            Array [
                              Object {
                                "actor": Object {
                                  "id": "1",
                                  "name": "Jane Bloggs",
                                  "type": "user",
                                },
                                "label": <IdBadge
                                  avatarSize={24}
                                  hideEmail={true}
                                  useLink={false}
                                  user={
                                    Object {
                                      "email": "janebloggs@example.com",
                                      "flags": Object {
                                        "newsletter_consent_prompt": false,
                                      },
                                      "hasPasswordAuth": true,
                                      "id": "1",
                                      "isAuthenticated": true,
                                      "name": "Jane Bloggs",
                                      "options": Object {
                                        "timezone": "UTC",
                                      },
                                      "user": Object {
                                        "email": "janebloggs@example.com",
                                        "id": "1",
                                        "name": "Jane Bloggs",
                                      },
                                      "username": "foo@example.com",
                                    }
                                  }
                                />,
                                "searchKey": "janebloggs@example.com jane bloggs",
                                "value": "user:1",
                              },
                            ]
                          }
                          valueComponent={[Function]}
                        >
                          <Async
                            arrowRenderer={[Function]}
                            autoload={true}
                            backspaceRemoves={true}
                            cache={false}
                            className="css-gv7e0o-StyledSelect-SelectOwners e1ynsgsr0"
                            clearable={true}
                            defaultOptions={true}
                            deleteRemoves={true}
                            filterOptions={[Function]}
                            height={36}
                            ignoreAccents={true}
                            ignoreCase={true}
                            loadOptions={[Function]}
                            loadingPlaceholder="Loading..."
                            multi={true}
                            multiple={true}
                            onChange={[Function]}
                            onInputChange={[Function]}
                            options={Array []}
                            placeholder="owners"
                            searchPromptText="Type to search"
                            value={
                              Array [
                                Object {
                                  "actor": Object {
                                    "id": "1",
                                    "name": "Jane Bloggs",
                                    "type": "user",
                                  },
                                  "label": <IdBadge
                                    avatarSize={24}
                                    hideEmail={true}
                                    useLink={false}
                                    user={
                                      Object {
                                        "email": "janebloggs@example.com",
                                        "flags": Object {
                                          "newsletter_consent_prompt": false,
                                        },
                                        "hasPasswordAuth": true,
                                        "id": "1",
                                        "isAuthenticated": true,
                                        "name": "Jane Bloggs",
                                        "options": Object {
                                          "timezone": "UTC",
                                        },
                                        "user": Object {
                                          "email": "janebloggs@example.com",
                                          "id": "1",
                                          "name": "Jane Bloggs",
                                        },
                                        "username": "foo@example.com",
                                      }
                                    }
                                  />,
                                  "searchKey": "janebloggs@example.com jane bloggs",
                                  "value": "user:1",
                                },
                              ]
                            }
                            valueComponent={[Function]}
                          >
                            <Select
                              arrowRenderer={[Function]}
                              autoload={true}
                              autosize={true}
                              backspaceRemoves={true}
                              backspaceToRemoveMessage="Press backspace to remove {label}"
                              cache={false}
                              className="css-gv7e0o-StyledSelect-SelectOwners e1ynsgsr0"
                              clearAllText="Clear all"
                              clearRenderer={[Function]}
                              clearValueText="Clear value"
                              clearable={true}
                              closeOnSelect={true}
                              defaultOptions={true}
                              deleteRemoves={true}
                              delimiter=","
                              disabled={false}
                              escapeClearsValue={true}
                              filterOptions={[Function]}
                              height={36}
                              ignoreAccents={true}
                              ignoreCase={true}
                              inputProps={Object {}}
                              isLoading={false}
                              joinValues={false}
                              labelKey="label"
                              loadOptions={[Function]}
                              loadingPlaceholder="Loading..."
                              matchPos="any"
                              matchProp="any"
                              menuBuffer={0}
                              menuRenderer={[Function]}
                              multi={true}
                              multiple={true}
                              noResultsText="Type to search"
                              onBlurResetsInput={true}
                              onChange={[Function]}
                              onCloseResetsInput={true}
                              onInputChange={[Function]}
                              onSelectResetsInput={true}
                              openOnClick={true}
                              optionComponent={[Function]}
                              options={
                                Array [
                                  Object {
                                    "actor": Object {
                                      "id": "1",
                                      "name": "Jane Bloggs",
                                      "type": "user",
                                    },
                                    "label": <IdBadge
                                      avatarSize={24}
                                      hideEmail={true}
                                      useLink={false}
                                      user={
                                        Object {
                                          "email": "janebloggs@example.com",
                                          "flags": Object {
                                            "newsletter_consent_prompt": false,
                                          },
                                          "hasPasswordAuth": true,
                                          "id": "1",
                                          "isAuthenticated": true,
                                          "name": "Jane Bloggs",
                                          "options": Object {
                                            "timezone": "UTC",
                                          },
                                          "user": Object {
                                            "email": "janebloggs@example.com",
                                            "id": "1",
                                            "name": "Jane Bloggs",
                                          },
                                          "username": "foo@example.com",
                                        }
                                      }
                                    />,
                                    "searchKey": "janebloggs@example.com jane bloggs",
                                    "value": "user:1",
                                  },
                                  Object {
                                    "actor": Object {
                                      "id": "3",
                                      "name": "cool-team",
                                      "type": "team",
                                    },
                                    "label": <IdBadge
                                      team={
                                        Object {
                                          "id": "3",
                                          "isMember": true,
                                          "memberCount": 0,
                                          "name": "COOL TEAM",
                                          "slug": "cool-team",
                                        }
                                      }
                                    />,
                                    "searchKey": "#cool-team",
                                    "value": "team:3",
                                  },
                                  Object {
                                    "actor": Object {
                                      "id": "4",
                                      "name": "team-not-in-project",
                                      "type": "team",
                                    },
                                    "disabled": true,
                                    "label": <ForwardRef(render)
                                      justifyContent="space-between"
                                    >
                                      <ForwardRef(render)>
                                        <Tooltip
                                          containerDisplayMode="inline-block"
                                          position="left"
                                          title="#team-not-in-project is not a member of project"
                                        >
                                          <IdBadge
                                            team={
                                              Object {
                                                "id": "4",
                                                "isMember": true,
                                                "memberCount": 0,
                                                "name": "TEAM NOT IN PROJECT",
                                                "slug": "team-not-in-project",
                                              }
                                            }
                                          />
                                        </Tooltip>
                                      </ForwardRef(render)>
                                      <Tooltip
                                        containerDisplayMode="inline-block"
                                        position="top"
                                        title="Add #team-not-in-project to project"
                                      >
                                        <ForwardRef(render)
                                          borderless={true}
                                          disabled={false}
                                          icon={
                                            <ForwardRef(IconAdd)
                                              circle={true}
                                            />
                                          }
                                          onClick={[Function]}
                                          size="zero"
                                        />
                                      </Tooltip>
                                    </ForwardRef(render)>,
                                    "searchKey": "#team-not-in-project",
                                    "value": "team:4",
                                  },
                                  Object {
                                    "actor": Object {
                                      "id": "2",
                                      "name": "John Smith",
                                      "type": "user",
                                    },
                                    "disabled": true,
                                    "label": <ForwardRef(render)>
                                      <Tooltip
                                        containerDisplayMode="inline-block"
                                        position="left"
                                        title="John Smith is not a member of project"
                                      >
                                        <IdBadge
                                          avatarSize={24}
                                          hideEmail={true}
                                          useLink={false}
                                          user={
                                            Object {
                                              "email": "johnsmith@example.com",
                                              "id": "2",
                                              "name": "John Smith",
                                            }
                                          }
                                        />
                                      </Tooltip>
                                    </ForwardRef(render)>,
                                    "searchKey": "johnsmith@example.com john smith",
                                    "value": "user:2",
                                  },
                                ]
                              }
                              pageSize={5}
                              placeholder="owners"
                              removeSelected={true}
                              required={false}
                              rtl={false}
                              scrollMenuIntoView={true}
                              searchPromptText="Type to search"
                              searchable={true}
                              simpleValue={false}
                              tabSelectsValue={true}
                              trimFilter={true}
                              value={
                                Array [
                                  Object {
                                    "actor": Object {
                                      "id": "1",
                                      "name": "Jane Bloggs",
                                      "type": "user",
                                    },
                                    "label": <IdBadge
                                      avatarSize={24}
                                      hideEmail={true}
                                      useLink={false}
                                      user={
                                        Object {
                                          "email": "janebloggs@example.com",
                                          "flags": Object {
                                            "newsletter_consent_prompt": false,
                                          },
                                          "hasPasswordAuth": true,
                                          "id": "1",
                                          "isAuthenticated": true,
                                          "name": "Jane Bloggs",
                                          "options": Object {
                                            "timezone": "UTC",
                                          },
                                          "user": Object {
                                            "email": "janebloggs@example.com",
                                            "id": "1",
                                            "name": "Jane Bloggs",
                                          },
                                          "username": "foo@example.com",
                                        }
                                      }
                                    />,
                                    "searchKey": "janebloggs@example.com jane bloggs",
                                    "value": "user:1",
                                  },
                                ]
                              }
                              valueComponent={[Function]}
                              valueKey="value"
                            >
                              <div
                                className="Select css-gv7e0o-StyledSelect-SelectOwners e1ynsgsr0 has-value is-clearable is-focused is-searchable Select--multi"
                              >
                                <div
                                  className="Select-control"
                                  onKeyDown={[Function]}
                                  onMouseDown={[Function]}
                                  onTouchEnd={[Function]}
                                  onTouchMove={[Function]}
                                  onTouchStart={[Function]}
                                >
                                  <div
                                    className="Select-multi-value-wrapper"
                                    id="react-select-5--value"
                                  >
                                    <ValueComponent
                                      disabled={false}
                                      id="react-select-5--value-0"
                                      instancePrefix="react-select-5-"
                                      key="value-0-user:1"
                                      onClick={null}
                                      onRemove={[Function]}
                                      placeholder="owners"
                                      value={
                                        Object {
                                          "actor": Object {
                                            "id": "1",
                                            "name": "Jane Bloggs",
                                            "type": "user",
                                          },
                                          "label": <IdBadge
                                            avatarSize={24}
                                            hideEmail={true}
                                            useLink={false}
                                            user={
                                              Object {
                                                "email": "janebloggs@example.com",
                                                "flags": Object {
                                                  "newsletter_consent_prompt": false,
                                                },
                                                "hasPasswordAuth": true,
                                                "id": "1",
                                                "isAuthenticated": true,
                                                "name": "Jane Bloggs",
                                                "options": Object {
                                                  "timezone": "UTC",
                                                },
                                                "user": Object {
                                                  "email": "janebloggs@example.com",
                                                  "id": "1",
                                                  "name": "Jane Bloggs",
                                                },
                                                "username": "foo@example.com",
                                              }
                                            }
                                          />,
                                          "searchKey": "janebloggs@example.com jane bloggs",
                                          "value": "user:1",
                                        }
                                      }
                                      values={
                                        Array [
                                          Object {
                                            "actor": Object {
                                              "id": "1",
                                              "name": "Jane Bloggs",
                                              "type": "user",
                                            },
                                            "label": <IdBadge
                                              avatarSize={24}
                                              hideEmail={true}
                                              useLink={false}
                                              user={
                                                Object {
                                                  "email": "janebloggs@example.com",
                                                  "flags": Object {
                                                    "newsletter_consent_prompt": false,
                                                  },
                                                  "hasPasswordAuth": true,
                                                  "id": "1",
                                                  "isAuthenticated": true,
                                                  "name": "Jane Bloggs",
                                                  "options": Object {
                                                    "timezone": "UTC",
                                                  },
                                                  "user": Object {
                                                    "email": "janebloggs@example.com",
                                                    "id": "1",
                                                    "name": "Jane Bloggs",
                                                  },
                                                  "username": "foo@example.com",
                                                }
                                              }
                                            />,
                                            "searchKey": "janebloggs@example.com jane bloggs",
                                            "value": "user:1",
                                          },
                                        ]
                                      }
                                    >
                                      <a
                                        onClick={[Function]}
                                      >
                                        <ActorAvatar
                                          actor={
                                            Object {
                                              "id": "1",
                                              "name": "Jane Bloggs",
                                              "type": "user",
                                            }
                                          }
                                          size={28}
                                        >
                                          <UserAvatar
                                            gravatar={false}
                                            hasTooltip={true}
                                            size={28}
                                            user={
                                              Object {
                                                "email": "janebloggs@example.com",
                                                "flags": Object {
                                                  "newsletter_consent_prompt": false,
                                                },
                                                "hasPasswordAuth": true,
                                                "id": "1",
                                                "isAuthenticated": true,
                                                "name": "Jane Bloggs",
                                                "options": Object {
                                                  "timezone": "UTC",
                                                },
                                                "user": Object {
                                                  "email": "janebloggs@example.com",
                                                  "id": "1",
                                                  "name": "Jane Bloggs",
                                                },
                                                "username": "foo@example.com",
                                              }
                                            }
                                          >
                                            <BaseAvatar
                                              gravatarId="janebloggs@example.com"
                                              hasTooltip={true}
                                              letterId="janebloggs@example.com"
                                              round={true}
                                              size={28}
                                              style={Object {}}
                                              title="Jane Bloggs"
                                              tooltip="Jane Bloggs (janebloggs@example.com)"
                                              type="letter_avatar"
                                              uploadId=""
                                              uploadPath="avatar"
                                            >
                                              <Tooltip
                                                containerDisplayMode="inline-block"
                                                disabled={false}
                                                position="top"
                                                title="Jane Bloggs (janebloggs@example.com)"
                                              >
                                                <Manager>
                                                  <Reference>
                                                    <InnerReference
                                                      setReferenceNode={[Function]}
                                                    >
                                                      <Container
                                                        aria-describedby="tooltip-123456"
                                                        containerDisplayMode="inline-block"
                                                        onBlur={[Function]}
                                                        onFocus={[Function]}
                                                        onMouseEnter={[Function]}
                                                        onMouseLeave={[Function]}
                                                      >
                                                        <span
                                                          aria-describedby="tooltip-123456"
                                                          className="css-sce1yi-Container eowlwvy0"
                                                          onBlur={[Function]}
                                                          onFocus={[Function]}
                                                          onMouseEnter={[Function]}
                                                          onMouseLeave={[Function]}
                                                        >
                                                          <StyledBaseAvatar
                                                            className="avatar"
                                                            gravatarId="janebloggs@example.com"
                                                            letterId="janebloggs@example.com"
                                                            loaded={true}
                                                            round={true}
                                                            style={
                                                              Object {
                                                                "height": "28px",
                                                                "width": "28px",
                                                              }
                                                            }
                                                            title="Jane Bloggs"
                                                            type="letter_avatar"
                                                            uploadId=""
                                                            uploadPath="avatar"
                                                          >
                                                            <span
                                                              className="avatar css-1mqfg1n-StyledBaseAvatar e147uwb0"
                                                              style={
                                                                Object {
                                                                  "height": "28px",
                                                                  "width": "28px",
                                                                }
                                                              }
                                                              title="Jane Bloggs"
                                                              type="letter_avatar"
                                                            >
                                                              <ForwardRef
                                                                displayName="Jane Bloggs"
                                                                identifier="janebloggs@example.com"
                                                                round={true}
                                                              >
                                                                <LetterAvatar
                                                                  displayName="Jane Bloggs"
                                                                  forwardedRef={null}
                                                                  identifier="janebloggs@example.com"
                                                                  round={true}
                                                                >
                                                                  <Component
                                                                    className="css-1oxr9oh-LetterAvatar e12lgfev0"
                                                                    displayName="Jane Bloggs"
                                                                    forwardedRef={null}
                                                                    identifier="janebloggs@example.com"
                                                                    round={true}
                                                                  >
                                                                    <svg
                                                                      className="css-1oxr9oh-LetterAvatar e12lgfev0"
                                                                      viewBox="0 0 120 120"
                                                                    >
                                                                      <rect
                                                                        fill="#4e3fb4"
                                                                        height="120"
                                                                        rx="15"
                                                                        ry="15"
                                                                        width="120"
                                                                        x="0"
                                                                        y="0"
                                                                      />
                                                                      <text
                                                                        fill="#FFFFFF"
                                                                        fontSize="65"
                                                                        style={
                                                                          Object {
                                                                            "dominantBaseline": "central",
                                                                          }
                                                                        }
                                                                        textAnchor="middle"
                                                                        x="50%"
                                                                        y="50%"
                                                                      >
                                                                        JB
                                                                      </text>
                                                                    </svg>
                                                                  </Component>
                                                                </LetterAvatar>
                                                              </ForwardRef>
                                                            </span>
                                                          </StyledBaseAvatar>
                                                        </span>
                                                      </Container>
                                                    </InnerReference>
                                                  </Reference>
                                                </Manager>
                                              </Tooltip>
                                            </BaseAvatar>
                                          </UserAvatar>
                                        </ActorAvatar>
                                      </a>
                                    </ValueComponent>
                                    <AutosizeInput
                                      aria-activedescendant="react-select-5--value"
                                      aria-expanded="false"
                                      aria-haspopup="false"
                                      aria-owns="react-select-5--backspace-remove-message"
                                      className="Select-input"
                                      injectStyles={true}
                                      minWidth="5"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      required={false}
                                      role="combobox"
                                      value=""
                                    >
                                      <div
                                        className="Select-input"
                                        style={
                                          Object {
                                            "display": "inline-block",
                                          }
                                        }
                                      >
                                        <input
                                          aria-activedescendant="react-select-5--value"
                                          aria-expanded="false"
                                          aria-haspopup="false"
                                          aria-owns="react-select-5--backspace-remove-message"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          required={false}
                                          role="combobox"
                                          style={
                                            Object {
                                              "boxSizing": "content-box",
                                              "width": "5px",
                                            }
                                          }
                                          value=""
                                        />
                                        <div
                                          style={
                                            Object {
                                              "height": 0,
                                              "left": 0,
                                              "overflow": "scroll",
                                              "position": "absolute",
                                              "top": 0,
                                              "visibility": "hidden",
                                              "whiteSpace": "pre",
                                            }
                                          }
                                        />
                                      </div>
                                    </AutosizeInput>
                                  </div>
                                  <span
                                    aria-live="assertive"
                                    className="Select-aria-only"
                                    id="react-select-5--backspace-remove-message"
                                  >
                                    Press backspace to remove [object Object]
                                  </span>
                                  <span
                                    aria-label="Clear all"
                                    className="Select-clear-zone"
                                    onMouseDown={[Function]}
                                    onTouchEnd={[Function]}
                                    onTouchMove={[Function]}
                                    onTouchStart={[Function]}
                                    title="Clear all"
                                  >
                                    <span
                                      className="Select-clear"
                                      dangerouslySetInnerHTML={
                                        Object {
                                          "__html": "&times;",
                                        }
                                      }
                                    />
                                  </span>
                                  <span
                                    className="Select-arrow-zone"
                                    onMouseDown={[Function]}
                                  >
                                    <span
                                      className="icon-arrow-down"
                                    />
                                  </span>
                                </div>
                              </div>
                            </Select>
                          </Async>
                        </SelectPicker>
                      </StyledSelect>
                    </SelectControlLegacy>
                  </SelectControl>
                </ForwardRef(RefForwardedSelectControl)>
              </ForwardRef(MultiSelectControl)>
            </EmotionCssPropInternal>
          </SelectOwners>
        </div>
      </SelectOwnersWrapper>
      <AddButton
        disabled={false}
        icon={
          <ForwardRef(IconAdd)
            circle={true}
            size="xs"
          />
        }
        onClick={[Function]}
        priority="primary"
        size="small"
      >
        <forwardRef<Button>
          className="css-f6y09s-AddButton e1hyuoc710"
          disabled={false}
          icon={
            <ForwardRef(IconAdd)
              circle={true}
              size="xs"
            />
          }
          onClick={[Function]}
          priority="primary"
          size="small"
        >
          <Button
            align="center"
            className="css-f6y09s-AddButton e1hyuoc710"
            disabled={false}
            forwardRef={null}
            icon={
              <ForwardRef(IconAdd)
                circle={true}
                size="xs"
              />
            }
            onClick={[Function]}
            priority="primary"
            size="small"
          >
            <StyledButton
              aria-disabled={false}
              className="css-f6y09s-AddButton e1hyuoc710"
              disabled={false}
              forwardRef={null}
              onClick={[Function]}
              priority="primary"
              role="button"
              size="small"
            >
              <Component
                aria-disabled={false}
                className="e1hyuoc710 css-cdfv3-StyledButton-AddButton edwq9my0"
                forwardRef={null}
                onClick={[Function]}
                role="button"
                size="small"
              >
                <button
                  aria-disabled={false}
                  className="e1hyuoc710 css-cdfv3-StyledButton-AddButton edwq9my0"
                  onClick={[Function]}
                  role="button"
                  size="small"
                >
                  <ButtonLabel
                    align="center"
                    priority="primary"
                    size="small"
                  >
                    <Component
                      align="center"
                      className="css-19gcr2f-ButtonLabel edwq9my1"
                      priority="primary"
                      size="small"
                    >
                      <span
                        className="css-19gcr2f-ButtonLabel edwq9my1"
                      >
                        <Icon
                          hasChildren={false}
                          size="small"
                        >
                          <Component
                            className="css-1j44i9a-Icon edwq9my2"
                            hasChildren={false}
                            size="small"
                          >
                            <span
                              className="css-1j44i9a-Icon edwq9my2"
                              size="small"
                            >
                              <ForwardRef(IconAdd)
                                circle={true}
                                size="xs"
                              >
                                <svg
                                  fill="currentColor"
                                  height="12px"
                                  viewBox="0 0 16 16"
                                  width="12px"
                                >
                                  <g>
                                    <path
                                      d="M11.28,8.75H4.72a.75.75,0,1,1,0-1.5h6.56a.75.75,0,1,1,0,1.5Z"
                                    />
                                    <path
                                      d="M8,12a.76.76,0,0,1-.75-.75V4.72a.75.75,0,0,1,1.5,0v6.56A.76.76,0,0,1,8,12Z"
                                    />
                                    <path
                                      d="M8,16a8,8,0,1,1,8-8A8,8,0,0,1,8,16ZM8,1.53A6.47,6.47,0,1,0,14.47,8,6.47,6.47,0,0,0,8,1.53Z"
                                    />
                                  </g>
                                </svg>
                              </ForwardRef(IconAdd)>
                            </span>
                          </Component>
                        </Icon>
                      </span>
                    </Component>
                  </ButtonLabel>
                </button>
              </Component>
            </StyledButton>
          </Button>
        </forwardRef<Button>>
      </AddButton>
    </div>
  </BuilderBar>
</RuleBuilder>
`;
