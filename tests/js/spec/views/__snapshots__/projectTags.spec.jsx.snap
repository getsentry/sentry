// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ProjectTags renders 1`] = `
.glamor-4 {
  font-size: 14px;
  box-shadow: inset 0 -1px 0;
  margin: -20px 0 30px;
}

.glamor-2 {
  box-sizing: border-box;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

.glamor-0 {
  font-size: 20px;
  font-weight: bold;
  margin: 20px 0;
  -webkit-flex: 1;
  -ms-flex: 1;
  flex: 1;
}

.glamor-6 {
  line-height: 1.5;
  margin-bottom: 30px;
}

<ProjectTags
  params={
    Object {
      "orgId": "org-slug",
      "projectId": "project-slug",
    }
  }
>
  <SideEffect(DocumentTitle)
    title="Sentry"
  >
    <DocumentTitle
      title="Sentry"
    >
      <div>
        <SettingsPageHeading
          title="Tags"
        >
          <Styled(div)>
            <div
              className="glamor-4 glamor-5"
            >
              <Flex
                align="center"
              >
                <Base
                  align="center"
                  className="glamor-2"
                >
                  <div
                    className="glamor-2"
                    is={null}
                  >
                    <Styled(div)>
                      <div
                        className="glamor-0 glamor-1"
                      >
                        Tags
                      </div>
                    </Styled(div)>
                  </div>
                </Base>
              </Flex>
            </div>
          </Styled(div)>
        </SettingsPageHeading>
        <Styled(div)>
          <div
            className="glamor-6 glamor-7"
          >
            Each event in Sentry may be annotated with various tags (key and value pairs). Learn how to
             
            <ExternalLink
              href="https://docs.sentry.io/hosted/learn/context/"
              rel="noreferrer noopener"
              target="_blank"
            >
              <a
                href="https://docs.sentry.io/hosted/learn/context/"
                rel="noreferrer noopener"
                target="_blank"
              >
                add custom tags
              </a>
            </ExternalLink>
            .
          </div>
        </Styled(div)>
        <div
          className="panel panel-default"
        >
          <table
            className="table"
          >
            <thead>
              <tr>
                <th>
                  Tags
                </th>
                <th
                  style={
                    Object {
                      "width": 20,
                    }
                  }
                />
              </tr>
            </thead>
            <tbody>
              <tr
                key="browser"
              >
                <td>
                  <h5>
                    Browser
                     
                    <small>
                      (
                      browser
                      )
                    </small>
                  </h5>
                </td>
                <td>
                  <LinkWithConfirmation
                    className="btn btn-sm btn-default"
                    message="Are you sure you want to remove this tag?"
                    onConfirm={[Function]}
                    title="Remove tag?"
                  >
                    <Confirm
                      cancelText="Cancel"
                      confirmText="Confirm"
                      message="Are you sure you want to remove this tag?"
                      onConfirm={[Function]}
                      priority="primary"
                    >
                      <a
                        className="btn btn-sm btn-default"
                        onClick={[Function]}
                        title="Remove tag?"
                      >
                        <span
                          className="icon icon-trash"
                        />
                        <Modal
                          animation={false}
                          autoFocus={true}
                          backdrop={true}
                          bsClass="modal"
                          dialogComponentClass={[Function]}
                          enforceFocus={true}
                          key="confirm"
                          keyboard={true}
                          manager={
                            ModalManager {
                              "add": [Function],
                              "containers": Array [],
                              "data": Array [],
                              "handleContainerOverflow": true,
                              "hideSiblingNodes": true,
                              "isTopModal": [Function],
                              "modals": Array [],
                              "remove": [Function],
                            }
                          }
                          onHide={[Function]}
                          renderBackdrop={[Function]}
                          restoreFocus={true}
                          show={false}
                        >
                          <Modal
                            autoFocus={true}
                            backdrop={true}
                            backdropClassName="modal-backdrop"
                            containerClassName="modal-open"
                            enforceFocus={true}
                            keyboard={true}
                            manager={
                              ModalManager {
                                "add": [Function],
                                "containers": Array [],
                                "data": Array [],
                                "handleContainerOverflow": true,
                                "hideSiblingNodes": true,
                                "isTopModal": [Function],
                                "modals": Array [],
                                "remove": [Function],
                              }
                            }
                            onEntering={[Function]}
                            onExited={[Function]}
                            onHide={[Function]}
                            renderBackdrop={[Function]}
                            restoreFocus={true}
                            show={false}
                          />
                        </Modal>
                      </a>
                    </Confirm>
                  </LinkWithConfirmation>
                </td>
              </tr>
              <tr
                key="device"
              >
                <td>
                  <h5>
                    Device
                     
                    <small>
                      (
                      device
                      )
                    </small>
                  </h5>
                </td>
                <td>
                  <LinkWithConfirmation
                    className="btn btn-sm btn-default"
                    message="Are you sure you want to remove this tag?"
                    onConfirm={[Function]}
                    title="Remove tag?"
                  >
                    <Confirm
                      cancelText="Cancel"
                      confirmText="Confirm"
                      message="Are you sure you want to remove this tag?"
                      onConfirm={[Function]}
                      priority="primary"
                    >
                      <a
                        className="btn btn-sm btn-default"
                        onClick={[Function]}
                        title="Remove tag?"
                      >
                        <span
                          className="icon icon-trash"
                        />
                        <Modal
                          animation={false}
                          autoFocus={true}
                          backdrop={true}
                          bsClass="modal"
                          dialogComponentClass={[Function]}
                          enforceFocus={true}
                          key="confirm"
                          keyboard={true}
                          manager={
                            ModalManager {
                              "add": [Function],
                              "containers": Array [],
                              "data": Array [],
                              "handleContainerOverflow": true,
                              "hideSiblingNodes": true,
                              "isTopModal": [Function],
                              "modals": Array [],
                              "remove": [Function],
                            }
                          }
                          onHide={[Function]}
                          renderBackdrop={[Function]}
                          restoreFocus={true}
                          show={false}
                        >
                          <Modal
                            autoFocus={true}
                            backdrop={true}
                            backdropClassName="modal-backdrop"
                            containerClassName="modal-open"
                            enforceFocus={true}
                            keyboard={true}
                            manager={
                              ModalManager {
                                "add": [Function],
                                "containers": Array [],
                                "data": Array [],
                                "handleContainerOverflow": true,
                                "hideSiblingNodes": true,
                                "isTopModal": [Function],
                                "modals": Array [],
                                "remove": [Function],
                              }
                            }
                            onEntering={[Function]}
                            onExited={[Function]}
                            onHide={[Function]}
                            renderBackdrop={[Function]}
                            restoreFocus={true}
                            show={false}
                          />
                        </Modal>
                      </a>
                    </Confirm>
                  </LinkWithConfirmation>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </DocumentTitle>
  </SideEffect(DocumentTitle)>
</ProjectTags>
`;
