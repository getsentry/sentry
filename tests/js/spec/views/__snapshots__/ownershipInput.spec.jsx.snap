// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Project Ownership Input renders 1`] = `
<OwnerInput
  initialText="url:src @dummy@example.com"
  organization={
    Object {
      "access": Array [
        "org:read",
        "org:write",
        "org:admin",
        "org:integrations",
        "project:read",
        "project:write",
        "project:admin",
        "team:read",
        "team:write",
        "team:admin",
      ],
      "experiments": Object {},
      "features": Array [],
      "id": "3",
      "name": "Organization Name",
      "onboardingTasks": Array [],
      "projects": Array [],
      "scrapeJavaScript": true,
      "slug": "org-slug",
      "status": Object {
        "id": "active",
        "name": "active",
      },
      "teams": Array [],
    }
  }
  params={
    Object {
      "orgId": "org-slug",
      "projectId": "project-slug",
    }
  }
  project={
    Object {
      "environments": Array [],
      "hasAccess": true,
      "id": "2",
      "isBookmarked": false,
      "isMember": true,
      "name": "Project Name",
      "slug": "project-slug",
      "teams": Array [],
    }
  }
>
  <RuleBuilder
    onAddRule={[Function]}
    organization={
      Object {
        "access": Array [
          "org:read",
          "org:write",
          "org:admin",
          "org:integrations",
          "project:read",
          "project:write",
          "project:admin",
          "team:read",
          "team:write",
          "team:admin",
        ],
        "experiments": Object {},
        "features": Array [],
        "id": "3",
        "name": "Organization Name",
        "onboardingTasks": Array [],
        "projects": Array [],
        "scrapeJavaScript": true,
        "slug": "org-slug",
        "status": Object {
          "id": "active",
          "name": "active",
        },
        "teams": Array [],
      }
    }
    project={
      Object {
        "environments": Array [],
        "hasAccess": true,
        "id": "2",
        "isBookmarked": false,
        "isMember": true,
        "name": "Project Name",
        "slug": "project-slug",
        "teams": Array [],
      }
    }
  >
    <BuilderBar>
      <div
        className="css-1k7bckg-BuilderBar e1hyuoc75"
      >
        <BuilderSelect
          clearable={false}
          deprecatedSelectControl={true}
          disabled={false}
          hideErrorMessage={false}
          multiple={false}
          name="select-type"
          onChange={[Function]}
          options={
            Array [
              Object {
                "label": "Path",
                "value": "path",
              },
              Object {
                "label": "URL",
                "value": "url",
              },
            ]
          }
          required={false}
          showSearch={false}
          style={
            Object {
              "width": 140,
            }
          }
          value="path"
        >
          <SelectField
            className="css-10lzdlx-BuilderSelect e1hyuoc76"
            clearable={false}
            deprecatedSelectControl={true}
            disabled={false}
            hideErrorMessage={false}
            multiple={false}
            name="select-type"
            onChange={[Function]}
            options={
              Array [
                Object {
                  "label": "Path",
                  "value": "path",
                },
                Object {
                  "label": "URL",
                  "value": "url",
                },
              ]
            }
            required={false}
            showSearch={false}
            style={
              Object {
                "width": 140,
              }
            }
            value="path"
          >
            <div
              className="css-10lzdlx-BuilderSelect e1hyuoc76"
              style={
                Object {
                  "width": 140,
                }
              }
            >
              <div
                className="controls"
              >
                <StyledSelectControl
                  clearable={false}
                  deprecatedSelectControl={true}
                  disabled={false}
                  id="id-select-type"
                  multiple={false}
                  name="select-type"
                  onChange={[Function]}
                  options={
                    Array [
                      Object {
                        "label": "Path",
                        "value": "path",
                      },
                      Object {
                        "label": "URL",
                        "value": "url",
                      },
                    ]
                  }
                  required={false}
                  value="path"
                >
                  <ForwardRef(RefForwardedSelectControl)
                    className="css-9gm53a-StyledSelectControl e1qrhqd00"
                    clearable={false}
                    deprecatedSelectControl={true}
                    disabled={false}
                    id="id-select-type"
                    multiple={false}
                    name="select-type"
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "Path",
                          "value": "path",
                        },
                        Object {
                          "label": "URL",
                          "value": "url",
                        },
                      ]
                    }
                    required={false}
                    value="path"
                  >
                    <SelectControl
                      className="css-9gm53a-StyledSelectControl e1qrhqd00"
                      clearable={false}
                      deprecatedSelectControl={true}
                      disabled={false}
                      forwardedRef={null}
                      id="id-select-type"
                      multiple={false}
                      name="select-type"
                      onChange={[Function]}
                      options={
                        Array [
                          Object {
                            "label": "Path",
                            "value": "path",
                          },
                          Object {
                            "label": "URL",
                            "value": "url",
                          },
                        ]
                      }
                      required={false}
                      value="path"
                    >
                      <SelectControlLegacy
                        className="css-9gm53a-StyledSelectControl e1qrhqd00"
                        clearable={false}
                        disabled={false}
                        forwardedRef={null}
                        height={36}
                        id="id-select-type"
                        multiple={false}
                        name="select-type"
                        onChange={[Function]}
                        options={
                          Array [
                            Object {
                              "label": "Path",
                              "value": "path",
                            },
                            Object {
                              "label": "URL",
                              "value": "url",
                            },
                          ]
                        }
                        required={false}
                        value="path"
                      >
                        <StyledSelect
                          arrowRenderer={[Function]}
                          backspaceRemoves={false}
                          className="css-9gm53a-StyledSelectControl e1qrhqd00"
                          clearable={false}
                          deleteRemoves={false}
                          disabled={false}
                          forwardedRef={null}
                          height={36}
                          id="id-select-type"
                          multiple={false}
                          name="select-type"
                          onChange={[Function]}
                          options={
                            Array [
                              Object {
                                "label": "Path",
                                "value": "path",
                              },
                              Object {
                                "label": "URL",
                                "value": "url",
                              },
                            ]
                          }
                          required={false}
                          value="path"
                        >
                          <SelectPicker
                            arrowRenderer={[Function]}
                            backspaceRemoves={false}
                            className="e1qrhqd00 css-j0gflv-StyledSelect-StyledSelectControl e1ynsgsr0"
                            clearable={false}
                            deleteRemoves={false}
                            disabled={false}
                            forwardedRef={null}
                            height={36}
                            id="id-select-type"
                            multiple={false}
                            name="select-type"
                            onChange={[Function]}
                            options={
                              Array [
                                Object {
                                  "label": "Path",
                                  "value": "path",
                                },
                                Object {
                                  "label": "URL",
                                  "value": "url",
                                },
                              ]
                            }
                            required={false}
                            value="path"
                          >
                            <Select
                              arrowRenderer={[Function]}
                              autosize={true}
                              backspaceRemoves={false}
                              backspaceToRemoveMessage="Press backspace to remove {label}"
                              className="e1qrhqd00 css-j0gflv-StyledSelect-StyledSelectControl e1ynsgsr0"
                              clearAllText="Clear all"
                              clearRenderer={[Function]}
                              clearValueText="Clear value"
                              clearable={false}
                              closeOnSelect={true}
                              deleteRemoves={false}
                              delimiter=","
                              disabled={false}
                              escapeClearsValue={true}
                              filterOptions={[Function]}
                              height={36}
                              id="id-select-type"
                              ignoreAccents={true}
                              ignoreCase={true}
                              inputProps={Object {}}
                              isLoading={false}
                              joinValues={false}
                              labelKey="label"
                              matchPos="any"
                              matchProp="any"
                              menuBuffer={0}
                              menuRenderer={[Function]}
                              multi={false}
                              multiple={false}
                              name="select-type"
                              noResultsText="No results found"
                              onBlurResetsInput={true}
                              onChange={[Function]}
                              onCloseResetsInput={true}
                              onSelectResetsInput={true}
                              openOnClick={true}
                              optionComponent={[Function]}
                              options={
                                Array [
                                  Object {
                                    "label": "Path",
                                    "value": "path",
                                  },
                                  Object {
                                    "label": "URL",
                                    "value": "url",
                                  },
                                ]
                              }
                              pageSize={5}
                              placeholder="Select..."
                              removeSelected={true}
                              required={false}
                              rtl={false}
                              scrollMenuIntoView={true}
                              searchable={true}
                              simpleValue={false}
                              tabSelectsValue={true}
                              trimFilter={true}
                              value="path"
                              valueComponent={[Function]}
                              valueKey="value"
                            >
                              <div
                                className="Select e1qrhqd00 css-j0gflv-StyledSelect-StyledSelectControl e1ynsgsr0 has-value is-searchable Select--single"
                              >
                                <input
                                  disabled={false}
                                  key="hidden.0"
                                  name="select-type"
                                  type="hidden"
                                  value="path"
                                />
                                <div
                                  className="Select-control"
                                  onKeyDown={[Function]}
                                  onMouseDown={[Function]}
                                  onTouchEnd={[Function]}
                                  onTouchMove={[Function]}
                                  onTouchStart={[Function]}
                                >
                                  <div
                                    className="Select-multi-value-wrapper"
                                    id="react-select-2--value"
                                  >
                                    <Value
                                      disabled={false}
                                      id="react-select-2--value-item"
                                      instancePrefix="react-select-2-"
                                      onClick={null}
                                      placeholder="Select..."
                                      value={
                                        Object {
                                          "label": "Path",
                                          "value": "path",
                                        }
                                      }
                                    >
                                      <div
                                        className="Select-value"
                                      >
                                        <span
                                          aria-selected="true"
                                          className="Select-value-label"
                                          id="react-select-2--value-item"
                                          role="option"
                                        >
                                          Path
                                        </span>
                                      </div>
                                    </Value>
                                    <AutosizeInput
                                      aria-activedescendant="react-select-2--value"
                                      aria-expanded="false"
                                      aria-haspopup="false"
                                      aria-owns=""
                                      className="Select-input"
                                      id="id-select-type"
                                      injectStyles={true}
                                      minWidth="5"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      onFocus={[Function]}
                                      required={false}
                                      role="combobox"
                                      value=""
                                    >
                                      <div
                                        className="Select-input"
                                        style={
                                          Object {
                                            "display": "inline-block",
                                          }
                                        }
                                      >
                                        <input
                                          aria-activedescendant="react-select-2--value"
                                          aria-expanded="false"
                                          aria-haspopup="false"
                                          aria-owns=""
                                          id="id-select-type"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          required={false}
                                          role="combobox"
                                          style={
                                            Object {
                                              "boxSizing": "content-box",
                                              "width": "5px",
                                            }
                                          }
                                          value=""
                                        />
                                        <div
                                          style={
                                            Object {
                                              "height": 0,
                                              "left": 0,
                                              "overflow": "scroll",
                                              "position": "absolute",
                                              "top": 0,
                                              "visibility": "hidden",
                                              "whiteSpace": "pre",
                                            }
                                          }
                                        />
                                      </div>
                                    </AutosizeInput>
                                  </div>
                                  <span
                                    className="Select-arrow-zone"
                                    onMouseDown={[Function]}
                                  >
                                    <span
                                      className="icon-arrow-down"
                                    />
                                  </span>
                                </div>
                              </div>
                            </Select>
                          </SelectPicker>
                        </StyledSelect>
                      </SelectControlLegacy>
                    </SelectControl>
                  </ForwardRef(RefForwardedSelectControl)>
                </StyledSelectControl>
              </div>
            </div>
          </SelectField>
        </BuilderSelect>
        <BuilderInput
          controlled={true}
          onChange={[Function]}
          placeholder="src/example/*"
          value=""
        >
          <input
            className="css-n5owx7-Input-BuilderInput e1hyuoc77"
            onChange={[Function]}
            placeholder="src/example/*"
            value=""
          />
        </BuilderInput>
        <Divider
          src="icon-chevron-right"
        >
          <ForwardRef
            className="css-1qihtir-InlineSvg-Divider e1hyuoc78"
            src="icon-chevron-right"
          >
            <svg
              className="css-1qihtir-InlineSvg-Divider e1hyuoc78"
              height="1em"
              viewBox={Object {}}
              width="1em"
            >
              <use
                href="#test"
                xlinkHref="#test"
              />
            </svg>
          </ForwardRef>
        </Divider>
        <SelectOwnersWrapper>
          <div
            className="css-1518iv7-SelectOwnersWrapper e1hyuoc79"
          >
            <SelectOwners
              onChange={[Function]}
              organization={
                Object {
                  "access": Array [
                    "org:read",
                    "org:write",
                    "org:admin",
                    "org:integrations",
                    "project:read",
                    "project:write",
                    "project:admin",
                    "team:read",
                    "team:write",
                    "team:admin",
                  ],
                  "experiments": Object {},
                  "features": Array [],
                  "id": "3",
                  "name": "Organization Name",
                  "onboardingTasks": Array [],
                  "projects": Array [],
                  "scrapeJavaScript": true,
                  "slug": "org-slug",
                  "status": Object {
                    "id": "active",
                    "name": "active",
                  },
                  "teams": Array [],
                }
              }
              project={
                Object {
                  "environments": Array [],
                  "hasAccess": true,
                  "id": "2",
                  "isBookmarked": false,
                  "isMember": true,
                  "name": "Project Name",
                  "slug": "project-slug",
                  "teams": Array [],
                }
              }
              value={Array []}
            >
              <EmotionCssPropInternal
                __EMOTION_TYPE_PLEASE_DO_NOT_USE__={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "render": [Function],
                  }
                }
                async={true}
                cache={false}
                clearable={true}
                css={
                  Object {
                    "name": "fs1hps-SelectOwners",
                    "styles": "width:200px;;label:SelectOwners;",
                  }
                }
                defaultOptions={true}
                deprecatedSelectControl={true}
                filterOptions={[Function]}
                loadOptions={[Function]}
                onChange={[Function]}
                onInputChange={[Function]}
                placeholder="owners"
                value={Array []}
                valueComponent={[Function]}
              >
                <ForwardRef(MultiSelectControl)
                  async={true}
                  cache={false}
                  className="css-fs1hps-SelectOwners"
                  clearable={true}
                  defaultOptions={true}
                  deprecatedSelectControl={true}
                  filterOptions={[Function]}
                  loadOptions={[Function]}
                  onChange={[Function]}
                  onInputChange={[Function]}
                  placeholder="owners"
                  value={Array []}
                  valueComponent={[Function]}
                >
                  <ForwardRef(RefForwardedSelectControl)
                    async={true}
                    cache={false}
                    className="css-fs1hps-SelectOwners"
                    clearable={true}
                    defaultOptions={true}
                    deprecatedSelectControl={true}
                    filterOptions={[Function]}
                    forwardedRef={[Function]}
                    loadOptions={[Function]}
                    multiple={true}
                    onChange={[Function]}
                    onInputChange={[Function]}
                    placeholder="owners"
                    value={Array []}
                    valueComponent={[Function]}
                  >
                    <SelectControl
                      async={true}
                      cache={false}
                      className="css-fs1hps-SelectOwners"
                      clearable={true}
                      defaultOptions={true}
                      deprecatedSelectControl={true}
                      filterOptions={[Function]}
                      forwardedRef={[Function]}
                      loadOptions={[Function]}
                      multiple={true}
                      onChange={[Function]}
                      onInputChange={[Function]}
                      placeholder="owners"
                      value={Array []}
                      valueComponent={[Function]}
                    >
                      <SelectControlLegacy
                        async={true}
                        cache={false}
                        className="css-fs1hps-SelectOwners"
                        clearable={true}
                        defaultOptions={true}
                        filterOptions={[Function]}
                        forwardedRef={[Function]}
                        height={36}
                        loadOptions={[Function]}
                        multiple={true}
                        onChange={[Function]}
                        onInputChange={[Function]}
                        placeholder="owners"
                        value={Array []}
                        valueComponent={[Function]}
                      >
                        <StyledSelect
                          arrowRenderer={[Function]}
                          async={true}
                          backspaceRemoves={true}
                          cache={false}
                          className="css-fs1hps-SelectOwners"
                          clearable={true}
                          defaultOptions={true}
                          deleteRemoves={true}
                          filterOptions={[Function]}
                          forwardedRef={[Function]}
                          height={36}
                          loadOptions={[Function]}
                          multi={true}
                          multiple={true}
                          onChange={[Function]}
                          onInputChange={[Function]}
                          placeholder="owners"
                          value={Array []}
                          valueComponent={[Function]}
                        >
                          <SelectPicker
                            arrowRenderer={[Function]}
                            async={true}
                            backspaceRemoves={true}
                            cache={false}
                            className="css-gv7e0o-StyledSelect-SelectOwners e1ynsgsr0"
                            clearable={true}
                            defaultOptions={true}
                            deleteRemoves={true}
                            filterOptions={[Function]}
                            forwardedRef={[Function]}
                            height={36}
                            loadOptions={[Function]}
                            multi={true}
                            multiple={true}
                            onChange={[Function]}
                            onInputChange={[Function]}
                            placeholder="owners"
                            value={Array []}
                            valueComponent={[Function]}
                          >
                            <Async
                              arrowRenderer={[Function]}
                              autoload={true}
                              backspaceRemoves={true}
                              cache={false}
                              className="css-gv7e0o-StyledSelect-SelectOwners e1ynsgsr0"
                              clearable={true}
                              defaultOptions={true}
                              deleteRemoves={true}
                              filterOptions={[Function]}
                              height={36}
                              ignoreAccents={true}
                              ignoreCase={true}
                              loadOptions={[Function]}
                              loadingPlaceholder="Loading..."
                              multi={true}
                              multiple={true}
                              onChange={[Function]}
                              onInputChange={[Function]}
                              options={Array []}
                              placeholder="owners"
                              searchPromptText="Type to search"
                              value={Array []}
                              valueComponent={[Function]}
                            >
                              <Select
                                arrowRenderer={[Function]}
                                autoload={true}
                                autosize={true}
                                backspaceRemoves={true}
                                backspaceToRemoveMessage="Press backspace to remove {label}"
                                cache={false}
                                className="css-gv7e0o-StyledSelect-SelectOwners e1ynsgsr0"
                                clearAllText="Clear all"
                                clearRenderer={[Function]}
                                clearValueText="Clear value"
                                clearable={true}
                                closeOnSelect={true}
                                defaultOptions={true}
                                deleteRemoves={true}
                                delimiter=","
                                disabled={false}
                                escapeClearsValue={true}
                                filterOptions={[Function]}
                                height={36}
                                ignoreAccents={true}
                                ignoreCase={true}
                                inputProps={Object {}}
                                isLoading={true}
                                joinValues={false}
                                labelKey="label"
                                loadOptions={[Function]}
                                loadingPlaceholder="Loading..."
                                matchPos="any"
                                matchProp="any"
                                menuBuffer={0}
                                menuRenderer={[Function]}
                                multi={true}
                                multiple={true}
                                noResultsText="Loading..."
                                onBlurResetsInput={true}
                                onChange={[Function]}
                                onCloseResetsInput={true}
                                onInputChange={[Function]}
                                onSelectResetsInput={true}
                                openOnClick={true}
                                optionComponent={[Function]}
                                options={Array []}
                                pageSize={5}
                                placeholder="Loading..."
                                removeSelected={true}
                                required={false}
                                rtl={false}
                                scrollMenuIntoView={true}
                                searchPromptText="Type to search"
                                searchable={true}
                                simpleValue={false}
                                tabSelectsValue={true}
                                trimFilter={true}
                                value={Array []}
                                valueComponent={[Function]}
                                valueKey="value"
                              >
                                <div
                                  className="Select css-gv7e0o-StyledSelect-SelectOwners e1ynsgsr0 is-clearable is-loading is-searchable Select--multi"
                                >
                                  <div
                                    className="Select-control"
                                    onKeyDown={[Function]}
                                    onMouseDown={[Function]}
                                    onTouchEnd={[Function]}
                                    onTouchMove={[Function]}
                                    onTouchStart={[Function]}
                                  >
                                    <div
                                      className="Select-multi-value-wrapper"
                                      id="react-select-3--value"
                                    >
                                      <div
                                        className="Select-placeholder"
                                      >
                                        Loading...
                                      </div>
                                      <AutosizeInput
                                        aria-activedescendant="react-select-3--value"
                                        aria-expanded="false"
                                        aria-haspopup="false"
                                        aria-owns=""
                                        className="Select-input"
                                        injectStyles={true}
                                        minWidth="5"
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        required={false}
                                        role="combobox"
                                        value=""
                                      >
                                        <div
                                          className="Select-input"
                                          style={
                                            Object {
                                              "display": "inline-block",
                                            }
                                          }
                                        >
                                          <input
                                            aria-activedescendant="react-select-3--value"
                                            aria-expanded="false"
                                            aria-haspopup="false"
                                            aria-owns=""
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            required={false}
                                            role="combobox"
                                            style={
                                              Object {
                                                "boxSizing": "content-box",
                                                "width": "5px",
                                              }
                                            }
                                            value=""
                                          />
                                          <div
                                            style={
                                              Object {
                                                "height": 0,
                                                "left": 0,
                                                "overflow": "scroll",
                                                "position": "absolute",
                                                "top": 0,
                                                "visibility": "hidden",
                                                "whiteSpace": "pre",
                                              }
                                            }
                                          />
                                        </div>
                                      </AutosizeInput>
                                    </div>
                                    <span
                                      aria-hidden="true"
                                      className="Select-loading-zone"
                                    >
                                      <span
                                        className="Select-loading"
                                      />
                                    </span>
                                    <span
                                      className="Select-arrow-zone"
                                      onMouseDown={[Function]}
                                    >
                                      <span
                                        className="icon-arrow-down"
                                      />
                                    </span>
                                  </div>
                                </div>
                              </Select>
                            </Async>
                          </SelectPicker>
                        </StyledSelect>
                      </SelectControlLegacy>
                    </SelectControl>
                  </ForwardRef(RefForwardedSelectControl)>
                </ForwardRef(MultiSelectControl)>
              </EmotionCssPropInternal>
            </SelectOwners>
          </div>
        </SelectOwnersWrapper>
        <AddButton
          disabled={true}
          icon={
            <ForwardRef(IconAdd)
              circle={true}
              size="xs"
            />
          }
          onClick={[Function]}
          priority="primary"
          size="small"
        >
          <forwardRef<Button>
            className="css-f6y09s-AddButton e1hyuoc710"
            disabled={true}
            icon={
              <ForwardRef(IconAdd)
                circle={true}
                size="xs"
              />
            }
            onClick={[Function]}
            priority="primary"
            size="small"
          >
            <Button
              align="center"
              className="css-f6y09s-AddButton e1hyuoc710"
              disabled={true}
              forwardRef={null}
              icon={
                <ForwardRef(IconAdd)
                  circle={true}
                  size="xs"
                />
              }
              onClick={[Function]}
              priority="primary"
              size="small"
            >
              <StyledButton
                aria-disabled={true}
                className="css-f6y09s-AddButton e1hyuoc710"
                disabled={true}
                forwardRef={null}
                onClick={[Function]}
                priority="primary"
                role="button"
                size="small"
              >
                <Component
                  aria-disabled={true}
                  className="e1hyuoc710 css-1vf07fg-StyledButton-AddButton edwq9my0"
                  forwardRef={null}
                  onClick={[Function]}
                  role="button"
                  size="small"
                >
                  <button
                    aria-disabled={true}
                    className="e1hyuoc710 css-1vf07fg-StyledButton-AddButton edwq9my0"
                    onClick={[Function]}
                    role="button"
                    size="small"
                  >
                    <ButtonLabel
                      align="center"
                      priority="primary"
                      size="small"
                    >
                      <span
                        className="css-n7mdnv-ButtonLabel edwq9my1"
                      >
                        <Icon
                          hasChildren={false}
                          size="small"
                        >
                          <span
                            className="css-dm7gfi-Icon edwq9my2"
                            size="small"
                          >
                            <ForwardRef(IconAdd)
                              circle={true}
                              size="xs"
                            >
                              <svg
                                fill="currentColor"
                                height="12px"
                                viewBox="0 0 16 16"
                                width="12px"
                              >
                                <g>
                                  <path
                                    d="M11.28,8.75H4.72a.75.75,0,1,1,0-1.5h6.56a.75.75,0,1,1,0,1.5Z"
                                  />
                                  <path
                                    d="M8,12a.76.76,0,0,1-.75-.75V4.72a.75.75,0,0,1,1.5,0v6.56A.76.76,0,0,1,8,12Z"
                                  />
                                  <path
                                    d="M8,16a8,8,0,1,1,8-8A8,8,0,0,1,8,16ZM8,1.53A6.47,6.47,0,1,0,14.47,8,6.47,6.47,0,0,0,8,1.53Z"
                                  />
                                </g>
                              </svg>
                            </ForwardRef(IconAdd)>
                          </span>
                        </Icon>
                      </span>
                    </ButtonLabel>
                  </button>
                </Component>
              </StyledButton>
            </Button>
          </forwardRef<Button>>
        </AddButton>
      </div>
    </BuilderBar>
  </RuleBuilder>
  <div
    onKeyDown={[Function]}
    style={
      Object {
        "position": "relative",
      }
    }
  >
    <StyledTextArea
      async={false}
      autoCapitalize="off"
      autoComplete="off"
      autoCorrect="off"
      onChange={[Function]}
      placeholder="#example usage
path:src/example/pipeline/* person@sentry.io #infra
url:http://example.com/settings/* #product"
      rows={1}
      spellCheck="false"
      value="new"
    >
      <TextareaAutosize
        async={false}
        autoCapitalize="off"
        autoComplete="off"
        autoCorrect="off"
        className="css-2r1wnf-StyledTextArea en3n9di3"
        onChange={[Function]}
        placeholder="#example usage
path:src/example/pipeline/* person@sentry.io #infra
url:http://example.com/settings/* #product"
        rows={1}
        spellCheck="false"
        value="new"
      >
        <textarea
          async={false}
          autoCapitalize="off"
          autoComplete="off"
          autoCorrect="off"
          className="css-2r1wnf-StyledTextArea en3n9di3"
          onChange={[Function]}
          placeholder="#example usage
path:src/example/pipeline/* person@sentry.io #infra
url:http://example.com/settings/* #product"
          rows={1}
          spellCheck="false"
          value="new"
        />
      </TextareaAutosize>
    </StyledTextArea>
    <ActionBar>
      <div
        className="css-hgonoe-ActionBar en3n9di0"
      >
        <div />
        <SaveButton>
          <div
            className="css-q90es8-SaveButton en3n9di2"
          >
            <forwardRef<Button>
              disabled={false}
              onClick={[Function]}
              priority="primary"
              size="small"
            >
              <Button
                align="center"
                disabled={false}
                forwardRef={null}
                onClick={[Function]}
                priority="primary"
                size="small"
              >
                <StyledButton
                  aria-disabled={false}
                  aria-label="Save Changes"
                  disabled={false}
                  forwardRef={null}
                  onClick={[Function]}
                  priority="primary"
                  role="button"
                  size="small"
                >
                  <Component
                    aria-disabled={false}
                    aria-label="Save Changes"
                    className="css-z8at1v-StyledButton edwq9my0"
                    forwardRef={null}
                    onClick={[Function]}
                    role="button"
                    size="small"
                  >
                    <button
                      aria-disabled={false}
                      aria-label="Save Changes"
                      className="css-z8at1v-StyledButton edwq9my0"
                      onClick={[Function]}
                      role="button"
                      size="small"
                    >
                      <ButtonLabel
                        align="center"
                        priority="primary"
                        size="small"
                      >
                        <span
                          className="css-n7mdnv-ButtonLabel edwq9my1"
                        >
                          Save Changes
                        </span>
                      </ButtonLabel>
                    </button>
                  </Component>
                </StyledButton>
              </Button>
            </forwardRef<Button>>
          </div>
        </SaveButton>
      </div>
    </ActionBar>
  </div>
</OwnerInput>
`;
