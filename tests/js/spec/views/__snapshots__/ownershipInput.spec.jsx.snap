// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Project Ownership Input renders 1`] = `
<OwnerInput
  initialText="url:src @dummy@example.com"
  organization={
    Object {
      "access": Array [
        "org:read",
        "org:write",
        "org:admin",
        "project:read",
        "project:write",
        "project:admin",
        "team:read",
        "team:write",
        "team:admin",
      ],
      "features": Array [],
      "id": "3",
      "name": "Organization Name",
      "onboardingTasks": Array [],
      "projects": Array [],
      "scrapeJavaScript": true,
      "slug": "org-slug",
      "status": Object {
        "id": "active",
        "name": "active",
      },
      "teams": Array [],
    }
  }
  params={
    Object {
      "orgId": "org-slug",
      "projectId": "project-slug",
    }
  }
  project={
    Object {
      "hasAccess": true,
      "id": "2",
      "isBookmarked": false,
      "isMember": true,
      "name": "Project Name",
      "slug": "project-slug",
      "teams": Array [],
    }
  }
>
  <RuleBuilder
    onAddRule={[Function]}
    organization={
      Object {
        "access": Array [
          "org:read",
          "org:write",
          "org:admin",
          "project:read",
          "project:write",
          "project:admin",
          "team:read",
          "team:write",
          "team:admin",
        ],
        "features": Array [],
        "id": "3",
        "name": "Organization Name",
        "onboardingTasks": Array [],
        "projects": Array [],
        "scrapeJavaScript": true,
        "slug": "org-slug",
        "status": Object {
          "id": "active",
          "name": "active",
        },
        "teams": Array [],
      }
    }
    project={
      Object {
        "hasAccess": true,
        "id": "2",
        "isBookmarked": false,
        "isMember": true,
        "name": "Project Name",
        "slug": "project-slug",
        "teams": Array [],
      }
    }
  >
    <BuilderBar>
      <div
        className="css-1kvuz3c-BuilderBar e1hyuoc75"
      >
        <BuilderSelect
          clearable={false}
          name="select-type"
          onChange={[Function]}
          options={
            Array [
              Object {
                "label": "Path",
                "value": "path",
              },
              Object {
                "label": "URL",
                "value": "url",
              },
            ]
          }
          showSearch={false}
          style={
            Object {
              "width": 140,
            }
          }
          value="path"
        >
          <SelectField
            className="css-1bclqmz-BuilderSelect e1hyuoc76"
            clearable={false}
            disabled={false}
            hideErrorMessage={false}
            name="select-type"
            onChange={[Function]}
            options={
              Array [
                Object {
                  "label": "Path",
                  "value": "path",
                },
                Object {
                  "label": "URL",
                  "value": "url",
                },
              ]
            }
            required={false}
            showSearch={false}
            style={
              Object {
                "width": 140,
              }
            }
            value="path"
          >
            <div
              className="css-1bclqmz-BuilderSelect e1hyuoc76"
              style={
                Object {
                  "width": 140,
                }
              }
            >
              <div
                className="controls"
              >
                <SelectControl
                  clearable={false}
                  disabled={false}
                  id="id-select-type"
                  onChange={[Function]}
                  options={
                    Array [
                      Object {
                        "label": "Path",
                        "value": "path",
                      },
                      Object {
                        "label": "URL",
                        "value": "url",
                      },
                    ]
                  }
                  required={false}
                  value="path"
                >
                  <StyledSelect
                    arrowRenderer={[Function]}
                    clearable={false}
                    disabled={false}
                    id="id-select-type"
                    onChange={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "Path",
                          "value": "path",
                        },
                        Object {
                          "label": "URL",
                          "value": "url",
                        },
                      ]
                    }
                    required={false}
                    value="path"
                  >
                    <SelectPicker
                      arrowRenderer={[Function]}
                      className="css-16280ey-StyledSelect eho28m20"
                      clearable={false}
                      disabled={false}
                      id="id-select-type"
                      onChange={[Function]}
                      options={
                        Array [
                          Object {
                            "label": "Path",
                            "value": "path",
                          },
                          Object {
                            "label": "URL",
                            "value": "url",
                          },
                        ]
                      }
                      required={false}
                      value="path"
                    >
                      <Select
                        arrowRenderer={[Function]}
                        autosize={true}
                        backspaceRemoves={true}
                        backspaceToRemoveMessage="Press backspace to remove {label}"
                        className="css-16280ey-StyledSelect eho28m20"
                        clearAllText="Clear all"
                        clearRenderer={[Function]}
                        clearValueText="Clear value"
                        clearable={false}
                        closeOnSelect={true}
                        deleteRemoves={true}
                        delimiter=","
                        disabled={false}
                        escapeClearsValue={true}
                        filterOptions={[Function]}
                        id="id-select-type"
                        ignoreAccents={true}
                        ignoreCase={true}
                        inputProps={Object {}}
                        isLoading={false}
                        joinValues={false}
                        labelKey="label"
                        matchPos="any"
                        matchProp="any"
                        menuBuffer={0}
                        menuRenderer={[Function]}
                        multi={false}
                        noResultsText="No results found"
                        onBlurResetsInput={true}
                        onChange={[Function]}
                        onCloseResetsInput={true}
                        onSelectResetsInput={true}
                        openOnClick={true}
                        optionComponent={[Function]}
                        options={
                          Array [
                            Object {
                              "label": "Path",
                              "value": "path",
                            },
                            Object {
                              "label": "URL",
                              "value": "url",
                            },
                          ]
                        }
                        pageSize={5}
                        placeholder="Select..."
                        removeSelected={true}
                        required={false}
                        rtl={false}
                        scrollMenuIntoView={true}
                        searchable={true}
                        simpleValue={false}
                        tabSelectsValue={true}
                        trimFilter={true}
                        value="path"
                        valueComponent={[Function]}
                        valueKey="value"
                      >
                        <div
                          className="Select css-16280ey-StyledSelect eho28m20 has-value is-searchable Select--single"
                        >
                          <div
                            className="Select-control"
                            onKeyDown={[Function]}
                            onMouseDown={[Function]}
                            onTouchEnd={[Function]}
                            onTouchMove={[Function]}
                            onTouchStart={[Function]}
                          >
                            <span
                              className="Select-multi-value-wrapper"
                              id="react-select-2--value"
                            >
                              <Value
                                disabled={false}
                                id="react-select-2--value-item"
                                instancePrefix="react-select-2-"
                                onClick={null}
                                placeholder="Select..."
                                value={
                                  Object {
                                    "label": "Path",
                                    "value": "path",
                                  }
                                }
                              >
                                <div
                                  className="Select-value"
                                >
                                  <span
                                    aria-selected="true"
                                    className="Select-value-label"
                                    id="react-select-2--value-item"
                                    role="option"
                                  >
                                    Path
                                  </span>
                                </div>
                              </Value>
                              <AutosizeInput
                                aria-activedescendant="react-select-2--value"
                                aria-expanded="false"
                                aria-haspopup="false"
                                aria-owns=""
                                className="Select-input"
                                id="id-select-type"
                                injectStyles={true}
                                minWidth="5"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                required={false}
                                role="combobox"
                                value=""
                              >
                                <div
                                  className="Select-input"
                                  style={
                                    Object {
                                      "display": "inline-block",
                                    }
                                  }
                                >
                                  <input
                                    aria-activedescendant="react-select-2--value"
                                    aria-expanded="false"
                                    aria-haspopup="false"
                                    aria-owns=""
                                    id="id-select-type"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    required={false}
                                    role="combobox"
                                    style={
                                      Object {
                                        "boxSizing": "content-box",
                                        "width": "5px",
                                      }
                                    }
                                    value=""
                                  />
                                  <div
                                    style={
                                      Object {
                                        "height": 0,
                                        "left": 0,
                                        "overflow": "scroll",
                                        "position": "absolute",
                                        "top": 0,
                                        "visibility": "hidden",
                                        "whiteSpace": "pre",
                                      }
                                    }
                                  />
                                </div>
                              </AutosizeInput>
                            </span>
                            <span
                              className="Select-arrow-zone"
                              onMouseDown={[Function]}
                            >
                              <span
                                className="icon-arrow-down"
                              />
                            </span>
                          </div>
                        </div>
                      </Select>
                    </SelectPicker>
                  </StyledSelect>
                </SelectControl>
              </div>
            </div>
          </SelectField>
        </BuilderSelect>
        <BuilderInput
          controlled={true}
          onChange={[Function]}
          placeholder="src/example/*"
          value=""
        >
          <input
            className="css-1xtn8xn-Input-inputStyles-BuilderInput e1hyuoc77"
            onChange={[Function]}
            placeholder="src/example/*"
            value=""
          />
        </BuilderInput>
        <Divider
          src="icon-chevron-right"
        >
          <InlineSvg
            className="css-a4tn6s-Divider e1hyuoc78"
            src="icon-chevron-right"
          >
            <StyledSvg
              className="css-a4tn6s-Divider e1hyuoc78"
              height="1em"
              viewBox={Object {}}
              width="1em"
            >
              <svg
                className="e1hyuoc78 css-1uv43pt-StyledSvg-Divider e2idor0"
                height="1em"
                viewBox={Object {}}
                width="1em"
              >
                <use
                  href="#test"
                  xlinkHref="#test"
                />
              </svg>
            </StyledSvg>
          </InlineSvg>
        </Divider>
        <Flex
          align="center"
          flex="1"
          mr={1}
        >
          <Base
            align="center"
            className="css-1q48dzo"
            flex="1"
            mr={1}
          >
            <div
              className="css-1q48dzo"
              is={null}
            >
              <SelectOwners
                onChange={[Function]}
                organization={
                  Object {
                    "access": Array [
                      "org:read",
                      "org:write",
                      "org:admin",
                      "project:read",
                      "project:write",
                      "project:admin",
                      "team:read",
                      "team:write",
                      "team:admin",
                    ],
                    "features": Array [],
                    "id": "3",
                    "name": "Organization Name",
                    "onboardingTasks": Array [],
                    "projects": Array [],
                    "scrapeJavaScript": true,
                    "slug": "org-slug",
                    "status": Object {
                      "id": "active",
                      "name": "active",
                    },
                    "teams": Array [],
                  }
                }
                project={
                  Object {
                    "hasAccess": true,
                    "id": "2",
                    "isBookmarked": false,
                    "isMember": true,
                    "name": "Project Name",
                    "slug": "project-slug",
                    "teams": Array [],
                  }
                }
                value={Array []}
              >
                <MultiSelectControl
                  async={true}
                  cache={false}
                  className="css-1domaf0"
                  defaultOptions={true}
                  filterOptions={[Function]}
                  loadOptions={[Function]}
                  onChange={[Function]}
                  onInputChange={[Function]}
                  placeholder="Add Owners"
                  value={Array []}
                  valueComponent={[Function]}
                >
                  <SelectControl
                    async={true}
                    cache={false}
                    className="css-1domaf0"
                    defaultOptions={true}
                    filterOptions={[Function]}
                    loadOptions={[Function]}
                    multi={true}
                    onChange={[Function]}
                    onInputChange={[Function]}
                    placeholder="Add Owners"
                    value={Array []}
                    valueComponent={[Function]}
                  >
                    <StyledSelect
                      arrowRenderer={[Function]}
                      async={true}
                      cache={false}
                      className="css-1domaf0"
                      defaultOptions={true}
                      filterOptions={[Function]}
                      loadOptions={[Function]}
                      multi={true}
                      onChange={[Function]}
                      onInputChange={[Function]}
                      placeholder="Add Owners"
                      value={Array []}
                      valueComponent={[Function]}
                    >
                      <SelectPicker
                        arrowRenderer={[Function]}
                        async={true}
                        cache={false}
                        className="css-11osmt1-StyledSelect eho28m20"
                        defaultOptions={true}
                        filterOptions={[Function]}
                        loadOptions={[Function]}
                        multi={true}
                        onChange={[Function]}
                        onInputChange={[Function]}
                        placeholder="Add Owners"
                        value={Array []}
                        valueComponent={[Function]}
                      >
                        <Async
                          arrowRenderer={[Function]}
                          autoload={true}
                          cache={false}
                          className="css-11osmt1-StyledSelect eho28m20"
                          defaultOptions={true}
                          filterOptions={[Function]}
                          ignoreAccents={true}
                          ignoreCase={true}
                          loadOptions={[Function]}
                          loadingPlaceholder="Loading..."
                          multi={true}
                          onChange={[Function]}
                          onInputChange={[Function]}
                          options={Array []}
                          placeholder="Add Owners"
                          searchPromptText="Type to search"
                          value={Array []}
                          valueComponent={[Function]}
                        >
                          <Select
                            arrowRenderer={[Function]}
                            autoload={true}
                            autosize={true}
                            backspaceRemoves={true}
                            backspaceToRemoveMessage="Press backspace to remove {label}"
                            cache={false}
                            className="css-11osmt1-StyledSelect eho28m20"
                            clearAllText="Clear all"
                            clearRenderer={[Function]}
                            clearValueText="Clear value"
                            clearable={true}
                            closeOnSelect={true}
                            defaultOptions={true}
                            deleteRemoves={true}
                            delimiter=","
                            disabled={false}
                            escapeClearsValue={true}
                            filterOptions={[Function]}
                            ignoreAccents={true}
                            ignoreCase={true}
                            inputProps={Object {}}
                            isLoading={true}
                            joinValues={false}
                            labelKey="label"
                            loadOptions={[Function]}
                            loadingPlaceholder="Loading..."
                            matchPos="any"
                            matchProp="any"
                            menuBuffer={0}
                            menuRenderer={[Function]}
                            multi={true}
                            noResultsText="Loading..."
                            onBlurResetsInput={true}
                            onChange={[Function]}
                            onCloseResetsInput={true}
                            onInputChange={[Function]}
                            onSelectResetsInput={true}
                            openOnClick={true}
                            optionComponent={[Function]}
                            options={Array []}
                            pageSize={5}
                            placeholder="Loading..."
                            removeSelected={true}
                            required={false}
                            rtl={false}
                            scrollMenuIntoView={true}
                            searchPromptText="Type to search"
                            searchable={true}
                            simpleValue={false}
                            tabSelectsValue={true}
                            trimFilter={true}
                            value={Array []}
                            valueComponent={[Function]}
                            valueKey="value"
                          >
                            <div
                              className="Select css-11osmt1-StyledSelect eho28m20 is-clearable is-loading is-searchable Select--multi"
                            >
                              <div
                                className="Select-control"
                                onKeyDown={[Function]}
                                onMouseDown={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                              >
                                <span
                                  className="Select-multi-value-wrapper"
                                  id="react-select-3--value"
                                >
                                  <div
                                    className="Select-placeholder"
                                  >
                                    Loading...
                                  </div>
                                  <AutosizeInput
                                    aria-activedescendant="react-select-3--value"
                                    aria-expanded="false"
                                    aria-haspopup="false"
                                    aria-owns=""
                                    className="Select-input"
                                    injectStyles={true}
                                    minWidth="5"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    required={false}
                                    role="combobox"
                                    value=""
                                  >
                                    <div
                                      className="Select-input"
                                      style={
                                        Object {
                                          "display": "inline-block",
                                        }
                                      }
                                    >
                                      <input
                                        aria-activedescendant="react-select-3--value"
                                        aria-expanded="false"
                                        aria-haspopup="false"
                                        aria-owns=""
                                        onBlur={[Function]}
                                        onChange={[Function]}
                                        onFocus={[Function]}
                                        required={false}
                                        role="combobox"
                                        style={
                                          Object {
                                            "boxSizing": "content-box",
                                            "width": "5px",
                                          }
                                        }
                                        value=""
                                      />
                                      <div
                                        style={
                                          Object {
                                            "height": 0,
                                            "left": 0,
                                            "overflow": "scroll",
                                            "position": "absolute",
                                            "top": 0,
                                            "visibility": "hidden",
                                            "whiteSpace": "pre",
                                          }
                                        }
                                      />
                                    </div>
                                  </AutosizeInput>
                                </span>
                                <span
                                  aria-hidden="true"
                                  className="Select-loading-zone"
                                >
                                  <span
                                    className="Select-loading"
                                  />
                                </span>
                                <span
                                  className="Select-arrow-zone"
                                  onMouseDown={[Function]}
                                >
                                  <span
                                    className="icon-arrow-down"
                                  />
                                </span>
                              </div>
                            </div>
                          </Select>
                        </Async>
                      </SelectPicker>
                    </StyledSelect>
                  </SelectControl>
                </MultiSelectControl>
              </SelectOwners>
            </div>
          </Base>
        </Flex>
        <AddButton
          disabled={true}
          icon="icon-circle-add"
          onClick={[Function]}
          priority="primary"
          size="small"
        >
          <Button
            className="css-po7kq7-AddButton e1hyuoc79"
            disabled={true}
            icon="icon-circle-add"
            onClick={[Function]}
            priority="primary"
            size="small"
          >
            <StyledButton
              className="css-po7kq7-AddButton e1hyuoc79"
              disabled={true}
              href={null}
              onClick={[Function]}
              priority="primary"
              role="button"
              size="small"
              to={null}
            >
              <Component
                className="e1hyuoc79 css-in0b2i-StyledButton-getColors-AddButton e17811v30"
                disabled={true}
                href={null}
                onClick={[Function]}
                priority="primary"
                role="button"
                size="small"
                to={null}
              >
                <button
                  className="e1hyuoc79 css-in0b2i-StyledButton-getColors-AddButton e17811v30"
                  disabled={true}
                  href={null}
                  onClick={[Function]}
                  priority="primary"
                  role="button"
                  size="small"
                  to={null}
                >
                  <ButtonLabel
                    size="small"
                  >
                    <Component
                      className="css-19bmqb3-ButtonLabel e17811v31"
                      size="small"
                    >
                      <Flex
                        align="center"
                        className="css-19bmqb3-ButtonLabel e17811v31"
                        size="small"
                      >
                        <Base
                          align="center"
                          className="e17811v31 css-1eblpyp-ButtonLabel"
                          size="small"
                        >
                          <div
                            className="e17811v31 css-1eblpyp-ButtonLabel"
                            is={null}
                            size="small"
                          >
                            <Icon
                              hasChildren={false}
                              size="small"
                            >
                              <Component
                                className="css-ljhpxy-Icon e17811v32"
                                hasChildren={false}
                                size="small"
                              >
                                <Box
                                  className="css-ljhpxy-Icon e17811v32"
                                  size="small"
                                >
                                  <Base
                                    className="e17811v32 css-7mohvl-Icon"
                                    size="small"
                                  >
                                    <div
                                      className="e17811v32 css-7mohvl-Icon"
                                      is={null}
                                      size="small"
                                    >
                                      <StyledInlineSvg
                                        size="12px"
                                        src="icon-circle-add"
                                      >
                                        <InlineSvg
                                          className="css-1ov3rcq-StyledInlineSvg e17811v33"
                                          size="12px"
                                          src="icon-circle-add"
                                        >
                                          <StyledSvg
                                            className="css-1ov3rcq-StyledInlineSvg e17811v33"
                                            height="12px"
                                            viewBox={Object {}}
                                            width="12px"
                                          >
                                            <svg
                                              className="e17811v33 css-1jjmnki-StyledSvg-StyledInlineSvg e2idor0"
                                              height="12px"
                                              viewBox={Object {}}
                                              width="12px"
                                            >
                                              <use
                                                href="#test"
                                                xlinkHref="#test"
                                              />
                                            </svg>
                                          </StyledSvg>
                                        </InlineSvg>
                                      </StyledInlineSvg>
                                    </div>
                                  </Base>
                                </Box>
                              </Component>
                            </Icon>
                          </div>
                        </Base>
                      </Flex>
                    </Component>
                  </ButtonLabel>
                </button>
              </Component>
            </StyledButton>
          </Button>
        </AddButton>
      </div>
    </BuilderBar>
  </RuleBuilder>
  <div
    onKeyDown={[Function]}
    style={
      Object {
        "position": "relative",
      }
    }
  >
    <StyledTextArea
      autoCapitalize="off"
      autoComplete="off"
      autoCorrect="off"
      onChange={[Function]}
      placeholder="#example usage
path:src/example/pipeline/* person@sentry.io #infra
url:http://example.com/settings/* #product"
      spellCheck="false"
      value="new"
    >
      <TextareaAutosize
        autoCapitalize="off"
        autoComplete="off"
        autoCorrect="off"
        className="css-18yzq2g-StyledTextArea-inputStyles en3n9di2"
        onChange={[Function]}
        placeholder="#example usage
path:src/example/pipeline/* person@sentry.io #infra
url:http://example.com/settings/* #product"
        rows={1}
        spellCheck="false"
        value="new"
      >
        <textarea
          autoCapitalize="off"
          autoComplete="off"
          autoCorrect="off"
          className="css-18yzq2g-StyledTextArea-inputStyles en3n9di2"
          onChange={[Function]}
          placeholder="#example usage
path:src/example/pipeline/* person@sentry.io #infra
url:http://example.com/settings/* #product"
          rows={1}
          spellCheck="false"
          value="new"
        />
      </TextareaAutosize>
    </StyledTextArea>
    <Flex
      align="center"
      justify="space-between"
    >
      <Base
        align="center"
        className="css-v7pzd9"
        justify="space-between"
      >
        <div
          className="css-v7pzd9"
          is={null}
        >
          <div />
          <SaveButton>
            <div
              className="css-5zvod-SaveButton en3n9di1"
            >
              <Button
                disabled={false}
                onClick={[Function]}
                priority="primary"
                size="small"
              >
                <StyledButton
                  aria-label="Save Changes"
                  disabled={false}
                  onClick={[Function]}
                  priority="primary"
                  role="button"
                  size="small"
                >
                  <Component
                    aria-label="Save Changes"
                    className="css-zvpqlo-StyledButton-getColors e17811v30"
                    disabled={false}
                    onClick={[Function]}
                    priority="primary"
                    role="button"
                    size="small"
                  >
                    <button
                      aria-label="Save Changes"
                      className="css-zvpqlo-StyledButton-getColors e17811v30"
                      disabled={false}
                      onClick={[Function]}
                      priority="primary"
                      role="button"
                      size="small"
                    >
                      <ButtonLabel
                        size="small"
                      >
                        <Component
                          className="css-19bmqb3-ButtonLabel e17811v31"
                          size="small"
                        >
                          <Flex
                            align="center"
                            className="css-19bmqb3-ButtonLabel e17811v31"
                            size="small"
                          >
                            <Base
                              align="center"
                              className="e17811v31 css-1eblpyp-ButtonLabel"
                              size="small"
                            >
                              <div
                                className="e17811v31 css-1eblpyp-ButtonLabel"
                                is={null}
                                size="small"
                              >
                                Save Changes
                              </div>
                            </Base>
                          </Flex>
                        </Component>
                      </ButtonLabel>
                    </button>
                  </Component>
                </StyledButton>
              </Button>
            </div>
          </SaveButton>
        </div>
      </Base>
    </Flex>
  </div>
</OwnerInput>
`;
