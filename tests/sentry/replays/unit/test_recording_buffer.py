import datetime

import time_machine

from sentry.replays.consumers.recording_buffered import RecordingBuffer


def test_recording_buffer_commit_default():
    """Test RecordingBuffer commit readiness."""
    # Assert all.
    buffer = RecordingBuffer(0, 0, 0)
    assert buffer.has_exceeded_max_message_count
    assert buffer.has_exceeded_buffer_byte_size
    assert buffer.has_exceeded_last_buffer_commit_time
    assert buffer.ready_to_commit

    # Assert none.
    buffer = RecordingBuffer(1, 1, 1)
    assert not buffer.has_exceeded_max_message_count
    assert not buffer.has_exceeded_buffer_byte_size
    assert not buffer.has_exceeded_last_buffer_commit_time
    assert not buffer.ready_to_commit

    # Assert deadline.
    buffer = RecordingBuffer(1, 1, 0)
    assert not buffer.has_exceeded_max_message_count
    assert not buffer.has_exceeded_buffer_byte_size
    assert buffer.has_exceeded_last_buffer_commit_time
    assert buffer.ready_to_commit

    # Assert size.
    buffer = RecordingBuffer(1, 0, 1)
    assert not buffer.has_exceeded_max_message_count
    assert buffer.has_exceeded_buffer_byte_size
    assert not buffer.has_exceeded_last_buffer_commit_time
    assert buffer.ready_to_commit

    # Assert max messages.
    buffer = RecordingBuffer(0, 1, 1)
    assert buffer.has_exceeded_max_message_count
    assert not buffer.has_exceeded_buffer_byte_size
    assert not buffer.has_exceeded_last_buffer_commit_time
    assert buffer.ready_to_commit


def test_recording_buffer_commit_deadline():
    buffer = RecordingBuffer(
        max_buffer_row_count=1_000_000,  # Never triggers commit.
        max_buffer_size_in_bytes=1_000_000,  # Never triggers commit.
        max_buffer_time_in_seconds=5,
    )

    now = datetime.datetime.now()

    # New buffer; never at expiration.
    traveller = time_machine.travel(now)
    traveller.start()
    assert not buffer.has_exceeded_last_buffer_commit_time
    assert not buffer.ready_to_commit
    traveller.stop()

    # Almost at expiration.
    traveller = time_machine.travel(now + datetime.timedelta(seconds=4))
    traveller.start()
    assert not buffer.has_exceeded_last_buffer_commit_time
    assert not buffer.ready_to_commit
    traveller.stop()

    # Exactly at expiration.
    traveller = time_machine.travel(now + datetime.timedelta(seconds=5))
    traveller.start()
    assert buffer.has_exceeded_last_buffer_commit_time
    assert buffer.ready_to_commit  # type: ignore
    traveller.stop()

    # 55 seconds after expiration.
    traveller = time_machine.travel(now + datetime.timedelta(seconds=60))
    traveller.start()
    assert buffer.has_exceeded_last_buffer_commit_time
    assert buffer.ready_to_commit
    traveller.stop()


def test_recording_buffer_commit_next_state():
    now = datetime.datetime(year=2024, month=1, day=1)

    # Create the initial state.
    traveller = time_machine.travel(now)
    traveller.start()
    buffer = RecordingBuffer(
        max_buffer_row_count=1_000_000,  # Never triggers commit.
        max_buffer_size_in_bytes=1_000_000,  # Never triggers commit.
        max_buffer_time_in_seconds=5,
    )
    traveller.stop()

    # Advance time by 10 seconds to trigger a commit.
    traveller = time_machine.travel(now + datetime.timedelta(seconds=10))
    traveller.start()

    # Cache the first deadline for later use.
    first_deadline = buffer._buffer_next_commit_time

    # Functionally a no-op but we do reset the buffer to a new empty state.
    buffer.commit()

    # A new deadline was generated by the call to commit.
    second_deadline = buffer._buffer_next_commit_time

    assert first_deadline < second_deadline
    # Deadlines incremented at exactly the rate of time travelled.
    assert first_deadline + 10 == second_deadline
    # Deadline advanced by 15 seconds compared to previous buffer's start time.
    assert second_deadline == int((now + datetime.timedelta(seconds=15)).timestamp())

    traveller.stop()
