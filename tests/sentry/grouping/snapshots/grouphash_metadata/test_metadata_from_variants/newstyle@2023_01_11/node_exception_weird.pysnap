---
created: '2025-10-07T20:42:05.889705+00:00'
creator: sentry
source: tests/sentry/grouping/test_grouphash_metadata.py
---
hash_basis: stacktrace
hashing_metadata: {
  "num_stacktraces": 1,
  "stacktrace_location": "exception",
  "stacktrace_type": "in_app"
}
---
metrics with tags: {
  "grouping.grouphashmetadata.event_hash_basis": {
    "hash_basis": "stacktrace",
    "is_hybrid_fingerprint": "False"
  },
  "grouping.grouphashmetadata.event_hashing_metadata.stacktrace": {
    "chained_exception": "False",
    "stacktrace_location": "exception",
    "stacktrace_type": "in_app"
  }
}
---
contributing variants:
  app*
    hash: "a20509269752c9a1bea6078851e4d39c"
    contributing component: exception
    hint: None
    root_component:
      app*
        exception*
          stacktrace*
            frame* (marked in-app by the client)
              module*
                "hub"
              function* (trimmed javascript function)
                "withScope"
              context_line*
                "*/"
            frame* (marked in-app by the client)
              module*
                "onunhandledrejection.ts"
            frame* (marked in-app by the client)
              module*
                "hub.ts"
              function* (trimmed javascript function)
                "captureException"
              context_line*
                "if (maxBreadcrumbs <= 0) {"
            frame* (marked in-app by the client)
              module*
                "hub"
              function* (trimmed javascript function)
                "invokeClient"
              context_line*
                "* @returns Scope, the new cloned scope"
            frame* (marked in-app by the client)
              module*
                "baseclient.ts"
              function* (trimmed javascript function)
                "captureException"
              context_line*
                "promisedEvent"
            frame* (marked in-app by the client)
              module*
                "backend.ts"
              function* (trimmed javascript function)
                "eventFromException"
          type*
            "Error"
  system*
    hash: "252dc79eb5653bf822e2684d90734cb8"
    contributing component: exception
    hint: None
    root_component:
      system*
        exception*
          stacktrace*
            frame*
              module*
                "hub"
              function* (trimmed javascript function)
                "withScope"
              context_line*
                "*/"
            frame*
              module*
                "onunhandledrejection.ts"
            frame*
              module*
                "jest-mock.build:index"
              function* (trimmed javascript function)
                "mockConstructor [as captureException]"
              context_line*
                "return fn.apply(this, arguments);"
            frame*
              module*
                "jest-mock.build:index"
              context_line*
                "})();"
            frame*
              module*
                "jest-mock.build:index"
              function*
                "finalReturnValue"
              context_line*
                "return specificMockImpl.apply(this, arguments);"
            frame*
              module*
                "jest-mock.build:index"
              context_line*
                "return original.apply(this, arguments);"
            frame*
              module*
                "hub.ts"
              function* (trimmed javascript function)
                "captureException"
              context_line*
                "if (maxBreadcrumbs <= 0) {"
            frame*
              module*
                "hub"
              function* (trimmed javascript function)
                "invokeClient"
              context_line*
                "* @returns Scope, the new cloned scope"
            frame*
              module*
                "baseclient.ts"
              function* (trimmed javascript function)
                "captureException"
              context_line*
                "promisedEvent"
            frame*
              module*
                "backend.ts"
              function* (trimmed javascript function)
                "eventFromException"
          type*
            "Error"
