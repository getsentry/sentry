---
created: '2024-11-08T19:20:22.951550+00:00'
creator: sentry
source: tests/sentry/grouping/test_grouphash_metadata.py
---
hash_basis: stacktrace
hashing_metadata: {
  "num_stacktraces": 1,
  "stacktrace_location": "exception",
  "stacktrace_type": "in_app"
}
---
contributing variants:
  app*
    hash: "c9dc61e20bb252c9ec1e28a75f015132"
    component:
      app*
        exception*
          stacktrace*
            frame*
              filename*
                "boxed.rs"
              function*
                "<F as alloc::boxed::FnBox<A>>::call_box"
            frame*
              filename*
                "lib.rs"
              function*
                "___rust_maybe_catch_panic"
            frame*
              filename*
                "arbiter.rs"
              function*
                "actix::arbiter::Arbiter::new_with_builder::{{closure}}"
            frame*
              filename*
                "runtime.rs"
              function*
                "tokio::runtime::current_thread::runtime::Runtime::block_on"
            frame*
              filename*
                "runtime.rs"
              function*
                "tokio::runtime::current_thread::runtime::Runtime::enter"
            frame*
              filename*
                "lib.rs"
              function*
                "tokio_reactor::with_default"
            frame*
              filename*
                "lib.rs"
              function*
                "tokio_reactor::with_default::{{closure}}"
            frame*
              filename*
                "runtime.rs"
              function*
                "tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}"
            frame*
              filename*
                "clock.rs"
              function*
                "tokio_timer::clock::clock::with_default"
            frame*
              filename*
                "clock.rs"
              function*
                "tokio_timer::clock::clock::with_default::{{closure}}"
            frame*
              filename*
                "runtime.rs"
              function*
                "tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}"
            frame*
              filename*
                "handle.rs"
              function*
                "tokio_timer::timer::handle::with_default"
            frame*
              filename*
                "handle.rs"
              function*
                "tokio_timer::timer::handle::with_default::{{closure}}"
            frame*
              filename*
                "runtime.rs"
              function*
                "tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}::{{closure}}"
            frame*
              filename*
                "global.rs"
              function*
                "tokio_executor::global::with_default"
            frame*
              filename*
                "global.rs"
              function*
                "tokio_executor::global::with_default::{{closure}}"
            frame*
              filename*
                "runtime.rs"
              function*
                "tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}::{{closure}}::{{closure}}"
            frame*
              filename*
                "runtime.rs"
              function*
                "tokio::runtime::current_thread::runtime::Runtime::block_on::{{closure}}"
            frame*
              filename*
                "lib.rs"
              function*
                "<tokio_current_thread::Entered<'a, P>>::block_on"
            frame*
              filename*
                "lib.rs"
              function*
                "<tokio_current_thread::Entered<'a, P>>::tick"
            frame*
              filename*
                "scheduler.rs"
              function*
                "<tokio_current_thread::scheduler::Scheduler<U>>::tick"
            frame*
              filename*
                "lib.rs"
              function*
                "<tokio_current_thread::Borrow<'a, U>>::enter"
            frame*
              filename*
                "lib.rs"
              function*
                "<tokio_current_thread::Borrow<'a, U>>::enter::{{closure}}"
            frame*
              filename*
                "lib.rs"
              function*
                "tokio_current_thread::CurrentRunner::set_spawn"
            frame*
              filename*
                "lib.rs"
              function*
                "<tokio_current_thread::Borrow<'a, U>>::enter::{{closure}}::{{closure}}"
            frame*
              filename*
                "scheduler.rs"
              function*
                "<tokio_current_thread::scheduler::Scheduler<U>>::tick::{{closure}}"
            frame*
              filename*
                "scheduler.rs"
              function*
                "<tokio_current_thread::scheduler::Scheduled<'a, U>>::tick"
            frame*
              filename*
                "mod.rs"
              function*
                "<futures::task_impl::Spawn<T>>::poll_future_notify"
            frame*
              filename*
                "mod.rs"
              function*
                "<futures::task_impl::Spawn<T>>::poll_fn_notify"
            frame*
              filename*
                "mod.rs"
              function*
                "<futures::task_impl::Spawn<T>>::enter"
            frame*
              filename*
                "mod.rs"
              function*
                "futures::task_impl::std::set"
            frame*
              filename*
                "mod.rs"
              function*
                "<futures::task_impl::Spawn<T>>::enter::{{closure}}"
            frame*
              filename*
                "mod.rs"
              function*
                "<futures::task_impl::Spawn<T>>::poll_future_notify::{{closure}}"
            frame*
              filename*
                "then.rs"
              function*
                "<futures::future::then::Then<A, B, F> as futures::future::Future>::poll"
            frame*
              filename*
                "chain.rs"
              function*
                "<futures::future::chain::Chain<A, B, C>>::poll"
            frame*
              filename*
                "either.rs"
              function*
                "<futures::future::either::Either<A, B> as futures::future::Future>::poll"
            frame*
              filename*
                "acceptor.rs"
              function*
                "<actix_web::server::acceptor::ServerMessageAcceptorServiceFut<T> as futures::future::Future>::poll"
            frame*
              filename*
                "and_then.rs"
              function*
                "<actix_net::service::and_then::AndThenFuture<A, B> as futures::future::Future>::poll"
            frame*
              filename*
                "map_err.rs"
              function*
                "<actix_net::service::map_err::MapErrFuture<A, F, E> as futures::future::Future>::poll"
            frame*
              filename*
                "channel.rs"
              function*
                "<actix_web::server::channel::HttpChannel<T, H> as futures::future::Future>::poll"
            frame*
              filename*
                "channel.rs"
              function*
                "<actix_web::server::channel::HttpChannel<T, H> as futures::future::Future>::poll"
            frame*
              filename*
                "h1.rs"
              function*
                "<actix_web::server::h1::Http1Dispatcher<T, H>>::poll"
            frame*
              filename*
                "h1.rs"
              function*
                "<actix_web::server::h1::Http1Dispatcher<T, H>>::poll_handler"
            frame*
              filename*
                "h1.rs"
              function*
                "<actix_web::server::h1::Http1Dispatcher<T, H>>::poll_io"
            frame*
              filename*
                "h1.rs"
              function*
                "<actix_web::server::h1::Http1Dispatcher<T, H>>::parse"
            frame*
              filename*
                "pipeline.rs"
              function*
                "<actix_web::pipeline::Pipeline<S, H> as actix_web::server::handler::HttpHandlerTask>::poll_io"
            frame*
              filename*
                "<::log::macros::log macros>"
              function*
                "<actix_web::pipeline::ProcessResponse<S, H>>::poll_io"
            frame*
              filename*
                "lib.rs"
              function*
                "log::__private_api_log"
          type*
            "actix_web::pipeline"
  system*
    hash: "4796dda6f2cfa81ec7862cd24bcfb58e"
    component:
      system*
        exception*
          stacktrace*
            frame*
              filename*
                "thread.rs"
              function*
                "std::sys::unix::thread::Thread::new::thread_start"
            frame*
              filename*
                "boxed.rs"
              function*
                "<F as alloc::boxed::FnBox<A>>::call_box"
            frame*
              filename*
                "mod.rs"
              function*
                "std::thread::Builder::spawn_unchecked::{{closure}}"
            frame*
              filename*
                "panic.rs"
              function*
                "std::panic::catch_unwind"
            frame*
              filename*
                "panicking.rs"
              function*
                "std::panicking::try"
            frame*
              filename*
                "lib.rs"
              function*
                "___rust_maybe_catch_panic"
            frame*
              filename*
                "panicking.rs"
              function*
                "std::panicking::try::do_call"
            frame*
              filename*
                "panic.rs"
              function*
                "<std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once"
            frame*
              filename*
                "mod.rs"
              function*
                "std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}"
            frame*
              filename*
                "backtrace.rs"
              function*
                "std::sys_common::backtrace::__rust_begin_short_backtrace"
            frame*
              filename*
                "arbiter.rs"
              function*
                "actix::arbiter::Arbiter::new_with_builder::{{closure}}"
            frame*
              filename*
                "runtime.rs"
              function*
                "tokio::runtime::current_thread::runtime::Runtime::block_on"
            frame*
              filename*
                "runtime.rs"
              function*
                "tokio::runtime::current_thread::runtime::Runtime::enter"
            frame*
              filename*
                "lib.rs"
              function*
                "tokio_reactor::with_default"
            frame*
              filename*
                "local.rs"
              function*
                "<std::thread::local::LocalKey<T>>::with"
            frame*
              filename*
                "local.rs"
              function*
                "<std::thread::local::LocalKey<T>>::try_with"
            frame*
              filename*
                "lib.rs"
              function*
                "tokio_reactor::with_default::{{closure}}"
            frame*
              filename*
                "runtime.rs"
              function*
                "tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}"
            frame*
              filename*
                "clock.rs"
              function*
                "tokio_timer::clock::clock::with_default"
            frame*
              filename*
                "local.rs"
              function*
                "<std::thread::local::LocalKey<T>>::with"
            frame*
              filename*
                "local.rs"
              function*
                "<std::thread::local::LocalKey<T>>::try_with"
            frame*
              filename*
                "clock.rs"
              function*
                "tokio_timer::clock::clock::with_default::{{closure}}"
            frame*
              filename*
                "runtime.rs"
              function*
                "tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}"
            frame*
              filename*
                "handle.rs"
              function*
                "tokio_timer::timer::handle::with_default"
            frame*
              filename*
                "local.rs"
              function*
                "<std::thread::local::LocalKey<T>>::with"
            frame*
              filename*
                "local.rs"
              function*
                "<std::thread::local::LocalKey<T>>::try_with"
            frame*
              filename*
                "handle.rs"
              function*
                "tokio_timer::timer::handle::with_default::{{closure}}"
            frame*
              filename*
                "runtime.rs"
              function*
                "tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}::{{closure}}"
            frame*
              filename*
                "global.rs"
              function*
                "tokio_executor::global::with_default"
            frame*
              filename*
                "local.rs"
              function*
                "<std::thread::local::LocalKey<T>>::with"
            frame*
              filename*
                "local.rs"
              function*
                "<std::thread::local::LocalKey<T>>::try_with"
            frame*
              filename*
                "global.rs"
              function*
                "tokio_executor::global::with_default::{{closure}}"
            frame*
              filename*
                "runtime.rs"
              function*
                "tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}::{{closure}}::{{closure}}"
            frame*
              filename*
                "runtime.rs"
              function*
                "tokio::runtime::current_thread::runtime::Runtime::block_on::{{closure}}"
            frame*
              filename*
                "lib.rs"
              function*
                "<tokio_current_thread::Entered<'a, P>>::block_on"
            frame*
              filename*
                "lib.rs"
              function*
                "<tokio_current_thread::Entered<'a, P>>::tick"
            frame*
              filename*
                "scheduler.rs"
              function*
                "<tokio_current_thread::scheduler::Scheduler<U>>::tick"
            frame*
              filename*
                "lib.rs"
              function*
                "<tokio_current_thread::Borrow<'a, U>>::enter"
            frame*
              filename*
                "local.rs"
              function*
                "<std::thread::local::LocalKey<T>>::with"
            frame*
              filename*
                "local.rs"
              function*
                "<std::thread::local::LocalKey<T>>::try_with"
            frame*
              filename*
                "lib.rs"
              function*
                "<tokio_current_thread::Borrow<'a, U>>::enter::{{closure}}"
            frame*
              filename*
                "lib.rs"
              function*
                "tokio_current_thread::CurrentRunner::set_spawn"
            frame*
              filename*
                "lib.rs"
              function*
                "<tokio_current_thread::Borrow<'a, U>>::enter::{{closure}}::{{closure}}"
            frame*
              filename*
                "scheduler.rs"
              function*
                "<tokio_current_thread::scheduler::Scheduler<U>>::tick::{{closure}}"
            frame*
              filename*
                "scheduler.rs"
              function*
                "<tokio_current_thread::scheduler::Scheduled<'a, U>>::tick"
            frame*
              filename*
                "mod.rs"
              function*
                "<futures::task_impl::Spawn<T>>::poll_future_notify"
            frame*
              filename*
                "mod.rs"
              function*
                "<futures::task_impl::Spawn<T>>::poll_fn_notify"
            frame*
              filename*
                "mod.rs"
              function*
                "<futures::task_impl::Spawn<T>>::enter"
            frame*
              filename*
                "mod.rs"
              function*
                "futures::task_impl::std::set"
            frame*
              filename*
                "mod.rs"
              function*
                "<futures::task_impl::Spawn<T>>::enter::{{closure}}"
            frame*
              filename*
                "mod.rs"
              function*
                "<futures::task_impl::Spawn<T>>::poll_future_notify::{{closure}}"
            frame*
              filename*
                "mod.rs"
              function*
                "<alloc::boxed::Box<F> as futures::future::Future>::poll"
            frame*
              filename*
                "then.rs"
              function*
                "<futures::future::then::Then<A, B, F> as futures::future::Future>::poll"
            frame*
              filename*
                "chain.rs"
              function*
                "<futures::future::chain::Chain<A, B, C>>::poll"
            frame*
              filename*
                "either.rs"
              function*
                "<futures::future::either::Either<A, B> as futures::future::Future>::poll"
            frame*
              filename*
                "acceptor.rs"
              function*
                "<actix_web::server::acceptor::ServerMessageAcceptorServiceFut<T> as futures::future::Future>::poll"
            frame*
              filename*
                "and_then.rs"
              function*
                "<actix_net::service::and_then::AndThenFuture<A, B> as futures::future::Future>::poll"
            frame*
              filename*
                "map_err.rs"
              function*
                "<actix_net::service::map_err::MapErrFuture<A, F, E> as futures::future::Future>::poll"
            frame*
              filename*
                "channel.rs"
              function*
                "<actix_web::server::channel::HttpChannel<T, H> as futures::future::Future>::poll"
            frame*
              filename*
                "channel.rs"
              function*
                "<actix_web::server::channel::HttpChannel<T, H> as futures::future::Future>::poll"
            frame*
              filename*
                "h1.rs"
              function*
                "<actix_web::server::h1::Http1Dispatcher<T, H>>::poll"
            frame*
              filename*
                "h1.rs"
              function*
                "<actix_web::server::h1::Http1Dispatcher<T, H>>::poll_handler"
            frame*
              filename*
                "h1.rs"
              function*
                "<actix_web::server::h1::Http1Dispatcher<T, H>>::poll_io"
            frame*
              filename*
                "h1.rs"
              function*
                "<actix_web::server::h1::Http1Dispatcher<T, H>>::parse"
            frame*
              filename*
                "pipeline.rs"
              function*
                "<actix_web::pipeline::Pipeline<S, H> as actix_web::server::handler::HttpHandlerTask>::poll_io"
            frame*
              filename*
                "<::log::macros::log macros>"
              function*
                "<actix_web::pipeline::ProcessResponse<S, H>>::poll_io"
            frame*
              filename*
                "lib.rs"
              function*
                "log::__private_api_log"
            frame*
              filename*
                "log.rs"
              function*
                "<sentry::integrations::log::Logger as log::Log>::log"
            frame*
              filename*
                "hub.rs"
              function*
                "sentry::hub::Hub::with_active"
            frame*
              filename*
                "hub.rs"
              function*
                "sentry::hub::Hub::with"
            frame*
              filename*
                "local.rs"
              function*
                "<std::thread::local::LocalKey<T>>::with"
            frame*
              filename*
                "local.rs"
              function*
                "<std::thread::local::LocalKey<T>>::try_with"
            frame*
              filename*
                "hub.rs"
              function*
                "sentry::hub::Hub::with::{{closure}}"
            frame*
              filename*
                "hub.rs"
              function*
                "sentry::hub::Hub::with_active::{{closure}}"
          type*
            "actix_web::pipeline"
