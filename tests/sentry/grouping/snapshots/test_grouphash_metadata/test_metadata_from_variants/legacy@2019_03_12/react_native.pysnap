---
created: '2024-10-28T14:02:56.938349+00:00'
creator: sentry
source: tests/sentry/grouping/test_grouphash_metadata.py
---
hash_basis: stacktrace
---
contributing variants:
  system*
    hash: "f8f4d8cbe0c85758ed193d0f5d9955b3"
    component:
      system*
        exception*
          stacktrace*
            frame*
              module*
                "react-native/Libraries/BatchedBridge/MessageQueue"
              context-line*
                "    return this.flushedQueue();"
            frame*
              module*
                "react-native/Libraries/BatchedBridge/MessageQueue"
              context-line*
                "      this._inCall--;"
            frame*
              module*
                "react-native/Libraries/BatchedBridge/MessageQueue"
              context-line*
                "    return this.flushedQueue();"
            frame*
              module*
                "react-native/Libraries/BatchedBridge/MessageQueue"
              context-line*
                "    this._lastFlush = new Date().getTime();"
            frame*
              module*
                "react-native/Libraries/Renderer/ReactNativeRenderer-prod"
              context-line*
                "      _receiveRootNodeIDEvent(index, eventTopLevelType, i);"
            frame*
              module*
                "react-native/Libraries/Renderer/ReactNativeRenderer-prod"
              context-line*
                "  batchedUpdates(function() {"
            frame*
              module*
                "react-native/Libraries/Renderer/ReactNativeRenderer-prod"
              context-line*
                "    return _batchedUpdates(fn, bookkeeping);"
            frame*
              module*
                "react-native/Libraries/Renderer/ReactNativeRenderer-prod"
              context-line*
                "        return fn(a);"
            frame*
              module*
                "react-native/Libraries/Renderer/ReactNativeRenderer-prod"
              context-line*
                "      (forEachAccumulated(events, executeDispatchesAndReleaseTopLevel),"
            frame*
              module*
                "react-native/Libraries/Renderer/ReactNativeRenderer-prod"
              context-line*
                "  Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);"
            frame*
              module*
                "react-native/Libraries/Renderer/ReactNativeRenderer-prod"
              context-line*
                "        executeDispatch(e, !1, dispatchListeners, dispatchInstances);"
            frame*
              module*
                "react-native/Libraries/Renderer/ReactNativeRenderer-prod"
              context-line*
                "  ReactErrorUtils.invokeGuardedCallbackAndCatchFirstError("
            frame*
              module*
                "react-native/Libraries/Renderer/ReactNativeRenderer-prod"
              context-line*
                "    ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);"
            frame*
              module*
                "react-native/Libraries/Renderer/ReactNativeRenderer-prod"
              context-line*
                "    invokeGuardedCallback.apply(ReactErrorUtils, arguments);"
            frame*
              module*
                "react-native/Libraries/Renderer/ReactNativeRenderer-prod"
              context-line*
                "  var funcArgs = Array.prototype.slice.call(arguments, 3);"
            frame*
              module*
                "react-native/Libraries/Components/Touchable/Touchable"
              context-line*
                "  touchableHandleResponderRelease: function(e) {"
            frame*
              module*
                "react-native/Libraries/Components/Touchable/Touchable"
              context-line*
                "      this._performSideEffectsForTransition(curState, nextState, signal, e);"
            frame*
              module*
                "react-native/Libraries/Components/Touchable/Touchable"
              context-line*
                "        this.touchableHandlePress(e);"
            frame*
              module*
                "react-native/Libraries/Components/Touchable/TouchableNativeFeedback.android"
              context-line*
                "    this.props.onPress && this.props.onPress(e);"
            frame*
              module*
                "App"
              context-line*
                "        <Button"
            frame*
              module*
                "App"
              context-line*
                "        <Button"
          type*
            "TypeError"
