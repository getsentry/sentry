---
created: '2025-02-26T00:31:53.611363+00:00'
creator: sentry
source: tests/sentry/grouping/test_grouphash_metadata.py
---
hash_basis: stacktrace
hashing_metadata: {
  "num_stacktraces": 1,
  "stacktrace_location": "exception",
  "stacktrace_type": "system"
}
---
metrics with tags: {
  "grouping.grouphashmetadata.event_hash_basis": {
    "hash_basis": "stacktrace",
    "is_hybrid_fingerprint": "False"
  },
  "grouping.grouphashmetadata.event_hashing_metadata.stacktrace": {
    "chained_exception": "False",
    "stacktrace_location": "exception",
    "stacktrace_type": "system"
  }
}
---
contributing variants:
  system*
    hash: "2fa6bd4588d2ae97b62ef1f8db5b12bf"
    contributing component: exception
    component:
      system*
        exception*
          stacktrace*
            frame*
              function*
                "RtlUserThreadStart"
            frame*
              function*
                "BaseThreadInitThunk"
            frame*
              function*
                "stripped_application_code"
            frame*
              filename*
                "exe_common.inl"
              function*
                "invoke_main"
            frame*
              filename*
                "winmain.cpp"
              function*
                "wWinMain"
            frame*
              filename*
                "xstring"
              function*
                "std::basic_string<T>::{ctor}"
            frame*
              filename*
                "xstring"
              function*
                "std::basic_string<T>::assign"
            frame*
              filename*
                "xstring"
              function*
                "std::basic_string<T>::_Reallocate_for"
            frame*
              function*
                "stripped_application_code"
            frame*
              filename*
                "functional"
              function*
                "std::_Func_class<T>::operator()"
            frame*
              function*
                "stripped_application_code"
            frame*
              function*
                "DispatchMessageWorker"
            frame*
              function*
                "UserCallWinProcCheckWow"
            frame*
              function*
                "stripped_application_code"
            frame*
              filename*
                "function_template.hpp"
              function*
                "boost::function0<T>::operator()"
            frame*
              function*
                "stripped_application_code"
            frame*
              filename*
                "function_template.hpp"
              function*
                "boost::function0<T>::operator()"
            frame*
              function*
                "stripped_application_code"
            frame*
              filename*
                "function_template.hpp"
              function*
                "boost::function0<T>::operator()"
            frame*
              function*
                "stripped_application_code"
            frame*
              filename*
                "purevirt.cpp"
              function*
                "_purecall"
            frame*
              function*
                "abort"
            frame*
              function*
                "raise"
            frame*
              filename*
                "crashpad_client_win.cc"
              function*
                "crashpad::`anonymous namespace'::HandleAbortSignal"
