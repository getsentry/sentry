---
created: '2024-11-20T21:26:26.373857+00:00'
creator: sentry
source: tests/sentry/grouping/test_grouphash_metadata.py
---
hash_basis: stacktrace
hashing_metadata: {
  "client_fingerprint": "['celery', 'SoftTimeLimitExceeded', 'sentry.tasks.store.process_event']",
  "fingerprint": "['{{ default }}', 'soft-timelimit-exceeded']",
  "fingerprint_source": "server_custom_rule",
  "is_hybrid_fingerprint": true,
  "matched_fingerprinting_rule": "type:\"SoftTimeLimitExceeded\" -> \"{{ default }}soft-timelimit-exceeded\"",
  "num_stacktraces": 1,
  "stacktrace_location": "exception",
  "stacktrace_type": "in_app"
}
---
metrics with tags: {
  "grouping.grouphashmetadata.event_hash_basis": {
    "hash_basis": "stacktrace",
    "is_hybrid_fingerprint": "True"
  },
  "grouping.grouphashmetadata.event_hashing_metadata.stacktrace": {
    "chained_exception": "False",
    "stacktrace_location": "exception",
    "stacktrace_type": "in_app"
  }
}
---
contributing variants:
  app*
    hash: "19163f3ca34f5995c69d85351ce3d697"
    component:
      app*
        exception*
          stacktrace*
            frame*
              module*
                "sentry.tasks.base"
              function*
                "_wrapped"
              context-line*
                "result = func(*args, **kwargs)"
            frame*
              module*
                "sentry.tasks.store"
              function*
                "process_event"
              context-line*
                "return _do_process_event(cache_key, start_time, event_id, process_event)"
            frame*
              module*
                "sentry.tasks.store"
              function*
                "_do_process_event"
              context-line*
                "new_data = process_stacktraces(data)"
            frame*
              module*
                "sentry.stacktraces"
              function*
                "process_stacktraces"
              context-line*
                "if processor.preprocess_step(processing_task):"
            frame*
              module*
                "sentry.lang.native.plugin"
              function*
                "preprocess_step"
              context-line*
                "referenced_images=referenced_images,"
            frame*
              module*
                "sentry.lang.native.symbolizer"
              function*
                "__init__"
              context-line*
                "with_conversion_errors=True)"
            frame*
              module*
                "sentry.models.debugfile"
              function*
                "get_symcaches"
              context-line*
                "symcaches = self._load_cachefiles_via_fs(project, cachefiles, SymCache)"
            frame*
              module*
                "sentry.models.debugfile"
              function*
                "_load_cachefiles_via_fs"
              context-line*
                "model.cache_file.save_to(cachefile_path)"
            frame*
              module*
                "sentry.models.file"
              function*
                "save_to"
              context-line*
                "delete=False).detach_tempfile()"
            frame*
              module*
                "sentry.models.file"
              function*
                "_get_chunked_blob"
              context-line*
                "delete=delete"
            frame*
              module*
                "sentry.models.file"
              function*
                "__init__"
              context-line*
                "self._prefetch(prefetch_to, delete)"
            frame*
              module*
                "sentry.models.file"
              function*
                "_prefetch"
              context-line*
                "exe.submit(fetch_file, idx.offset, idx.blob.getfile)"
          type*
            "SoftTimeLimitExceeded"
    info: {"client_fingerprint":["celery","SoftTimeLimitExceeded","sentry.tasks.store.process_event"],"matched_rule":{"attributes":{},"fingerprint":["{{ default }}","soft-timelimit-exceeded"],"matchers":[["type","SoftTimeLimitExceeded"]],"text":"type:\"SoftTimeLimitExceeded\" -> \"{{ default }}soft-timelimit-exceeded\""}}
    values: ["{{ default }}","soft-timelimit-exceeded"]
  system*
    hash: "847950eb44d280e6758d136c763d6ddc"
    component:
      system*
        exception*
          stacktrace*
            frame*
              module*
                "sentry.tasks.base"
              function*
                "_wrapped"
              context-line*
                "result = func(*args, **kwargs)"
            frame*
              module*
                "sentry.tasks.store"
              function*
                "process_event"
              context-line*
                "return _do_process_event(cache_key, start_time, event_id, process_event)"
            frame*
              module*
                "sentry.tasks.store"
              function*
                "_do_process_event"
              context-line*
                "new_data = process_stacktraces(data)"
            frame*
              module*
                "sentry.stacktraces"
              function*
                "process_stacktraces"
              context-line*
                "if processor.preprocess_step(processing_task):"
            frame*
              module*
                "sentry.lang.native.plugin"
              function*
                "preprocess_step"
              context-line*
                "referenced_images=referenced_images,"
            frame*
              module*
                "sentry.lang.native.symbolizer"
              function*
                "__init__"
              context-line*
                "with_conversion_errors=True)"
            frame*
              module*
                "sentry.models.debugfile"
              function*
                "get_symcaches"
              context-line*
                "symcaches = self._load_cachefiles_via_fs(project, cachefiles, SymCache)"
            frame*
              module*
                "sentry.models.debugfile"
              function*
                "_load_cachefiles_via_fs"
              context-line*
                "model.cache_file.save_to(cachefile_path)"
            frame*
              module*
                "sentry.models.file"
              function*
                "save_to"
              context-line*
                "delete=False).detach_tempfile()"
            frame*
              module*
                "sentry.models.file"
              function*
                "_get_chunked_blob"
              context-line*
                "delete=delete"
            frame*
              module*
                "sentry.models.file"
              function*
                "__init__"
              context-line*
                "self._prefetch(prefetch_to, delete)"
            frame*
              module*
                "sentry.models.file"
              function*
                "_prefetch"
              context-line*
                "exe.submit(fetch_file, idx.offset, idx.blob.getfile)"
            frame*
              module*
                "concurrent.futures._base"
              function*
                "__exit__"
              context-line*
                "self.shutdown(wait=True)"
            frame*
              module*
                "concurrent.futures.thread"
              function*
                "shutdown"
              context-line*
                "t.join(sys.maxint)"
            frame*
              module*
                "threading"
              function*
                "join"
              context-line*
                "self.__block.wait(delay)"
            frame*
              module*
                "threading"
              function*
                "wait"
              context-line*
                "_sleep(delay)"
            frame*
              module*
                "billiard.pool"
              function*
                "soft_timeout_sighandler"
              context-line*
                "raise SoftTimeLimitExceeded()"
          type*
            "SoftTimeLimitExceeded"
    info: {"client_fingerprint":["celery","SoftTimeLimitExceeded","sentry.tasks.store.process_event"],"matched_rule":{"attributes":{},"fingerprint":["{{ default }}","soft-timelimit-exceeded"],"matchers":[["type","SoftTimeLimitExceeded"]],"text":"type:\"SoftTimeLimitExceeded\" -> \"{{ default }}soft-timelimit-exceeded\""}}
    values: ["{{ default }}","soft-timelimit-exceeded"]
