---
created: '2019-03-15T11:58:33.334867Z'
creator: sentry
source: tests/sentry/grouping/test_variants.py
---
app:
  hash: '73470e545e51eea9cff8a6c006f68f57'
  component:
    app*
      exception*
        stacktrace*
          frame (non app frame)
            module*
              u'react-native/Libraries/BatchedBridge/MessageQueue'
            filename (module takes precedence)
              u'messagequeue.js'
            context-line*
              u'return this.flushedQueue();'
            function (function name is used only if module or filename are available)
              u'value'
          frame (non app frame)
            module*
              u'react-native/Libraries/BatchedBridge/MessageQueue'
            filename (module takes precedence)
              u'messagequeue.js'
            context-line*
              u'this._inCall--;'
            function (function name is used only if module or filename are available)
              u'flushedQueue'
          frame (non app frame)
            module*
              u'react-native/Libraries/BatchedBridge/MessageQueue'
            filename (module takes precedence)
              u'messagequeue.js'
            context-line*
              u'return this.flushedQueue();'
            function (function name is used only if module or filename are available)
              u'_inCall'
          frame (non app frame)
            module*
              u'react-native/Libraries/BatchedBridge/MessageQueue'
            filename (module takes precedence)
              u'messagequeue.js'
            context-line*
              u'this._lastFlush = new Date().getTime();'
            function (function name is used only if module or filename are available)
              u'flushedQueue'
          frame (non app frame)
            module*
              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
            filename (module takes precedence)
              u'reactnativerenderer-prod.js'
            context-line*
              u'_receiveRootNodeIDEvent(index, eventTopLevelType, i);'
            function (function name is used only if module or filename are available)
              u'_lastFlush'
          frame (non app frame)
            module*
              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
            filename (module takes precedence)
              u'reactnativerenderer-prod.js'
            context-line*
              u'batchedUpdates(function() {'
            function (function name is used only if module or filename are available)
              u'_receiveRootNodeIDEvent'
          frame (non app frame)
            module*
              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
            filename (module takes precedence)
              u'reactnativerenderer-prod.js'
            context-line*
              u'return _batchedUpdates(fn, bookkeeping);'
            function (function name is used only if module or filename are available)
              u'batchedUpdates'
          frame (non app frame)
            module*
              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
            filename (module takes precedence)
              u'reactnativerenderer-prod.js'
            context-line*
              u'return fn(a);'
            function (function name is used only if module or filename are available)
              u'_batchedUpdates'
          frame (non app frame)
            module*
              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
            filename (module takes precedence)
              u'reactnativerenderer-prod.js'
            context-line*
              u'(forEachAccumulated(events, executeDispatchesAndReleaseTopLevel),'
            function (function name is used only if module or filename are available)
              u'fn'
          frame (non app frame)
            module*
              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
            filename (module takes precedence)
              u'reactnativerenderer-prod.js'
            context-line*
              u'Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);'
            function (function name is used only if module or filename are available)
              u'forEachAccumulated'
          frame (non app frame)
            function (function name is used only if module or filename are available)
              u'[native code] forEach'
          frame (non app frame)
            module*
              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
            filename (module takes precedence)
              u'reactnativerenderer-prod.js'
            context-line*
              u'executeDispatch(e, !1, dispatchListeners, dispatchInstances);'
            function (function name is used only if module or filename are available)
              u'D'
          frame (non app frame)
            module*
              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
            filename (module takes precedence)
              u'reactnativerenderer-prod.js'
            context-line*
              u'ReactErrorUtils.invokeGuardedCallbackAndCatchFirstError('
            function (function name is used only if module or filename are available)
              u'executeDispatch'
          frame (non app frame)
            module*
              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
            filename (module takes precedence)
              u'reactnativerenderer-prod.js'
            context-line*
              u'ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);'
            function (function name is used only if module or filename are available)
              u'invokeGuardedCallbackAndCatchFirstError'
          frame (non app frame)
            module*
              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
            filename (module takes precedence)
              u'reactnativerenderer-prod.js'
            context-line*
              u'invokeGuardedCallback.apply(ReactErrorUtils, arguments);'
            function (function name is used only if module or filename are available)
              u'apply'
          frame (non app frame)
            module*
              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
            filename (module takes precedence)
              u'reactnativerenderer-prod.js'
            context-line*
              u'var funcArgs = Array.prototype.slice.call(arguments, 3);'
            function (function name is used only if module or filename are available)
              u'apply'
          frame (non app frame)
            module*
              u'react-native/Libraries/Components/Touchable/Touchable'
            filename (module takes precedence)
              u'touchable.js'
            context-line*
              u'touchableHandleResponderRelease: function(e) {'
            function (function name is used only if module or filename are available)
              u'arguments'
          frame (non app frame)
            module*
              u'react-native/Libraries/Components/Touchable/Touchable'
            filename (module takes precedence)
              u'touchable.js'
            context-line*
              u'this._performSideEffectsForTransition(curState, nextState, signal, e);'
            function (function name is used only if module or filename are available)
              u'_receiveSignal'
          frame (non app frame)
            module*
              u'react-native/Libraries/Components/Touchable/Touchable'
            filename (module takes precedence)
              u'touchable.js'
            context-line*
              u'this.touchableHandlePress(e);'
            function (function name is used only if module or filename are available)
              u'_performSideEffectsForTransition'
          frame (non app frame)
            module*
              u'react-native/Libraries/Components/Touchable/TouchableNativeFeedback.android'
            filename (module takes precedence)
              u'touchablenativefeedback.android.js'
            context-line*
              u'this.props.onPress && this.props.onPress(e);'
            function (function name is used only if module or filename are available)
              u'this'
          frame*
            module*
              u'App'
            filename (module takes precedence)
              u'app.js'
            context-line*
              u'<Button'
            function (function name is used only if module or filename are available)
              u'onPress'
          frame*
            module*
              u'App'
            filename (module takes precedence)
              u'app.js'
            context-line*
              u'<Button'
            function (function name is used only if module or filename are available)
              u'Button'
        type*
          u'TypeError'
--------------------------------------------------------------------------
system:
  hash: '12ca34ed0490aeeda7b9fd6a4e46a66f'
  component:
    system*
      exception*
        stacktrace*
          frame*
            module*
              u'react-native/Libraries/BatchedBridge/MessageQueue'
            filename (module takes precedence)
              u'messagequeue.js'
            context-line*
              u'return this.flushedQueue();'
            function (function name is used only if module or filename are available)
              u'value'
          frame*
            module*
              u'react-native/Libraries/BatchedBridge/MessageQueue'
            filename (module takes precedence)
              u'messagequeue.js'
            context-line*
              u'this._inCall--;'
            function (function name is used only if module or filename are available)
              u'flushedQueue'
          frame*
            module*
              u'react-native/Libraries/BatchedBridge/MessageQueue'
            filename (module takes precedence)
              u'messagequeue.js'
            context-line*
              u'return this.flushedQueue();'
            function (function name is used only if module or filename are available)
              u'_inCall'
          frame*
            module*
              u'react-native/Libraries/BatchedBridge/MessageQueue'
            filename (module takes precedence)
              u'messagequeue.js'
            context-line*
              u'this._lastFlush = new Date().getTime();'
            function (function name is used only if module or filename are available)
              u'flushedQueue'
          frame*
            module*
              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
            filename (module takes precedence)
              u'reactnativerenderer-prod.js'
            context-line*
              u'_receiveRootNodeIDEvent(index, eventTopLevelType, i);'
            function (function name is used only if module or filename are available)
              u'_lastFlush'
          frame*
            module*
              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
            filename (module takes precedence)
              u'reactnativerenderer-prod.js'
            context-line*
              u'batchedUpdates(function() {'
            function (function name is used only if module or filename are available)
              u'_receiveRootNodeIDEvent'
          frame*
            module*
              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
            filename (module takes precedence)
              u'reactnativerenderer-prod.js'
            context-line*
              u'return _batchedUpdates(fn, bookkeeping);'
            function (function name is used only if module or filename are available)
              u'batchedUpdates'
          frame*
            module*
              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
            filename (module takes precedence)
              u'reactnativerenderer-prod.js'
            context-line*
              u'return fn(a);'
            function (function name is used only if module or filename are available)
              u'_batchedUpdates'
          frame*
            module*
              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
            filename (module takes precedence)
              u'reactnativerenderer-prod.js'
            context-line*
              u'(forEachAccumulated(events, executeDispatchesAndReleaseTopLevel),'
            function (function name is used only if module or filename are available)
              u'fn'
          frame*
            module*
              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
            filename (module takes precedence)
              u'reactnativerenderer-prod.js'
            context-line*
              u'Array.isArray(arr) ? arr.forEach(cb, scope) : arr && cb.call(scope, arr);'
            function (function name is used only if module or filename are available)
              u'forEachAccumulated'
          frame
            function (function name is used only if module or filename are available)
              u'[native code] forEach'
          frame*
            module*
              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
            filename (module takes precedence)
              u'reactnativerenderer-prod.js'
            context-line*
              u'executeDispatch(e, !1, dispatchListeners, dispatchInstances);'
            function (function name is used only if module or filename are available)
              u'D'
          frame*
            module*
              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
            filename (module takes precedence)
              u'reactnativerenderer-prod.js'
            context-line*
              u'ReactErrorUtils.invokeGuardedCallbackAndCatchFirstError('
            function (function name is used only if module or filename are available)
              u'executeDispatch'
          frame*
            module*
              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
            filename (module takes precedence)
              u'reactnativerenderer-prod.js'
            context-line*
              u'ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);'
            function (function name is used only if module or filename are available)
              u'invokeGuardedCallbackAndCatchFirstError'
          frame*
            module*
              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
            filename (module takes precedence)
              u'reactnativerenderer-prod.js'
            context-line*
              u'invokeGuardedCallback.apply(ReactErrorUtils, arguments);'
            function (function name is used only if module or filename are available)
              u'apply'
          frame*
            module*
              u'react-native/Libraries/Renderer/ReactNativeRenderer-prod'
            filename (module takes precedence)
              u'reactnativerenderer-prod.js'
            context-line*
              u'var funcArgs = Array.prototype.slice.call(arguments, 3);'
            function (function name is used only if module or filename are available)
              u'apply'
          frame*
            module*
              u'react-native/Libraries/Components/Touchable/Touchable'
            filename (module takes precedence)
              u'touchable.js'
            context-line*
              u'touchableHandleResponderRelease: function(e) {'
            function (function name is used only if module or filename are available)
              u'arguments'
          frame*
            module*
              u'react-native/Libraries/Components/Touchable/Touchable'
            filename (module takes precedence)
              u'touchable.js'
            context-line*
              u'this._performSideEffectsForTransition(curState, nextState, signal, e);'
            function (function name is used only if module or filename are available)
              u'_receiveSignal'
          frame*
            module*
              u'react-native/Libraries/Components/Touchable/Touchable'
            filename (module takes precedence)
              u'touchable.js'
            context-line*
              u'this.touchableHandlePress(e);'
            function (function name is used only if module or filename are available)
              u'_performSideEffectsForTransition'
          frame*
            module*
              u'react-native/Libraries/Components/Touchable/TouchableNativeFeedback.android'
            filename (module takes precedence)
              u'touchablenativefeedback.android.js'
            context-line*
              u'this.props.onPress && this.props.onPress(e);'
            function (function name is used only if module or filename are available)
              u'this'
          frame*
            module*
              u'App'
            filename (module takes precedence)
              u'app.js'
            context-line*
              u'<Button'
            function (function name is used only if module or filename are available)
              u'onPress'
          frame*
            module*
              u'App'
            filename (module takes precedence)
              u'app.js'
            context-line*
              u'<Button'
            function (function name is used only if module or filename are available)
              u'Button'
        type*
          u'TypeError'
