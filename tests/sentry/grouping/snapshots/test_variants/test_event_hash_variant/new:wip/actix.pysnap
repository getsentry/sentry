---
created: '2019-03-15T11:58:32.674884Z'
creator: sentry
source: tests/sentry/grouping/test_variants.py
---
app:
  hash: 'c9dc61e20bb252c9ec1e28a75f015132'
  component:
    app*
      exception*
        stacktrace*
          frame
            function (function name is used only if module or filename are available)
              u'__pthread_start'
          frame
            function (function name is used only if module or filename are available)
              u'__pthread_body'
          frame (non app frame)
            filename*
              u'thread.rs'
            function*
              u'std::sys::unix::thread::Thread::new::thread_start'
          frame*
            filename*
              u'boxed.rs'
            function*
              u'<F as alloc::boxed::FnBox<A>>::call_box'
          frame (non app frame)
            filename*
              u'mod.rs'
            function*
              u'std::thread::Builder::spawn_unchecked::{{closure}}'
          frame (non app frame)
            filename*
              u'panic.rs'
            function*
              u'std::panic::catch_unwind'
          frame (non app frame)
            filename*
              u'panicking.rs'
            function*
              u'std::panicking::try'
          frame*
            filename*
              u'lib.rs'
            function*
              u'___rust_maybe_catch_panic'
          frame (non app frame)
            filename*
              u'panicking.rs'
            function*
              u'std::panicking::try::do_call'
          frame (non app frame)
            filename*
              u'panic.rs'
            function*
              u'<std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once'
          frame (non app frame)
            filename*
              u'mod.rs'
            function*
              u'std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}'
          frame (non app frame)
            filename*
              u'backtrace.rs'
            function*
              u'std::sys_common::backtrace::__rust_begin_short_backtrace'
          frame*
            filename*
              u'arbiter.rs'
            function*
              u'actix::arbiter::Arbiter::new_with_builder::{{closure}}'
          frame*
            filename*
              u'runtime.rs'
            function*
              u'tokio::runtime::current_thread::runtime::Runtime::block_on'
          frame*
            filename*
              u'runtime.rs'
            function*
              u'tokio::runtime::current_thread::runtime::Runtime::enter'
          frame*
            filename*
              u'lib.rs'
            function*
              u'tokio_reactor::with_default'
          frame (non app frame)
            filename*
              u'local.rs'
            function*
              u'<std::thread::local::LocalKey<T>>::with'
          frame (non app frame)
            filename*
              u'local.rs'
            function*
              u'<std::thread::local::LocalKey<T>>::try_with'
          frame*
            filename*
              u'lib.rs'
            function*
              u'tokio_reactor::with_default::{{closure}}'
          frame*
            filename*
              u'runtime.rs'
            function*
              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}'
          frame*
            filename*
              u'clock.rs'
            function*
              u'tokio_timer::clock::clock::with_default'
          frame (non app frame)
            filename*
              u'local.rs'
            function*
              u'<std::thread::local::LocalKey<T>>::with'
          frame (non app frame)
            filename*
              u'local.rs'
            function*
              u'<std::thread::local::LocalKey<T>>::try_with'
          frame*
            filename*
              u'clock.rs'
            function*
              u'tokio_timer::clock::clock::with_default::{{closure}}'
          frame*
            filename*
              u'runtime.rs'
            function*
              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}'
          frame*
            filename*
              u'handle.rs'
            function*
              u'tokio_timer::timer::handle::with_default'
          frame (non app frame)
            filename*
              u'local.rs'
            function*
              u'<std::thread::local::LocalKey<T>>::with'
          frame (non app frame)
            filename*
              u'local.rs'
            function*
              u'<std::thread::local::LocalKey<T>>::try_with'
          frame*
            filename*
              u'handle.rs'
            function*
              u'tokio_timer::timer::handle::with_default::{{closure}}'
          frame*
            filename*
              u'runtime.rs'
            function*
              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}::{{closure}}'
          frame*
            filename*
              u'global.rs'
            function*
              u'tokio_executor::global::with_default'
          frame (non app frame)
            filename*
              u'local.rs'
            function*
              u'<std::thread::local::LocalKey<T>>::with'
          frame (non app frame)
            filename*
              u'local.rs'
            function*
              u'<std::thread::local::LocalKey<T>>::try_with'
          frame*
            filename*
              u'global.rs'
            function*
              u'tokio_executor::global::with_default::{{closure}}'
          frame*
            filename*
              u'runtime.rs'
            function*
              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}::{{closure}}::{{closure}}'
          frame*
            filename*
              u'runtime.rs'
            function*
              u'tokio::runtime::current_thread::runtime::Runtime::block_on::{{closure}}'
          frame*
            filename*
              u'lib.rs'
            function*
              u"<tokio_current_thread::Entered<'a, P>>::block_on"
          frame*
            filename*
              u'lib.rs'
            function*
              u"<tokio_current_thread::Entered<'a, P>>::tick"
          frame*
            filename*
              u'scheduler.rs'
            function*
              u'<tokio_current_thread::scheduler::Scheduler<U>>::tick'
          frame*
            filename*
              u'lib.rs'
            function*
              u"<tokio_current_thread::Borrow<'a, U>>::enter"
          frame (non app frame)
            filename*
              u'local.rs'
            function*
              u'<std::thread::local::LocalKey<T>>::with'
          frame (non app frame)
            filename*
              u'local.rs'
            function*
              u'<std::thread::local::LocalKey<T>>::try_with'
          frame*
            filename*
              u'lib.rs'
            function*
              u"<tokio_current_thread::Borrow<'a, U>>::enter::{{closure}}"
          frame*
            filename*
              u'lib.rs'
            function*
              u'tokio_current_thread::CurrentRunner::set_spawn'
          frame*
            filename*
              u'lib.rs'
            function*
              u"<tokio_current_thread::Borrow<'a, U>>::enter::{{closure}}::{{closure}}"
          frame*
            filename*
              u'scheduler.rs'
            function*
              u'<tokio_current_thread::scheduler::Scheduler<U>>::tick::{{closure}}'
          frame*
            filename*
              u'scheduler.rs'
            function*
              u"<tokio_current_thread::scheduler::Scheduled<'a, U>>::tick"
          frame*
            filename*
              u'mod.rs'
            function*
              u'<futures::task_impl::Spawn<T>>::poll_future_notify'
          frame*
            filename*
              u'mod.rs'
            function*
              u'<futures::task_impl::Spawn<T>>::poll_fn_notify'
          frame*
            filename*
              u'mod.rs'
            function*
              u'<futures::task_impl::Spawn<T>>::enter'
          frame*
            filename*
              u'mod.rs'
            function*
              u'futures::task_impl::std::set'
          frame*
            filename*
              u'mod.rs'
            function*
              u'<futures::task_impl::Spawn<T>>::enter::{{closure}}'
          frame*
            filename*
              u'mod.rs'
            function*
              u'<futures::task_impl::Spawn<T>>::poll_future_notify::{{closure}}'
          frame (non app frame)
            filename*
              u'mod.rs'
            function*
              u'<alloc::boxed::Box<F> as futures::future::Future>::poll'
          frame*
            filename*
              u'then.rs'
            function*
              u'<futures::future::then::Then<A, B, F> as futures::future::Future>::poll'
          frame*
            filename*
              u'chain.rs'
            function*
              u'<futures::future::chain::Chain<A, B, C>>::poll'
          frame*
            filename*
              u'either.rs'
            function*
              u'<futures::future::either::Either<A, B> as futures::future::Future>::poll'
          frame (ignored due to recursion)
            filename*
              u'either.rs'
            function*
              u'<futures::future::either::Either<A, B> as futures::future::Future>::poll'
          frame*
            filename*
              u'acceptor.rs'
            function*
              u'<actix_web::server::acceptor::ServerMessageAcceptorServiceFut<T> as futures::future::Future>::poll'
          frame*
            filename*
              u'and_then.rs'
            function*
              u'<actix_net::service::and_then::AndThenFuture<A, B> as futures::future::Future>::poll'
          frame*
            filename*
              u'map_err.rs'
            function*
              u'<actix_net::service::map_err::MapErrFuture<A, F, E> as futures::future::Future>::poll'
          frame*
            filename*
              u'channel.rs'
            function*
              u'<actix_web::server::channel::HttpChannel<T, H> as futures::future::Future>::poll'
          frame*
            filename*
              u'channel.rs'
            function*
              u'<actix_web::server::channel::HttpChannel<T, H> as futures::future::Future>::poll'
          frame*
            filename*
              u'h1.rs'
            function*
              u'<actix_web::server::h1::Http1Dispatcher<T, H>>::poll'
          frame*
            filename*
              u'h1.rs'
            function*
              u'<actix_web::server::h1::Http1Dispatcher<T, H>>::poll_handler'
          frame*
            filename*
              u'h1.rs'
            function*
              u'<actix_web::server::h1::Http1Dispatcher<T, H>>::poll_io'
          frame*
            filename*
              u'h1.rs'
            function*
              u'<actix_web::server::h1::Http1Dispatcher<T, H>>::parse'
          frame*
            filename*
              u'pipeline.rs'
            function*
              u'<actix_web::pipeline::Pipeline<S, H> as actix_web::server::handler::HttpHandlerTask>::poll_io'
          frame*
            filename*
              u'<::log::macros::log macros>'
            function*
              u'<actix_web::pipeline::ProcessResponse<S, H>>::poll_io'
          frame*
            filename*
              u'lib.rs'
            function*
              u'log::__private_api_log'
          frame (non app frame)
            filename*
              u'log.rs'
            function*
              u'<sentry::integrations::log::Logger as log::Log>::log'
          frame (non app frame)
            filename*
              u'hub.rs'
            function*
              u'sentry::hub::Hub::with_active'
          frame (non app frame)
            filename*
              u'hub.rs'
            function*
              u'sentry::hub::Hub::with'
          frame (non app frame)
            filename*
              u'local.rs'
            function*
              u'<std::thread::local::LocalKey<T>>::with'
          frame (non app frame)
            filename*
              u'local.rs'
            function*
              u'<std::thread::local::LocalKey<T>>::try_with'
          frame (non app frame)
            filename*
              u'hub.rs'
            function*
              u'sentry::hub::Hub::with::{{closure}}'
          frame (non app frame)
            filename*
              u'hub.rs'
            function*
              u'sentry::hub::Hub::with_active::{{closure}}'
        type*
          u'actix_web::pipeline'
--------------------------------------------------------------------------
system:
  hash: '4796dda6f2cfa81ec7862cd24bcfb58e'
  component:
    system*
      exception*
        stacktrace*
          frame
            function (function name is used only if module or filename are available)
              u'__pthread_start'
          frame
            function (function name is used only if module or filename are available)
              u'__pthread_body'
          frame*
            filename*
              u'thread.rs'
            function*
              u'std::sys::unix::thread::Thread::new::thread_start'
          frame*
            filename*
              u'boxed.rs'
            function*
              u'<F as alloc::boxed::FnBox<A>>::call_box'
          frame*
            filename*
              u'mod.rs'
            function*
              u'std::thread::Builder::spawn_unchecked::{{closure}}'
          frame*
            filename*
              u'panic.rs'
            function*
              u'std::panic::catch_unwind'
          frame*
            filename*
              u'panicking.rs'
            function*
              u'std::panicking::try'
          frame*
            filename*
              u'lib.rs'
            function*
              u'___rust_maybe_catch_panic'
          frame*
            filename*
              u'panicking.rs'
            function*
              u'std::panicking::try::do_call'
          frame*
            filename*
              u'panic.rs'
            function*
              u'<std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once'
          frame*
            filename*
              u'mod.rs'
            function*
              u'std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}'
          frame*
            filename*
              u'backtrace.rs'
            function*
              u'std::sys_common::backtrace::__rust_begin_short_backtrace'
          frame*
            filename*
              u'arbiter.rs'
            function*
              u'actix::arbiter::Arbiter::new_with_builder::{{closure}}'
          frame*
            filename*
              u'runtime.rs'
            function*
              u'tokio::runtime::current_thread::runtime::Runtime::block_on'
          frame*
            filename*
              u'runtime.rs'
            function*
              u'tokio::runtime::current_thread::runtime::Runtime::enter'
          frame*
            filename*
              u'lib.rs'
            function*
              u'tokio_reactor::with_default'
          frame*
            filename*
              u'local.rs'
            function*
              u'<std::thread::local::LocalKey<T>>::with'
          frame*
            filename*
              u'local.rs'
            function*
              u'<std::thread::local::LocalKey<T>>::try_with'
          frame*
            filename*
              u'lib.rs'
            function*
              u'tokio_reactor::with_default::{{closure}}'
          frame*
            filename*
              u'runtime.rs'
            function*
              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}'
          frame*
            filename*
              u'clock.rs'
            function*
              u'tokio_timer::clock::clock::with_default'
          frame*
            filename*
              u'local.rs'
            function*
              u'<std::thread::local::LocalKey<T>>::with'
          frame*
            filename*
              u'local.rs'
            function*
              u'<std::thread::local::LocalKey<T>>::try_with'
          frame*
            filename*
              u'clock.rs'
            function*
              u'tokio_timer::clock::clock::with_default::{{closure}}'
          frame*
            filename*
              u'runtime.rs'
            function*
              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}'
          frame*
            filename*
              u'handle.rs'
            function*
              u'tokio_timer::timer::handle::with_default'
          frame*
            filename*
              u'local.rs'
            function*
              u'<std::thread::local::LocalKey<T>>::with'
          frame*
            filename*
              u'local.rs'
            function*
              u'<std::thread::local::LocalKey<T>>::try_with'
          frame*
            filename*
              u'handle.rs'
            function*
              u'tokio_timer::timer::handle::with_default::{{closure}}'
          frame*
            filename*
              u'runtime.rs'
            function*
              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}::{{closure}}'
          frame*
            filename*
              u'global.rs'
            function*
              u'tokio_executor::global::with_default'
          frame*
            filename*
              u'local.rs'
            function*
              u'<std::thread::local::LocalKey<T>>::with'
          frame*
            filename*
              u'local.rs'
            function*
              u'<std::thread::local::LocalKey<T>>::try_with'
          frame*
            filename*
              u'global.rs'
            function*
              u'tokio_executor::global::with_default::{{closure}}'
          frame*
            filename*
              u'runtime.rs'
            function*
              u'tokio::runtime::current_thread::runtime::Runtime::enter::{{closure}}::{{closure}}::{{closure}}::{{closure}}'
          frame*
            filename*
              u'runtime.rs'
            function*
              u'tokio::runtime::current_thread::runtime::Runtime::block_on::{{closure}}'
          frame*
            filename*
              u'lib.rs'
            function*
              u"<tokio_current_thread::Entered<'a, P>>::block_on"
          frame*
            filename*
              u'lib.rs'
            function*
              u"<tokio_current_thread::Entered<'a, P>>::tick"
          frame*
            filename*
              u'scheduler.rs'
            function*
              u'<tokio_current_thread::scheduler::Scheduler<U>>::tick'
          frame*
            filename*
              u'lib.rs'
            function*
              u"<tokio_current_thread::Borrow<'a, U>>::enter"
          frame*
            filename*
              u'local.rs'
            function*
              u'<std::thread::local::LocalKey<T>>::with'
          frame*
            filename*
              u'local.rs'
            function*
              u'<std::thread::local::LocalKey<T>>::try_with'
          frame*
            filename*
              u'lib.rs'
            function*
              u"<tokio_current_thread::Borrow<'a, U>>::enter::{{closure}}"
          frame*
            filename*
              u'lib.rs'
            function*
              u'tokio_current_thread::CurrentRunner::set_spawn'
          frame*
            filename*
              u'lib.rs'
            function*
              u"<tokio_current_thread::Borrow<'a, U>>::enter::{{closure}}::{{closure}}"
          frame*
            filename*
              u'scheduler.rs'
            function*
              u'<tokio_current_thread::scheduler::Scheduler<U>>::tick::{{closure}}'
          frame*
            filename*
              u'scheduler.rs'
            function*
              u"<tokio_current_thread::scheduler::Scheduled<'a, U>>::tick"
          frame*
            filename*
              u'mod.rs'
            function*
              u'<futures::task_impl::Spawn<T>>::poll_future_notify'
          frame*
            filename*
              u'mod.rs'
            function*
              u'<futures::task_impl::Spawn<T>>::poll_fn_notify'
          frame*
            filename*
              u'mod.rs'
            function*
              u'<futures::task_impl::Spawn<T>>::enter'
          frame*
            filename*
              u'mod.rs'
            function*
              u'futures::task_impl::std::set'
          frame*
            filename*
              u'mod.rs'
            function*
              u'<futures::task_impl::Spawn<T>>::enter::{{closure}}'
          frame*
            filename*
              u'mod.rs'
            function*
              u'<futures::task_impl::Spawn<T>>::poll_future_notify::{{closure}}'
          frame*
            filename*
              u'mod.rs'
            function*
              u'<alloc::boxed::Box<F> as futures::future::Future>::poll'
          frame*
            filename*
              u'then.rs'
            function*
              u'<futures::future::then::Then<A, B, F> as futures::future::Future>::poll'
          frame*
            filename*
              u'chain.rs'
            function*
              u'<futures::future::chain::Chain<A, B, C>>::poll'
          frame*
            filename*
              u'either.rs'
            function*
              u'<futures::future::either::Either<A, B> as futures::future::Future>::poll'
          frame (ignored due to recursion)
            filename*
              u'either.rs'
            function*
              u'<futures::future::either::Either<A, B> as futures::future::Future>::poll'
          frame*
            filename*
              u'acceptor.rs'
            function*
              u'<actix_web::server::acceptor::ServerMessageAcceptorServiceFut<T> as futures::future::Future>::poll'
          frame*
            filename*
              u'and_then.rs'
            function*
              u'<actix_net::service::and_then::AndThenFuture<A, B> as futures::future::Future>::poll'
          frame*
            filename*
              u'map_err.rs'
            function*
              u'<actix_net::service::map_err::MapErrFuture<A, F, E> as futures::future::Future>::poll'
          frame*
            filename*
              u'channel.rs'
            function*
              u'<actix_web::server::channel::HttpChannel<T, H> as futures::future::Future>::poll'
          frame*
            filename*
              u'channel.rs'
            function*
              u'<actix_web::server::channel::HttpChannel<T, H> as futures::future::Future>::poll'
          frame*
            filename*
              u'h1.rs'
            function*
              u'<actix_web::server::h1::Http1Dispatcher<T, H>>::poll'
          frame*
            filename*
              u'h1.rs'
            function*
              u'<actix_web::server::h1::Http1Dispatcher<T, H>>::poll_handler'
          frame*
            filename*
              u'h1.rs'
            function*
              u'<actix_web::server::h1::Http1Dispatcher<T, H>>::poll_io'
          frame*
            filename*
              u'h1.rs'
            function*
              u'<actix_web::server::h1::Http1Dispatcher<T, H>>::parse'
          frame*
            filename*
              u'pipeline.rs'
            function*
              u'<actix_web::pipeline::Pipeline<S, H> as actix_web::server::handler::HttpHandlerTask>::poll_io'
          frame*
            filename*
              u'<::log::macros::log macros>'
            function*
              u'<actix_web::pipeline::ProcessResponse<S, H>>::poll_io'
          frame*
            filename*
              u'lib.rs'
            function*
              u'log::__private_api_log'
          frame*
            filename*
              u'log.rs'
            function*
              u'<sentry::integrations::log::Logger as log::Log>::log'
          frame*
            filename*
              u'hub.rs'
            function*
              u'sentry::hub::Hub::with_active'
          frame*
            filename*
              u'hub.rs'
            function*
              u'sentry::hub::Hub::with'
          frame*
            filename*
              u'local.rs'
            function*
              u'<std::thread::local::LocalKey<T>>::with'
          frame*
            filename*
              u'local.rs'
            function*
              u'<std::thread::local::LocalKey<T>>::try_with'
          frame*
            filename*
              u'hub.rs'
            function*
              u'sentry::hub::Hub::with::{{closure}}'
          frame*
            filename*
              u'hub.rs'
            function*
              u'sentry::hub::Hub::with_active::{{closure}}'
        type*
          u'actix_web::pipeline'
