---
created: '2024-09-06T11:37:50.046632+00:00'
creator: sentry
source: tests/sentry/grouping/test_variants.py
---
app-depth-1:
  hash: "aeed765d29d1a60cb094f66d2cd8efb2"
  component:
    app-depth-1*
      exception*
        stacktrace*
          frame*
            function*
              "stripped_application_code"
        type (ignored because exception is synthetic)
          "0x40000015 / 0x00000001"
        value (ignored because stacktrace takes precedence)
          "Fatal Error: <hex> / <hex>"
--------------------------------------------------------------------------
app-depth-2:
  hash: "9a6cd9472e8cac05c8e9b555384341d9"
  component:
    app-depth-2*
      exception*
        stacktrace*
          frame*
            function*
              "stripped_application_code"
          frame*
            function*
              "stripped_application_code"
          frame* (marked as prefix frame by stack trace rule (category:throw +prefix ^-group))
            function*
              "raise"
        type (ignored because exception is synthetic)
          "0x40000015 / 0x00000001"
        value (ignored because stacktrace takes precedence)
          "Fatal Error: <hex> / <hex>"
--------------------------------------------------------------------------
app-depth-3:
  hash: "10931b6ba91d6826d5cce1682fd9d67b"
  component:
    app-depth-3*
      exception*
        stacktrace*
          frame*
            function*
              "stripped_application_code"
          frame*
            function*
              "stripped_application_code"
          frame*
            function*
              "stripped_application_code"
          frame* (marked as prefix frame by stack trace rule (category:throw +prefix ^-group))
            function*
              "raise"
        type (ignored because exception is synthetic)
          "0x40000015 / 0x00000001"
        value (ignored because stacktrace takes precedence)
          "Fatal Error: <hex> / <hex>"
--------------------------------------------------------------------------
app-depth-4:
  hash: "4b191f37efd301221e8e32962b44f4d5"
  component:
    app-depth-4*
      exception*
        stacktrace*
          frame*
            function*
              "stripped_application_code"
          frame*
            function*
              "stripped_application_code"
          frame*
            function*
              "stripped_application_code"
          frame*
            function*
              "stripped_application_code"
          frame* (marked as prefix frame by stack trace rule (category:throw +prefix ^-group))
            function*
              "raise"
        type (ignored because exception is synthetic)
          "0x40000015 / 0x00000001"
        value (ignored because stacktrace takes precedence)
          "Fatal Error: <hex> / <hex>"
--------------------------------------------------------------------------
app-depth-5:
  hash: "fca1c2ac2f8b338a36b19dc2064660d9"
  component:
    app-depth-5*
      exception*
        stacktrace*
          frame*
            function*
              "DispatchMessageWorker"
          frame*
            function*
              "stripped_application_code"
          frame*
            function*
              "stripped_application_code"
          frame*
            function*
              "stripped_application_code"
          frame*
            function*
              "stripped_application_code"
          frame* (marked as prefix frame by stack trace rule (category:throw +prefix ^-group))
            function*
              "raise"
        type (ignored because exception is synthetic)
          "0x40000015 / 0x00000001"
        value (ignored because stacktrace takes precedence)
          "Fatal Error: <hex> / <hex>"
--------------------------------------------------------------------------
app-depth-max:
  hash: "15526a7b64e9b5dc6d89e7ebec864260"
  component:
    app-depth-max*
      exception*
        stacktrace*
          frame* (marked out of app by stack trace rule (family:native function:std::* -app))
            filename*
              "xstring"
            function*
              "std::basic_string<T>::{ctor}"
          frame*
            function*
              "stripped_application_code"
          frame*
            function*
              "stripped_application_code"
          frame*
            function*
              "DispatchMessageWorker"
          frame*
            function*
              "stripped_application_code"
          frame*
            function*
              "stripped_application_code"
          frame*
            function*
              "stripped_application_code"
          frame*
            function*
              "stripped_application_code"
          frame* (marked as prefix frame by stack trace rule (category:throw +prefix ^-group))
            function*
              "raise"
        type (ignored because exception is synthetic)
          "0x40000015 / 0x00000001"
        value (ignored because stacktrace takes precedence)
          "Fatal Error: <hex> / <hex>"
--------------------------------------------------------------------------
system:
  hash: "15526a7b64e9b5dc6d89e7ebec864260"
  component:
    system*
      exception*
        stacktrace*
          frame (ignored by stack trace rule (category:threadbase -group v-group))
            function*
              "RtlUserThreadStart"
          frame (ignored by stack trace rule (category:threadbase -group v-group))
            function*
              "BaseThreadInitThunk"
          frame (ignored by stack trace rule (category:threadbase -group v-group))
            function*
              "stripped_application_code"
          frame (ignored by stack trace rule (category:threadbase -group v-group))
            filename*
              "exe_common.inl"
            function*
              "invoke_main"
          frame (ignored by stack trace rule (category:threadbase -group v-group))
            filename*
              "winmain.cpp"
            function*
              "wWinMain"
          frame* (marked out of app by stack trace rule (family:native function:std::* -app))
            filename*
              "xstring"
            function*
              "std::basic_string<T>::{ctor}"
          frame (ignored by stack trace rule (category:internals -group))
            filename*
              "xstring"
            function*
              "std::basic_string<T>::assign"
          frame (marked out of app by stack trace rule (family:native function:std::* -app))
            filename*
              "xstring"
            function*
              "std::basic_string<T>::assign"
          frame (ignored by stack trace rule (category:internals -group))
            filename*
              "xstring"
            function*
              "std::basic_string<T>::_Reallocate_for"
          frame*
            function*
              "stripped_application_code"
          frame (ignored due to recursion)
            function*
              "stripped_application_code"
          frame (ignored due to recursion)
            function*
              "stripped_application_code"
          frame (ignored due to recursion)
            function*
              "stripped_application_code"
          frame (ignored due to recursion)
            function*
              "stripped_application_code"
          frame (ignored due to recursion)
            function*
              "stripped_application_code"
          frame (ignored by stack trace rule (category:indirection -group))
            filename*
              "functional"
            function*
              "std::_Func_class<T>::operator()"
          frame*
            function*
              "stripped_application_code"
          frame*
            function*
              "DispatchMessageWorker"
          frame (ignored by stack trace rule (category:internals -group))
            function*
              "UserCallWinProcCheckWow"
          frame*
            function*
              "stripped_application_code"
          frame (ignored due to recursion)
            function*
              "stripped_application_code"
          frame (ignored due to recursion)
            function*
              "stripped_application_code"
          frame (ignored due to recursion)
            function*
              "stripped_application_code"
          frame (ignored due to recursion)
            function*
              "stripped_application_code"
          frame (ignored due to recursion)
            function*
              "stripped_application_code"
          frame (ignored by stack trace rule (category:indirection -group))
            filename*
              "function_template.hpp"
            function*
              "boost::function0<T>::operator()"
          frame*
            function*
              "stripped_application_code"
          frame (ignored by stack trace rule (category:indirection -group))
            filename*
              "function_template.hpp"
            function*
              "boost::function0<T>::operator()"
          frame*
            function*
              "stripped_application_code"
          frame (ignored by stack trace rule (category:indirection -group))
            filename*
              "function_template.hpp"
            function*
              "boost::function0<T>::operator()"
          frame*
            function*
              "stripped_application_code"
          frame (ignored due to recursion)
            function*
              "stripped_application_code"
          frame (ignored due to recursion)
            function*
              "stripped_application_code"
          frame (ignored by stack trace rule (category:indirection -group))
            filename*
              "purevirt.cpp"
            function*
              "_purecall"
          frame (ignored by stack trace rule (category:internals -group))
            function*
              "abort"
          frame* (marked as prefix frame by stack trace rule (category:throw +prefix ^-group))
            function*
              "raise"
          frame (ignored by stack trace rule (category:throw +prefix ^-group))
            filename*
              "crashpad_client_win.cc"
            function*
              "crashpad::`anonymous namespace'::HandleAbortSignal"
        type (ignored because exception is synthetic)
          "0x40000015 / 0x00000001"
        value (ignored because stacktrace takes precedence)
          "Fatal Error: <hex> / <hex>"
