---
created: '2024-10-16T19:27:00.095990+00:00'
creator: sentry
source: tests/sentry/grouping/test_variants.py
---
app:
  hash: "19163f3ca34f5995c69d85351ce3d697"
  component:
    app*
      exception*
        stacktrace*
          frame*
            module*
              "sentry.tasks.base"
            filename (module takes precedence)
              "base.py"
            function*
              "_wrapped"
            context-line*
              "result = func(*args, **kwargs)"
          frame*
            module*
              "sentry.tasks.store"
            filename (module takes precedence)
              "store.py"
            function*
              "process_event"
            context-line*
              "return _do_process_event(cache_key, start_time, event_id, process_event)"
          frame*
            module*
              "sentry.tasks.store"
            filename (module takes precedence)
              "store.py"
            function*
              "_do_process_event"
            context-line*
              "new_data = process_stacktraces(data)"
          frame*
            module*
              "sentry.stacktraces"
            filename (module takes precedence)
              "stacktraces.py"
            function*
              "process_stacktraces"
            context-line*
              "if processor.preprocess_step(processing_task):"
          frame*
            module*
              "sentry.lang.native.plugin"
            filename (module takes precedence)
              "plugin.py"
            function*
              "preprocess_step"
            context-line*
              "referenced_images=referenced_images,"
          frame*
            module*
              "sentry.lang.native.symbolizer"
            filename (module takes precedence)
              "symbolizer.py"
            function*
              "__init__"
            context-line*
              "with_conversion_errors=True)"
          frame*
            module*
              "sentry.models.debugfile"
            filename (module takes precedence)
              "debugfile.py"
            function*
              "get_symcaches"
            context-line*
              "symcaches = self._load_cachefiles_via_fs(project, cachefiles, SymCache)"
          frame*
            module*
              "sentry.models.debugfile"
            filename (module takes precedence)
              "debugfile.py"
            function*
              "_load_cachefiles_via_fs"
            context-line*
              "model.cache_file.save_to(cachefile_path)"
          frame*
            module*
              "sentry.models.file"
            filename (module takes precedence)
              "file.py"
            function*
              "save_to"
            context-line*
              "delete=False).detach_tempfile()"
          frame*
            module*
              "sentry.models.file"
            filename (module takes precedence)
              "file.py"
            function*
              "_get_chunked_blob"
            context-line*
              "delete=delete"
          frame*
            module*
              "sentry.models.file"
            filename (module takes precedence)
              "file.py"
            function*
              "__init__"
            context-line*
              "self._prefetch(prefetch_to, delete)"
          frame*
            module*
              "sentry.models.file"
            filename (module takes precedence)
              "file.py"
            function*
              "_prefetch"
            context-line*
              "exe.submit(fetch_file, idx.offset, idx.blob.getfile)"
          frame (non app frame)
            module*
              "concurrent.futures._base"
            filename (module takes precedence)
              "_base.py"
            function*
              "__exit__"
            context-line*
              "self.shutdown(wait=True)"
          frame (non app frame)
            module*
              "concurrent.futures.thread"
            filename (module takes precedence)
              "thread.py"
            function*
              "shutdown"
            context-line*
              "t.join(sys.maxint)"
          frame (non app frame)
            module*
              "threading"
            filename (module takes precedence)
              "threading.py"
            function*
              "join"
            context-line*
              "self.__block.wait(delay)"
          frame (non app frame)
            module*
              "threading"
            filename (module takes precedence)
              "threading.py"
            function*
              "wait"
            context-line*
              "_sleep(delay)"
          frame (non app frame)
            module*
              "billiard.pool"
            filename (module takes precedence)
              "pool.py"
            function*
              "soft_timeout_sighandler"
            context-line*
              "raise SoftTimeLimitExceeded()"
        type*
          "SoftTimeLimitExceeded"
        value (ignored because stacktrace takes precedence)
          "SoftTimeLimitExceeded()"
  info: {"client_fingerprint":["celery","SoftTimeLimitExceeded","sentry.tasks.store.process_event"],"matched_rule":{"attributes":{},"fingerprint":["{{ default }}","soft-timelimit-exceeded"],"matchers":[["type","SoftTimeLimitExceeded"]],"text":"type:\"SoftTimeLimitExceeded\" -> \"{{ default }}soft-timelimit-exceeded\""}}
  values: ["{{ default }}","soft-timelimit-exceeded"]
--------------------------------------------------------------------------
system:
  hash: "847950eb44d280e6758d136c763d6ddc"
  component:
    system*
      exception*
        stacktrace*
          frame*
            module*
              "sentry.tasks.base"
            filename (module takes precedence)
              "base.py"
            function*
              "_wrapped"
            context-line*
              "result = func(*args, **kwargs)"
          frame*
            module*
              "sentry.tasks.store"
            filename (module takes precedence)
              "store.py"
            function*
              "process_event"
            context-line*
              "return _do_process_event(cache_key, start_time, event_id, process_event)"
          frame*
            module*
              "sentry.tasks.store"
            filename (module takes precedence)
              "store.py"
            function*
              "_do_process_event"
            context-line*
              "new_data = process_stacktraces(data)"
          frame*
            module*
              "sentry.stacktraces"
            filename (module takes precedence)
              "stacktraces.py"
            function*
              "process_stacktraces"
            context-line*
              "if processor.preprocess_step(processing_task):"
          frame*
            module*
              "sentry.lang.native.plugin"
            filename (module takes precedence)
              "plugin.py"
            function*
              "preprocess_step"
            context-line*
              "referenced_images=referenced_images,"
          frame*
            module*
              "sentry.lang.native.symbolizer"
            filename (module takes precedence)
              "symbolizer.py"
            function*
              "__init__"
            context-line*
              "with_conversion_errors=True)"
          frame*
            module*
              "sentry.models.debugfile"
            filename (module takes precedence)
              "debugfile.py"
            function*
              "get_symcaches"
            context-line*
              "symcaches = self._load_cachefiles_via_fs(project, cachefiles, SymCache)"
          frame*
            module*
              "sentry.models.debugfile"
            filename (module takes precedence)
              "debugfile.py"
            function*
              "_load_cachefiles_via_fs"
            context-line*
              "model.cache_file.save_to(cachefile_path)"
          frame*
            module*
              "sentry.models.file"
            filename (module takes precedence)
              "file.py"
            function*
              "save_to"
            context-line*
              "delete=False).detach_tempfile()"
          frame*
            module*
              "sentry.models.file"
            filename (module takes precedence)
              "file.py"
            function*
              "_get_chunked_blob"
            context-line*
              "delete=delete"
          frame*
            module*
              "sentry.models.file"
            filename (module takes precedence)
              "file.py"
            function*
              "__init__"
            context-line*
              "self._prefetch(prefetch_to, delete)"
          frame*
            module*
              "sentry.models.file"
            filename (module takes precedence)
              "file.py"
            function*
              "_prefetch"
            context-line*
              "exe.submit(fetch_file, idx.offset, idx.blob.getfile)"
          frame*
            module*
              "concurrent.futures._base"
            filename (module takes precedence)
              "_base.py"
            function*
              "__exit__"
            context-line*
              "self.shutdown(wait=True)"
          frame*
            module*
              "concurrent.futures.thread"
            filename (module takes precedence)
              "thread.py"
            function*
              "shutdown"
            context-line*
              "t.join(sys.maxint)"
          frame*
            module*
              "threading"
            filename (module takes precedence)
              "threading.py"
            function*
              "join"
            context-line*
              "self.__block.wait(delay)"
          frame*
            module*
              "threading"
            filename (module takes precedence)
              "threading.py"
            function*
              "wait"
            context-line*
              "_sleep(delay)"
          frame*
            module*
              "billiard.pool"
            filename (module takes precedence)
              "pool.py"
            function*
              "soft_timeout_sighandler"
            context-line*
              "raise SoftTimeLimitExceeded()"
        type*
          "SoftTimeLimitExceeded"
        value (ignored because stacktrace takes precedence)
          "SoftTimeLimitExceeded()"
  info: {"client_fingerprint":["celery","SoftTimeLimitExceeded","sentry.tasks.store.process_event"],"matched_rule":{"attributes":{},"fingerprint":["{{ default }}","soft-timelimit-exceeded"],"matchers":[["type","SoftTimeLimitExceeded"]],"text":"type:\"SoftTimeLimitExceeded\" -> \"{{ default }}soft-timelimit-exceeded\""}}
  values: ["{{ default }}","soft-timelimit-exceeded"]
