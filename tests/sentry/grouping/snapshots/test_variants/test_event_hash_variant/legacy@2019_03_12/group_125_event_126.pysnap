---
created: '2021-04-02T09:10:50.505122Z'
creator: sentry
source: tests/sentry/grouping/test_variants.py
---
app:
  hash: null
  component:
    app (exception of system takes precedence)
      exception (ignored because hash matches system variant)
        stacktrace*
          frame (marked out of app by stack trace rule (family:native package:/usr/lib/** -app))
            function (function name is not used if module or filename are available)
              "start"
          frame (marked out of app by stack trace rule (family:native package:/usr/lib/** -app))
            function (function name is not used if module or filename are available)
              "start"
          frame (frame considered in-app because no frame is in-app)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame* (frame considered in-app because no frame is in-app)
            filename*
              "functional"
            function*
              "std::__1::function<T>::operator()"
          frame* (frame considered in-app because no frame is in-app)
            filename*
              "functional"
            function*
              "std::__1::__function::__value_func<T>::operator()"
          frame* (frame considered in-app because no frame is in-app)
            filename*
              "functional"
            function*
              "std::__1::__function::__func<T>::operator()"
          frame* (frame considered in-app because no frame is in-app)
            filename*
              "functional"
            function*
              "std::__1::__function::__alloc_func<T>::operator()"
          frame* (frame considered in-app because no frame is in-app)
            filename*
              "__functional_base"
            function*
              "std::__1::__invoke_void_return_wrapper<T>::__call<T>"
          frame* (frame considered in-app because no frame is in-app)
            filename*
              "type_traits"
            function*
              "std::__1::__invoke<T>"
          frame* (frame considered in-app because no frame is in-app)
            filename*
              "Src/Initialize.cpp"
            function*
              "MZ::`anonymous namespace'::lambda::operator()"
          frame (frame considered in-app because no frame is in-app)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (frame considered in-app because no frame is in-app)
            function (function name is not used if module or filename are available)
              "CFBundleGetFunctionPointerForName"
          frame (frame considered in-app because no frame is in-app)
            function (function name is not used if module or filename are available)
              "_CFBundleLoadExecutableAndReturnError"
          frame (frame considered in-app because no frame is in-app)
            function (function name is not used if module or filename are available)
              "_CFBundleDlfcnLoadBundle"
          frame (marked out of app by stack trace rule (family:native package:/usr/lib/** -app))
            function (function name is not used if module or filename are available)
              "dlopen"
          frame (marked out of app by stack trace rule (family:native package:/usr/lib/** -app))
            function (function name is not used if module or filename are available)
              "dlopen_internal"
          frame (marked out of app by stack trace rule (family:native package:/usr/lib/** -app))
            function (function name is not used if module or filename are available)
              "dyld::link"
          frame (marked out of app by stack trace rule (family:native package:/usr/lib/** -app))
            function (function name is not used if module or filename are available)
              "ImageLoader::link"
          frame (marked out of app by stack trace rule (family:native package:/usr/lib/** -app))
            function (function name is not used if module or filename are available)
              "ImageLoader::recursiveRebase"
          frame (marked out of app by stack trace rule (family:native package:/usr/lib/** -app))
            function (function name is not used if module or filename are available)
              "ImageLoaderMachOCompressed::rebase"
        type*
          "EXC_BAD_ACCESS / 0x00000032"
        value (stacktrace and type take precedence)
          "Fatal Error: EXC_BAD_ACCESS / 0x00000032"
--------------------------------------------------------------------------
system:
  hash: "c470859cd6d1e38f3bd089877a7b8b97"
  component:
    system*
      exception*
        stacktrace*
          frame (marked out of app by stack trace rule (family:native package:/usr/lib/** -app))
            function (function name is not used if module or filename are available)
              "start"
          frame (marked out of app by stack trace rule (family:native package:/usr/lib/** -app))
            function (function name is not used if module or filename are available)
              "start"
          frame
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame*
            filename*
              "functional"
            function*
              "std::__1::function<T>::operator()"
          frame*
            filename*
              "functional"
            function*
              "std::__1::__function::__value_func<T>::operator()"
          frame*
            filename*
              "functional"
            function*
              "std::__1::__function::__func<T>::operator()"
          frame*
            filename*
              "functional"
            function*
              "std::__1::__function::__alloc_func<T>::operator()"
          frame*
            filename*
              "__functional_base"
            function*
              "std::__1::__invoke_void_return_wrapper<T>::__call<T>"
          frame*
            filename*
              "type_traits"
            function*
              "std::__1::__invoke<T>"
          frame*
            filename*
              "Src/Initialize.cpp"
            function*
              "MZ::`anonymous namespace'::lambda::operator()"
          frame
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame (ignored due to recursion)
            function (function name is not used if module or filename are available)
              "stripped_application_code"
          frame
            function (function name is not used if module or filename are available)
              "CFBundleGetFunctionPointerForName"
          frame
            function (function name is not used if module or filename are available)
              "_CFBundleLoadExecutableAndReturnError"
          frame
            function (function name is not used if module or filename are available)
              "_CFBundleDlfcnLoadBundle"
          frame (marked out of app by stack trace rule (family:native package:/usr/lib/** -app))
            function (function name is not used if module or filename are available)
              "dlopen"
          frame (marked out of app by stack trace rule (family:native package:/usr/lib/** -app))
            function (function name is not used if module or filename are available)
              "dlopen_internal"
          frame (marked out of app by stack trace rule (family:native package:/usr/lib/** -app))
            function (function name is not used if module or filename are available)
              "dyld::link"
          frame (marked out of app by stack trace rule (family:native package:/usr/lib/** -app))
            function (function name is not used if module or filename are available)
              "ImageLoader::link"
          frame (marked out of app by stack trace rule (family:native package:/usr/lib/** -app))
            function (function name is not used if module or filename are available)
              "ImageLoader::recursiveRebase"
          frame (marked out of app by stack trace rule (family:native package:/usr/lib/** -app))
            function (function name is not used if module or filename are available)
              "ImageLoaderMachOCompressed::rebase"
        type*
          "EXC_BAD_ACCESS / 0x00000032"
        value (stacktrace and type take precedence)
          "Fatal Error: EXC_BAD_ACCESS / 0x00000032"
