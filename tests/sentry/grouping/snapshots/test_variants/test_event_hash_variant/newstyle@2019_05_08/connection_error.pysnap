---
created: '2019-05-08T07:31:17.178420Z'
creator: sentry
source: tests/sentry/grouping/test_variants.py
---
app:
  hash: '6b059b9febc815ac18ac4d2082e38a9b'
  component:
    app*
      exception*
        stacktrace*
          frame*
            module*
              u'sentry.utils.safe'
            filename (module takes precedence)
              u'safe.py'
            function*
              u'safe_execute'
            context-line*
              u'result = func(*args, **kwargs)'
          frame*
            module*
              u'sentry.utils.services'
            filename (module takes precedence)
              u'services.py'
            function*
              u'<lambda>'
            context-line*
              u'context[key] = (lambda f: lambda *a, **k: getattr(self, f)(*a, **k))(key)'
          frame*
            module*
              u'getsentry.quotas'
            filename (module takes precedence)
              u'quotas.py'
            function*
              u'is_rate_limited'
            context-line*
              u'return super(SubscriptionQuota, self).is_rate_limited(project, key=key)'
          frame*
            module*
              u'sentry.quotas.redis'
            filename (module takes precedence)
              u'redis.py'
            function*
              u'is_rate_limited'
            context-line*
              u'rejections = is_rate_limited(client, keys, args)'
          frame*
            module*
              u'sentry.utils.redis'
            filename (module takes precedence)
              u'redis.py'
            function*
              u'call_script'
            context-line*
              u'return script(keys, args, client)'
          frame (non app frame)
            module*
              u'redis.client'
            filename (module takes precedence)
              u'client.py'
            function*
              u'__call__'
            context-line*
              u'return client.evalsha(self.sha, len(keys), *args)'
          frame (non app frame)
            module*
              u'redis.client'
            filename (module takes precedence)
              u'client.py'
            function*
              u'evalsha'
            context-line*
              u"return self.execute_command('EVALSHA', sha, numkeys, *keys_and_args)"
          frame (non app frame)
            module*
              u'redis.client'
            filename (module takes precedence)
              u'client.py'
            function*
              u'execute_command'
            context-line*
              u'return self.parse_response(connection, command_name, **options)'
          frame (non app frame)
            module*
              u'redis.client'
            filename (module takes precedence)
              u'client.py'
            function*
              u'parse_response'
            context-line*
              u'response = connection.read_response()'
          frame (non app frame)
            module*
              u'redis.connection'
            filename (module takes precedence)
              u'connection.py'
            function*
              u'read_response'
            context-line*
              u'response = self._parser.read_response()'
          frame (non app frame)
            module*
              u'redis.connection'
            filename (module takes precedence)
              u'connection.py'
            function*
              u'read_response'
            context-line*
              u'(e.args,))'
        type*
          u'ConnectionError'
        value (ignored because stacktrace takes precedence)
          u"Error while reading from socket: ('Connection closed by server.',)"
--------------------------------------------------------------------------
default:
  hash: None
  component:
    default (exception of app takes precedence)
      message (exception of app takes precedence)
        u'%s.process_error'
--------------------------------------------------------------------------
system:
  hash: '013d3477a774fe20c468dc8accd516f1'
  component:
    system*
      exception*
        stacktrace*
          frame*
            module*
              u'sentry.utils.safe'
            filename (module takes precedence)
              u'safe.py'
            function*
              u'safe_execute'
            context-line*
              u'result = func(*args, **kwargs)'
          frame*
            module*
              u'sentry.utils.services'
            filename (module takes precedence)
              u'services.py'
            function*
              u'<lambda>'
            context-line*
              u'context[key] = (lambda f: lambda *a, **k: getattr(self, f)(*a, **k))(key)'
          frame*
            module*
              u'getsentry.quotas'
            filename (module takes precedence)
              u'quotas.py'
            function*
              u'is_rate_limited'
            context-line*
              u'return super(SubscriptionQuota, self).is_rate_limited(project, key=key)'
          frame*
            module*
              u'sentry.quotas.redis'
            filename (module takes precedence)
              u'redis.py'
            function*
              u'is_rate_limited'
            context-line*
              u'rejections = is_rate_limited(client, keys, args)'
          frame*
            module*
              u'sentry.utils.redis'
            filename (module takes precedence)
              u'redis.py'
            function*
              u'call_script'
            context-line*
              u'return script(keys, args, client)'
          frame*
            module*
              u'redis.client'
            filename (module takes precedence)
              u'client.py'
            function*
              u'__call__'
            context-line*
              u'return client.evalsha(self.sha, len(keys), *args)'
          frame*
            module*
              u'redis.client'
            filename (module takes precedence)
              u'client.py'
            function*
              u'evalsha'
            context-line*
              u"return self.execute_command('EVALSHA', sha, numkeys, *keys_and_args)"
          frame*
            module*
              u'redis.client'
            filename (module takes precedence)
              u'client.py'
            function*
              u'execute_command'
            context-line*
              u'return self.parse_response(connection, command_name, **options)'
          frame*
            module*
              u'redis.client'
            filename (module takes precedence)
              u'client.py'
            function*
              u'parse_response'
            context-line*
              u'response = connection.read_response()'
          frame*
            module*
              u'redis.connection'
            filename (module takes precedence)
              u'connection.py'
            function*
              u'read_response'
            context-line*
              u'response = self._parser.read_response()'
          frame*
            module*
              u'redis.connection'
            filename (module takes precedence)
              u'connection.py'
            function*
              u'read_response'
            context-line*
              u'(e.args,))'
        type*
          u'ConnectionError'
        value (ignored because stacktrace takes precedence)
          u"Error while reading from socket: ('Connection closed by server.',)"
