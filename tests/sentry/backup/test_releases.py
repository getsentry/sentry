from __future__ import annotations

from datetime import datetime, timedelta, timezone
from typing import Literal, Type
from uuid import uuid4

from django.core.management import call_command
from django.db import router
from sentry_relay.auth import generate_key_pair

from sentry.db.models import BaseModel
from sentry.incidents.models import (
    IncidentActivity,
    IncidentSnapshot,
    IncidentSubscription,
    IncidentTrigger,
    PendingIncidentSnapshot,
    TimeSeriesSnapshot,
)
from sentry.models.actor import ACTOR_TYPES, Actor
from sentry.models.apiapplication import ApiApplication
from sentry.models.apiauthorization import ApiAuthorization
from sentry.models.apikey import ApiKey
from sentry.models.apitoken import ApiToken
from sentry.models.authenticator import Authenticator
from sentry.models.authidentity import AuthIdentity
from sentry.models.authprovider import AuthProvider
from sentry.models.counter import Counter
from sentry.models.dashboard import Dashboard, DashboardTombstone
from sentry.models.dashboard_widget import (
    DashboardWidget,
    DashboardWidgetQuery,
    DashboardWidgetTypes,
)
from sentry.models.email import Email
from sentry.models.environment import EnvironmentProject
from sentry.models.options.option import ControlOption, Option
from sentry.models.options.organization_option import OrganizationOption
from sentry.models.options.user_option import UserOption
from sentry.models.organization import Organization
from sentry.models.organizationaccessrequest import OrganizationAccessRequest
from sentry.models.orgauthtoken import OrgAuthToken
from sentry.models.projectownership import ProjectOwnership
from sentry.models.projectredirect import ProjectRedirect
from sentry.models.recentsearch import RecentSearch
from sentry.models.relay import Relay, RelayUsage
from sentry.models.repository import Repository
from sentry.models.rule import RuleActivity, RuleActivityType
from sentry.models.savedsearch import SavedSearch, Visibility
from sentry.models.search_common import SearchType
from sentry.models.servicehook import ServiceHook
from sentry.models.userip import UserIP
from sentry.models.userrole import UserRole, UserRoleUser
from sentry.monitors.models import (
    CheckInStatus,
    Monitor,
    MonitorCheckIn,
    MonitorEnvironment,
    MonitorLocation,
    MonitorType,
    ScheduleType,
)
from sentry.sentry_apps.apps import SentryAppUpdater
from sentry.silo import unguarded_write
from sentry.testutils import TransactionTestCase
from sentry.utils.json import JSONData
from tests.sentry.backup import (
    get_exportable_final_derivations_of,
    import_export_then_validate,
    targets,
)

RELEASE_TESTED_MODELS = set()


def mark(*marking: Type | Literal["__all__"]):
    """A function that runs at module load time and marks all models that appear in
    `test_at_head()` below.

    Use the sentinel string "__all__" to indicate that all models are expected."""

    all: Literal["__all__"] = "__all__"
    for model in marking:
        if model == all:
            all_models = get_exportable_final_derivations_of(BaseModel)
            RELEASE_TESTED_MODELS.update({c.__name__ for c in all_models})
            return list(all_models)

        RELEASE_TESTED_MODELS.add(model.__name__)
    return marking


class VersionCompatibilityTests(TransactionTestCase):
    """Ensures that exports generated by prior releases can still be imported and re-exported by newer cuts of Sentry."""

    def setUp(self):
        with unguarded_write(using=router.db_for_write(Organization)):
            # Reset the Django database.
            call_command("flush", verbosity=0, interactive=False)

    def import_export_then_validate(self) -> JSONData:
        return import_export_then_validate(self._testMethodName)

    @targets(mark("__all__"))
    def test_at_head(self):
        """Test that the currently checked in code passes a script that hits every `__include_in_export = True` model."""

        # User*
        user = self.create_user("user@example.com")
        self.add_user_permission(user, "users.admin")
        role = UserRole.objects.create(name="test-role")
        UserRoleUser.objects.create(user=user, role=role)
        UserOption.objects.create(user=user, key="timezone", value="Europe/Vienna")
        UserIP.objects.create(
            user=user,
            ip_address="127.0.0.2",
            first_seen=datetime(2012, 4, 5, 3, 29, 45, tzinfo=timezone.utc),
            last_seen=datetime(2012, 4, 5, 3, 29, 45, tzinfo=timezone.utc),
        )

        # Organization*
        org = self.create_organization(name="test_org", owner=user)
        member = self.create_member(organization=org, user=self.user, role="member")
        OrganizationOption.objects.create(
            organization=org, key="sentry:account-rate-limit", value=0
        )
        OrgAuthToken.objects.create(
            organization_id=org.id,
            name="token 1",
            token_hashed="ABCDEF",
            token_last_characters="xyz1",
            scope_list=["org:ci"],
            date_last_used=None,
        )

        # SentryApp*
        app = self.create_sentry_app(name="test_app", organization=org)
        install = self.create_sentry_app_installation(slug=app.slug, organization=org, user=user)
        updater = SentryAppUpdater(sentry_app=app)
        updater.schema = {"elements": [self.create_alert_rule_action_schema()]}
        updater.run(user)

        # Api*
        api_app = ApiApplication.objects.create(
            name="test", owner=user, redirect_uris="http://example.com\nhttp://sub.example.com/path"
        )
        ApiAuthorization.objects.create(application=api_app, user=user)
        ApiToken.objects.create(application=api_app, user=user, token=uuid4().hex, expires_at=None)
        ApiKey.objects.create(key=uuid4().hex, organization_id=org.id)

        # Auth*
        Authenticator.objects.create(user=user, type=1)
        AuthIdentity.objects.create(
            user=user,
            auth_provider=AuthProvider.objects.create(organization_id=1, provider="sentry"),
            ident="123456789",
            data={
                "key1": "value1",
                "key2": 42,
                "key3": [1, 2, 3],
                "key4": {"nested_key": "nested_value"},
            },
        )

        # *Options
        Option.objects.create(key="foo", value="a")
        ControlOption.objects.create(key="bar", value="b")

        # Team
        team = self.create_team(name="test_team", organization=org)
        self.create_team_membership(user=user, team=team)
        OrganizationAccessRequest.objects.create(member=member, team=team)
        actor = Actor.objects.create(type=ACTOR_TYPES["team"])

        # Project*
        project = self.create_project()
        self.create_project_key(project)
        self.create_project_bookmark(project=project, user=user)
        project = self.create_project()
        ProjectOwnership.objects.create(
            project=project, raw='{"hello":"hello"}', schema={"hello": "hello"}
        )
        ProjectRedirect.record(project, "old_slug")

        # ServiceHook
        ServiceHook.objects.create(
            application_id=app.id,
            actor_id=actor.id,
            project_id=project.id,
            organization_id=org.id,
            events=[],
            installation_id=install.id,
            url="https://example.com",
        )

        # Rule*
        rule = self.create_project_rule(project=project)
        RuleActivity.objects.create(rule=rule, type=RuleActivityType.CREATED.value)
        self.snooze_rule(user_id=user.id, owner_id=user.id, rule=rule)

        # Environment*
        env = self.create_environment()
        EnvironmentProject.objects.create(project=project, environment=env, is_hidden=False)

        # Monitor*
        monitor = Monitor.objects.create(
            organization_id=project.organization.id,
            project_id=project.id,
            type=MonitorType.CRON_JOB,
            config={"schedule": "* * * * *", "schedule_type": ScheduleType.CRONTAB},
        )
        mon_env = MonitorEnvironment.objects.create(
            monitor=monitor,
            environment=env,
        )
        location = MonitorLocation.objects.create(guid=uuid4(), name="test_location")
        MonitorCheckIn.objects.create(
            monitor=monitor,
            monitor_environment=mon_env,
            location=location,
            project_id=monitor.project_id,
            status=CheckInStatus.IN_PROGRESS,
        )

        # AlertRule*
        alert = self.create_alert_rule(include_all_projects=True, excluded_projects=[project])
        trigger = self.create_alert_rule_trigger(alert_rule=alert, excluded_projects=[self.project])
        self.create_alert_rule_trigger_action(alert_rule_trigger=trigger)

        # Incident*
        incident = self.create_incident()
        IncidentActivity.objects.create(
            incident=incident,
            type=1,
            comment="hello",
        )
        IncidentSnapshot.objects.create(
            incident=incident,
            event_stats_snapshot=TimeSeriesSnapshot.objects.create(
                start=datetime.utcnow() - timedelta(hours=24),
                end=datetime.utcnow(),
                values=[[1.0, 2.0, 3.0], [1.5, 2.5, 3.5]],
                period=1,
            ),
            unique_users=1,
            total_events=1,
        )
        IncidentSubscription.objects.create(incident=incident, user_id=user.id)
        IncidentTrigger.objects.create(
            incident=incident,
            alert_rule_trigger=trigger,
            status=1,
        )

        # *Snapshot
        PendingIncidentSnapshot.objects.create(
            incident=incident, target_run_date=datetime.utcnow() + timedelta(hours=4)
        )
        TimeSeriesSnapshot.objects.create(
            start=datetime.utcnow() - timedelta(hours=24),
            end=datetime.utcnow(),
            values=[[1.0, 2.0, 3.0], [1.5, 2.5, 3.5]],
            period=1,
        )

        # Relay*
        _, public_key = generate_key_pair()
        relay = str(uuid4())
        Relay.objects.create(relay_id=relay, public_key=str(public_key), is_internal=True)
        RelayUsage.objects.create(relay_id=relay, version="0.0.1", public_key=public_key)

        # Dashboard
        dashboard = Dashboard.objects.create(
            title="Dashboard 1", created_by_id=user.id, organization=org
        )
        widget = DashboardWidget.objects.create(
            dashboard=dashboard,
            order=1,
            title="Test Widget",
            display_type=0,
            widget_type=DashboardWidgetTypes.DISCOVER,
        )
        DashboardWidgetQuery.objects.create(widget=widget, order=1, name="Test Query")
        DashboardTombstone.objects.create(organization=org, slug="test-tombstone")

        # *Search
        RecentSearch.objects.create(
            organization=org,
            user_id=user.id,
            type=SearchType.ISSUE.value,
            query="some query",
        )
        SavedSearch.objects.create(
            organization=org,
            name="Saved query",
            query="saved query",
            visibility=Visibility.ORGANIZATION,
        )

        # misc
        Counter.increment(project, 1)
        Email.objects.create(email="other@example.com")
        self.create_notification_action(organization=org, projects=[project])
        Repository.objects.create(
            name="test_repo",
            organization_id=org.id,
            integration_id=self.integration.id,
        )

        return self.import_export_then_validate()
