"""Tests for iTunes integration.

These tests talk directly to Apple's iTunes and are therefore unsuitable for running in CI.
Firstly you need to create a file named ``credentials.json`` in this directory::

   {
     "username": "you-itunes-email@example.com",
     "password": "your itunes password"
   }

They also need interactive login which you need to do before running the tests::

   $ sentry execfile tests/sentry/utils/appleconnect/test_itunes_connect.py
   two-factor code: xxxxxx

To test the SMS authentication flow you need to invoke:

   $ sentry execfile tests/sentry/utils/appleconnect/test_itunes_connect.py sms
   sms code: xxxxxx

And finally you can run the tests with ``--itunes``.

   $ pytest --itunes tests/sentry/utils/appleconnect/test_itunes_connect.py

 """

import pathlib
import sys

import pytest

from sentry.utils import json
from sentry.utils.appleconnect import itunes_connect

pytestmark = pytest.mark.itunes


@pytest.fixture  # type: ignore
def here() -> pathlib.Path:
    return pathlib.Path(__file__).parent


@pytest.fixture  # type: ignore
def session_cookie(here: pathlib.Path) -> str:
    """The stored session cookie, generated by running this module interactively."""
    cookie_file = here / "session-cookie.json"
    if not cookie_file.is_file():
        pytest.skip(
            "Session cookie not initialised, "
            "see tests/sentry/utils/appleconnect/test_itunes_connect.py docstring"
        )
    data = json.loads(cookie_file.read_text())
    return data["session-cookie"]  # type: ignore


@pytest.fixture  # type: ignore
def client(session_cookie: str) -> itunes_connect.ITunesClient:
    return itunes_connect.ITunesClient.from_session_cookie(session_cookie)


def test_stored_session(client: itunes_connect.ITunesClient) -> None:
    assert client.request_session_info()


def test_set_provider(client: itunes_connect.ITunesClient) -> None:
    # Make sure we have some providers to switch to
    provider_ids = [p.publicProviderId for p in client.request_available_providers()]
    assert provider_ids

    # Try setting all the providers
    for provider_id in provider_ids:
        client.set_provider(provider_id)
        assert client.request_session_info()


def test_get_dsym_url(client: itunes_connect.ITunesClient) -> None:
    sentry_provider_id = itunes_connect.PublicProviderId("69a6de81-4417-47e3-e053-5b8c7c11a4d1")
    client.set_provider(sentry_provider_id)
    app_id = "1549832463"  # Sentry Cocoa Sample iOS Swift
    app_version = "7.2.0"
    build = "332"
    platform = "iOS"
    url = client.get_dsym_url(app_id, app_version, build, platform)
    assert url


def test_get_dsym_url_no_dsyms(client: itunes_connect.ITunesClient) -> None:
    sentry_provider_id = itunes_connect.PublicProviderId("69a6de81-4417-47e3-e053-5b8c7c11a4d1")
    client.set_provider(sentry_provider_id)
    app_id = "1549832463"  # Sentry Cocoa Sample iOS Swift
    app_version = "7.2.0"
    build = "333"
    platform = "iOS"
    url = client.get_dsym_url(app_id, app_version, build, platform)
    assert url is None


if __name__ == "__main__":
    use_sms = True if sys.argv[-1] == "sms" else False

    itunes_client = itunes_connect.ITunesClient()

    parent_dir = pathlib.Path(__file__).parent
    with open(parent_dir / "credentials.json") as fp:
        raw = fp.read()
    credentials = json.loads(raw)

    itunes_client.start_login_sequence(credentials["username"], credentials["password"])
    if use_sms:
        itunes_client.request_sms_auth()
        code = input("sms code: ")
        itunes_client.sms_code(code)
    else:
        code = input("two-factor code: ")
        itunes_client.two_factor_code(code)

    cookie = {"session-cookie": itunes_client.session_cookie()}
    raw_cookie = json.dumps(cookie)
    with open(parent_dir / "session-cookie.json", "w") as fp:
        fp.write(raw_cookie)
