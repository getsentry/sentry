name: self-hosted
on:
  push:
    branches:
      - master
      - releases/**
  pull_request:

# Cancel in progress workflows on pull_requests.
# https://docs.github.com/en/actions/using-jobs/using-concurrency#example-using-a-fallback-value
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

# hack for https://github.com/actions/cache/issues/810#issuecomment-1222550359
env:
  SEGMENT_DOWNLOAD_TIMEOUT_MINS: 3
  NODE_OPTIONS: '--max-old-space-size=4096'

jobs:
  self-hosted:
    strategy:
      matrix:
        arch: [amd64, arm64]
    runs-on: |-
      ${{fromJson('{
        "amd64": "ubuntu-latest",
        "arm64": "ubuntu-24.04-arm"
      }')[matrix.arch] }}
    timeout-minutes: 30
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4
        id: setup-node
        with:
          node-version-file: '.volta.json'

      - uses: getsentry/action-setup-venv@a133e6fd5fa6abd3f590a1c106abda344f5df69f # v2.1.0
        with:
          python-version: 3.13.1
          cache-dependency-path: requirements-dev-frozen.txt
          install-cmd: echo

      - name: Step configurations
        id: config
        run: |
          echo "webpack-path=.webpack_cache" >> "$GITHUB_OUTPUT"
          echo "WEBPACK_CACHE_PATH=.webpack_cache" >> "$GITHUB_ENV"

      - name: webpack cache
        uses: actions/cache@v4.2.0
        with:
          path: ${{ steps.config.outputs.webpack-path }}
          key: ${{ runner.os }}-self-hosted-webpack-cache-${{ hashFiles('webpack.config.ts') }}

      - name: node_modules cache
        uses: actions/cache@v4.2.0
        id: nodemodulescache
        with:
          path: node_modules
          key: ${{ runner.os }}-self-hosted-node-modules-${{ hashFiles('yarn.lock', '.volta.json') }}

      - name: Install Javascript Dependencies
        if: steps.nodemodulescache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --production

      - run: |
          python3 -m tools.fast_editable --path .
          python3 -m sentry.build.main

      - run: docker login --username '${{ github.actor }}' --password '${{ github.token }}' ghcr.io
        if: github.ref_name == 'master' && github.event_name != 'pull_request'

      - run: docker buildx create --driver docker-container --use

      - run: |
          if [ ${{ github.event_name }} = 'push' ]; then
            args=(
              --tag ghcr.io/getsentry/sentry-self-hosted:latest
              --push
            )
          else
            args=()
          fi

          docker buildx build \
            --pull \
            --cache-to type=inline \
            --tag ghcr.io/getsentry/sentry-self-hosted:${{ matrix.arch }}-${{ github.sha }} \
            --file self-hosted/Dockerfile \
            --build-arg SOURCE_COMMIT=${{ github.sha }} \
            --build-arg TARGETARCH=${{ matrix.arch }} \
            --platform linux/${{ matrix.arch }} \
            "${args[@]}" \
            .

      - run: docker push ghcr.io/getsentry/sentry-self-hosted:${{ matrix.arch }}-${{ github.sha }}
        if: github.ref_name == 'master' && github.event_name != 'pull_request'

  assemble:
    needs: self-hosted
    if: github.ref_name == 'master' && github.event_name != 'pull_request'
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    steps:
      - name: Docker Login
        run: docker login --username '${{ github.actor }}' --password '${{ github.token }}' ghcr.io

      - name: Assemble Sha Image
        run: |
          docker buildx imagetools create -t "ghcr.io/getsentry/sentry-self-hosted:${{ github.sha }}" \
            "ghcr.io/getsentry/sentry-self-hosted:arm64-${{ github.sha }}" \
            "ghcr.io/getsentry/sentry-self-hosted:amd64-${{ github.sha }}"

      - name: Assemble Latest Image
        run: |
          docker buildx imagetools create -t "ghcr.io/getsentry/sentry-self-hosted:latest" \
            "ghcr.io/getsentry/sentry-self-hosted:arm64-${{ github.sha }}" \
            "ghcr.io/getsentry/sentry-self-hosted:amd64-${{ github.sha }}"

  publish-sentry:
    needs: assemble
    runs-on: ubuntu-24.04
    if: ${{ (github.ref_name == 'master') }}
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - name: Pull the test image
        id: image_pull
        env:
          IMAGE_URL: ghcr.io/getsentry/sentry-self-hosted:${{ github.sha }}
        run: docker pull "$IMAGE_URL"
      - name: Get short SHA for docker tag
        id: short_sha
        shell: bash
        run: |
          SHORT_SHA=$(git rev-parse --short "$GITHUB_SHA")
          if [[ -z "$SHORT_SHA" ]]; then
            echo "Short SHA empty? Re-running rev-parse."
            git rev-parse --short "$GITHUB_SHA"
          else
            echo "sha=$SHORT_SHA" >> $GITHUB_OUTPUT
          fi
      - name: Push built docker image
        shell: bash
        env:
          SHORT_SHA: ${{ steps.short_sha.outputs.sha }}
          IMAGE_URL: ghcr.io/getsentry/sentry-self-hosted:${{ github.sha }}
        run: |
          # only login if the password is set
          if [[ "${{ secrets.DOCKER_HUB_RW_TOKEN }}" ]]; then echo "${{ secrets.DOCKER_HUB_RW_TOKEN }}" | docker login --username=sentrybuilder --password-stdin; fi
          # We push 3 tags to Dockerhub:
          # first, the full sha of the commit
          docker tag ${IMAGE_URL} getsentry/sentry:${GITHUB_SHA}
          docker push getsentry/sentry:${GITHUB_SHA}
          # second, the short sha of the commit
          docker tag ${IMAGE_URL} getsentry/sentry:${SHORT_SHA}
          docker push getsentry/sentry:${SHORT_SHA}
          # finally, nightly
          docker tag ${IMAGE_URL} getsentry/sentry:nightly
          docker push getsentry/sentry:nightly
