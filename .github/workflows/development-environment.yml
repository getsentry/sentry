name: development environment
on:
  pull_request:
    paths:
    - 'Brewfile'
    - 'Makefile'
    - '.github/workflows/development-environment.yml'
    - 'scripts/*'
    - 'src/sentry/runner/commands/devserver.py'
    - 'src/sentry/runner/commands/devservices.py'

jobs:
  dev-environment:
    name: python set up
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      matrix:
        os: [ macos-latest ]
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: on
      # Make the environment more similar to what Mac defaults to
      SHELL: /bin/zsh

    steps:
      - uses: actions/checkout@v2

      - name: Set environment variables & others
        if: ${{ runner.os == 'macOS' }}
        run: |
          echo "VOLTA_HOME=$HOME/.volta" >> $GITHUB_ENV
          echo "PATH=$HOME/.volta/bin:$PATH" >> $GITHUB_ENV
          touch "$HOME/.zshrc"

      - name: Install prerequisites
        if: ${{ runner.os == 'macOS' }}
        # Depending on the host watchman will not install (read: intermittent issue),
        # thus, we mark this as continue-on-error
        continue-on-error: true
        # Xcode CLI & brew are already installed, thus, no need to call xcode-select install
        # XXX: Can the Brew set up be cached?
        # If you want to speed up the CI for your PR, you can use --no-upgrade and HOMEBREW_NO_AUTO_UPDATE=1
        run: |
          brew bundle

      - name: Install Python (via Pyenv)
        id: python-version
        # XXX: Can we cache the installed Python environments?
        # We echo to $GITHUB_ENV to make the PATH changes by pyenv init permanent for the rest of the execution
        run: |
          make setup-pyenv
          eval "$(pyenv init -)"
          echo "PATH=$PATH" >> $GITHUB_ENV
          echo "::set-output name=python-version::$(python -V  | sed s/Python\ //g)"

      - name: Setup pip
        uses: ./.github/actions/setup-pip
        id: pip

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ${{ steps.pip.outputs.pip-cache-dir }}
            ~/.pyenv
          key: ${{ runner.os }}-pip-py${{ steps.python-version.outputs.python-version }}-${{ hashFiles('**/requirements-*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-py${{ steps.python-version.outputs.python-version }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock', 'api-docs/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Set up development environment (as per docs)
        run: |
          python -m venv .venv
          source .venv/bin/activate
          make install-py-dev
          make setup-git
          curl https://get.volta.sh | bash

      - name: Set up Sentry and others
        # We cannot call make bootstrap directly since run-dependent-services requires some Docker magic.
        # We have the magic in the getsentry/bootstrap-develop. We will handle this situation in the next pass of this.
        # make init-config will *not* prompt about overwriting ~/.sentry/config.yml' since we're on a pristine state
        # We cannot test the git hooks until the `sentry.lint.engine` gets installed
        run: |
          source .venv/bin/activate
          make develop init-config
