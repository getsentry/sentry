name: dev env
on:
  pull_request:
    paths:
      - 'Makefile'
      - '.github/workflows/development-environment.yml'
      - '.envrc'
      - 'Brewfile'
      - 'scripts/*'
      - 'src/sentry/runner/commands/devserver.py'
      - 'src/sentry/runner/commands/devservices.py'

jobs:
  dev-environment:
    name: set up
    runs-on: ${{ matrix.os }}
    timeout-minutes: 40
    strategy:
      matrix:
        # Using Ubuntu 18 until I figure out this error:
        # -> ImportError: libffi.so.6: cannot open shared object file: No such file or directory
        os: [macos-11.0, ubuntu-18.04]
      fail-fast: false
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: on
      # Make the environment more similar to what Mac defaults to
      SHELL: /bin/zsh

    steps:
      - name: Checkout sentry
        uses: actions/checkout@v2

      - name: Set variables for caches
        id: info
        run: |
          echo "::set-output name=brew-cache-dir::$(brew --cache)"
          echo "::set-output name=yarn-cache-dir::$(yarn cache dir)"

      - name: Cache (brew)
        uses: actions/cache@v2
        with:
          path: ${{ steps.info.outputs.brew-cache-dir }}
          key: devenv-${{ runner.os }}-brew-${{ hashFiles('Brewfile') }}
          restore-keys: devenv-${{ runner.os }}-brew

      - name: Install prerequisites
        # Xcode CLI & brew are already installed, thus, no need to call xcode-select install
        # Sometimes, brew needs to be updated before brew bundle would work
        # After installing Docker (via homebrew) we need to make sure that it is properly initialized on Mac
        run: |
          if [ $(uname) == "Darwin" ]; then
            # If we have a sha mistmatch we can clean up and try again
            brew update -q && brew install --cask docker || brew cleanup -v docker && brew install --cask docker
            # This code is mentioned in our dev docs. Only remove if you adjust the docs as well
            SENTRY_NO_VENV_CHECK=1 ./scripts/do.sh init-docker
          fi
          HOMEBREW_NO_AUTO_UPDATE=1 brew bundle --no-upgrade || brew bundle -q

      # The next few steps are to set up the cache quickly
      - name: Set variables
        id: info
        run: |
          echo "::set-output name=python-version::$(cat .python-version)"
          echo "::set-output name=pip-cache-dir::$(pip3 cache dir)"
          echo "::set-output name=pip-version::$(pip -V | awk -F ' ' '{print $2}')"

      - name: Setup Python
        uses: ./.github/actions/setup-python
        id: python-setup
        with:
          python-version: ${{ steps. }}

      - name: Cache (pyenv)
        uses: actions/cache@v2
        with:
          path: ~/.pyenv
          key: devenv-${{ matrix.os }}-pyenv-${{ hashFiles('.python-version') }}

      - name: Cache (yarn)
        uses: actions/cache@v1 # We are explicitly using v1 due to perf reasons
        with:
          path: ${{ steps.info.outputs.yarn-cache-dir }}
          key: devenv-${{ matrix.os }}-v2-yarn-${{ hashFiles('yarn.lock') }}

      - name: Set up development environment (mostly as per docs)
        run: |
          curl https://get.volta.sh | bash
          export VOLTA_HOME="$HOME/.volta"
          export PATH="$HOME/.volta/bin:$PATH"
          make setup-pyenv
          eval "$(pyenv init --path)"
          python -m venv .venv
          source .venv/bin/activate
          make bootstrap

      - name: Test direnv
        run: |
          brew install direnv
          direnv allow
