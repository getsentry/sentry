import logging
from urllib.parse import urlencode
from uuid import uuid4

from django.utils.translation import ugettext_lazy as _
from rest_framework.serializers import ValidationError

from sentry import options
from sentry.constants import ObjectStatus
from sentry.identity.pipeline import IdentityProviderPipeline
from sentry.integrations import (
    FeatureDescription,
    IntegrationFeatures,
    IntegrationInstallation,
    IntegrationMetadata,
    IntegrationProvider,
)
from sentry.mediators.sentry_apps import Destroyer, InternalCreator
from sentry.models import (
    Integration,
    Organization,
    Project,
    ProjectKey,
    SentryAppInstallation,
    SentryAppInstallationForProvider,
    User,
)

logger = logging.getLogger("sentry.auth.scim")

internal_integration_overview = (
    "This internal integration was auto-generated during the installation process of your SCIM"
    " integration. It is needed to provide the token used provision users and groups. If this integration is "
    "deleted, your SCIM integration will stop working!"
)


def create_scim_token(organization, user):
    # check if we have an scim app already
    if SentryAppInstallationForProvider.objects.filter(
        organization=organization, provider="okta_scim"
    ).exists():
        logger.info(
            "scim_installation_exists",
            extra={"organization_id": organization.id},
        )
        return

    data = {
        "name": "SCIM Internal Integration",
        "author": "Auto-generated by Sentry",
        "organization": organization,
        "overview": internal_integration_overview.strip(),
        "user": user,
        "scopes": ["project:releases", "project:read", "project:write"],
    }
    # create the internal integration and link it to the join table
    sentry_app = InternalCreator.run(**data)
    sentry_app_installation = SentryAppInstallation.objects.get(sentry_app=sentry_app)
    SentryAppInstallationForProvider.objects.create(
        sentry_app_installation=sentry_app_installation,
        organization=organization,
        provider="okta_scim",
    )


def destroy_scim_token(organization, user):
    saifp = SentryAppInstallationForProvider.objects.get(
        organization=organization, provider="okta_scim"
    )
    Destroyer.run(sentry_app=saifp.sentry_app_installation.sentry_app, user=user)


user = User.objects.get(id=1)
organization = Organization.objects.get(slug="sentry")

create_scim_token(organization, user)
# destroy_scim_token(organization, user)


# SentryAppInstallation
# SentryAppInstallationForProvider
# SentryApp
