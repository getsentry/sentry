{
  "get": {
    "tags": ["Projects"],
    "description": "Retrieve a list of debug information files for a given project.",
    "operationId": "List a Project's Debug Information Files",
    "parameters": [
      {
        "name": "organization_slug",
        "in": "path",
        "description": "The slug of the organization the file belongs to.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      {
        "name": "project_slug",
        "in": "path",
        "description": "The slug of the project to list the DIFs of.",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    ],
    "responses": {
      "200": {
        "description": "Success",
        "content": {
          "application/json": {}
        }
      },
      "403": {
        "description": "Forbidden"
      },
      "404": {
        "description": "The requested resource does not exist"
      }
    },
    "security": [
      {
        "auth_token": ["project:read"]
      }
    ]
  },
  "post": {
    "tags": ["Projects"],
    "description": "Upload a new debug information file for the given release.\n\nUnlike other API requests, files must be uploaded using the\ntraditional multipart/form-data content-type.\n\nThe file uploaded is a zip archive of an Apple .dSYM folder which\ncontains the individual debug images.  Uploading through this endpoint\nwill create different files for the contained images.",
    "operationId": "Upload a New File",
    "parameters": [
      {
        "name": "organization_slug",
        "in": "path",
        "description": "The slug of the organization the project belongs to.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      {
        "name": "project_slug",
        "in": "path",
        "description": "The slug of the project to upload a file to.",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    ],
    "requestBody": {
      "content": {
        "multipart/form-data": {
          "schema": {
            "required": ["file"],
            "type": "object",
            "properties": {
              "file": {
                "type": "string",
                "format": "binary",
                "description": "The multipart encoded file."
              }
            }
          },
          "example": {
            "file": "debug.zip"
          }
        }
      },
      "required": true
    },
    "responses": {
      "201": {
        "description": "Success",
        "content": {
          "application/json": {}
        }
      },
      "400": {
        "description": "Bad Input"
      },
      "403": {
        "description": "Forbidden"
      },
      "404": {
        "description": "The requested resource does not exist"
      }
    },
    "security": [
      {
        "auth_token": ["project:write"]
      }
    ]
  },
  "delete": {
    "tags": ["Projects"],
    "description": "Delete a debug information file for a given project.",
    "operationId": "Delete a Specific Project's Debug Information File",
    "parameters": [
      {
        "name": "organization_slug",
        "in": "path",
        "description": "The slug of the organization the file belongs to.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      {
        "name": "project_slug",
        "in": "path",
        "description": "The slug of the project to delete the DIF.",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      {
        "name": "id",
        "in": "query",
        "description": "The ID of the DIF to delete.",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    ],
    "responses": {
      "204": {
        "description": "Success"
      },
      "403": {
        "description": "Forbidden"
      },
      "404": {
        "description": "The requested resource does not exist"
      }
    },
    "security": [
      {
        "auth_token": ["project:write"]
      }
    ]
  }
}
