from __future__ import absolute_import

from rest_framework.permissions import IsAuthenticated
from rest_framework import serializers
from rest_framework.response import Response

from sentry.app import ratelimiter
from sentry.api.base import Endpoint, SessionAuthentication
from sentry.api.paginator import OffsetPaginator
from sentry.api.serializers import serialize
from sentry.models import Relay


class RelaySerializer(serializers.Serializer):
    relay_id = serializers.CharField(max_length=64, required=True)
    public_key = serializers.RegexField(r'\A[a-zA-Z0-9+\/]+={0,2}$', max_length=50, required=True)


class RelayIndexEndpoint(Endpoint):
    authentication_classes = (SessionAuthentication, )
    permission_classes = (IsAuthenticated, )

    def get(self, request):
        """
        List your Relays
        ````````````````

        Return a list of relays know to this Sentry installation available
        to the authenticated session.

        :auth: required
        """
        queryset = Relay.objects.all()

        return self.paginate(
            request=request,
            queryset=queryset,
            order_by='relay_id',
            paginator_cls=OffsetPaginator,
            on_results=lambda x: serialize(x, request.user),
        )

    def post(self, request):
        """
        Create a New Relay
        ``````````````````

        Create a new relay.  To create an relay, the relay must complete the
        challenge Sentry provides.

        :param string relay_id: uuid of the relay
        :param string public_key: the public key generated by the relay.
                                  Sentry replies with a challenge that the relay has to
                                  fullfil. This sets up a key exchange and this key
                                  will be used later for encrypted communication.

        :auth: required
        """

        # TODO(hazat)
        # limit = options.get('api.rate-limit.relay-create')
        limit = 1000
        if limit and ratelimiter.is_limited(
            u'relay-create'.format(request.relay_id),
            limit=limit,
            window=3600,
        ):
            return Response(
                {
                    'detail': 'You are attempting to create too many organizations too quickly.'
                },
                status=429
            )

        serializer = RelaySerializer(data=request.DATA)

        if serializer.is_valid():
            # result = serializer.object
            # try:
            #     with transaction.atomic():
            #         org = Organization.objects.create(
            #             name=result['name'],
            #             slug=result.get('slug'),
            #         )
            # except IntegrityError:
            #     return Response(
            #         {
            #             'detail': 'An organization with this slug already exists.'
            #         },
            #         status=409,
            #     )

            # TODO(hazat): self.create_audit_entry ?
            # TODO(hazat): analytics.record ?
            return Response(status=200)
        return Response(status=200)
