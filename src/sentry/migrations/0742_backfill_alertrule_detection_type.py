# Generated by Django 5.0.6 on 2024-07-15 20:44

from django.db import migrations, models
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.db.migrations.state import StateApps
from django.utils.translation import gettext_lazy

from sentry.new_migrations.migrations import CheckedMigration
from sentry.utils.query import RangeQuerySetWrapper


class AlertRuleDetectionType(models.TextChoices):
    STATIC = "static", gettext_lazy("Static")
    PERCENT = "percent", gettext_lazy("Percent")
    DYNAMIC = "dynamic", gettext_lazy("Dynamic")


def _backfill_detection_type(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:
    AlertRule = apps.get_model("sentry", "AlertRule")

    # use RangeQuerySetWrapper to avoid loading all AlertRules into memory
    for rule in RangeQuerySetWrapper(AlertRule.objects_with_snapshots.all()):
        # comparison_delta is present for percent based alerts and is null for static alerts
        if rule.comparison_delta:
            rule.detection_type = AlertRuleDetectionType.PERCENT
        else:
            rule.detection_type = AlertRuleDetectionType.STATIC

        rule.save(update_fields=["detection_type"])


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production.
    # This should only be used for operations where it's safe to run the migration after your
    # code has deployed. So this should not be used for most operations that alter the schema
    # of a table.
    # Here are some things that make sense to mark as post deployment:
    # - Large data migrations. Typically we want these to be run manually so that they can be
    #   monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   run this outside deployments so that we don't block them. Note that while adding an index
    #   is a schema change, it's completely safe to run the operation after the code has deployed.
    # Once deployed, run these manually via: https://develop.sentry.dev/database-migrations/#migration-deployment

    is_post_deployment = True

    dependencies = [
        ("sentry", "0741_metric_alert_anomaly_detection"),
    ]

    operations = [
        # Run the data migration
        migrations.RunPython(
            _backfill_detection_type,
            migrations.RunPython.noop,
            hints={"tables": ["sentry_alertrule"]},
        ),
    ]
