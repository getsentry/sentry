# Generated by Django 5.2.1 on 2025-05-20 17:45

from django.db import migrations
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.db.migrations.state import StateApps
from django.db.models import Q

from sentry.discover.dashboard_widget_split import _get_and_save_split_decision_for_dashboard_widget
from sentry.models.dashboard_widget import DashboardWidgetTypes, DatasetSourcesTypes
from sentry.new_migrations.migrations import CheckedMigration
from sentry.utils.query import RangeQuerySetWrapperWithProgressBar


def split_discover_dataset_dashboards_self_hosted(
    apps: StateApps, schema_editor: BaseDatabaseSchemaEditor
) -> None:
    DashboardWidgetQuery = apps.get_model("sentry", "DashboardWidgetQuery")
    catch_all_unsplit_widgets = Q(
        widget__widget_type=DashboardWidgetTypes.DISCOVER,
    ) & ~Q(
        widget__discover_widget_split__in=[
            DashboardWidgetTypes.ERROR_EVENTS,
            DashboardWidgetTypes.TRANSACTION_LIKE,
        ]
    )

    queryset = DashboardWidgetQuery.objects.filter(
        catch_all_unsplit_widgets,
    ).select_related("widget__dashboard__organization")

    for widget_query in RangeQuerySetWrapperWithProgressBar(queryset):
        try:
            _get_and_save_split_decision_for_dashboard_widget(widget_query, dry_run=False)
        except Exception:
            widget_query.widget.widget_type = DashboardWidgetTypes.ERROR_EVENTS
            widget_query.widget.discover_widget_split = DashboardWidgetTypes.ERROR_EVENTS
            widget_query.widget.dataset_source = DatasetSourcesTypes.UNKNOWN.value
            widget_query.widget.save()


def reverse_split_discover_dataset_dashboards_self_hosted(
    apps: StateApps, schema_editor: BaseDatabaseSchemaEditor
) -> None:
    DashboardWidgetQuery = apps.get_model("sentry", "DashboardWidgetQuery")

    queryset = DashboardWidgetQuery.objects.filter(
        widget__widget_type=DashboardWidgetTypes.ERROR_EVENTS,
        widget__dataset_source=DatasetSourcesTypes.UNKNOWN.value,
    ).select_related("widget__dashboard__organization")

    for widget_query in RangeQuerySetWrapperWithProgressBar(queryset):
        widget_query.widget.widget_type = DashboardWidgetTypes.DISCOVER
        widget_query.widget.discover_widget_split = None
        widget_query.widget.dataset_source = DatasetSourcesTypes.UNKNOWN.value
        widget_query.widget.save()


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production.
    # This should only be used for operations where it's safe to run the migration after your
    # code has deployed. So this should not be used for most operations that alter the schema
    # of a table.
    # Here are some things that make sense to mark as post deployment:
    # - Large data migrations. Typically we want these to be run manually so that they can be
    #   monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   run this outside deployments so that we don't block them. Note that while adding an index
    #   is a schema change, it's completely safe to run the operation after the code has deployed.
    # Once deployed, run these manually via: https://develop.sentry.dev/database-migrations/#migration-deployment

    is_post_deployment = True

    dependencies = [
        ("sentry", "0911_increase_email_model_email_field_length"),
    ]

    operations = [
        migrations.RunPython(
            split_discover_dataset_dashboards_self_hosted,
            reverse_code=reverse_split_discover_dataset_dashboards_self_hosted,
            hints={"tables": ["sentry_dashboardwidget"]},
        )
    ]
