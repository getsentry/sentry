# Generated by Django 5.1.7 on 2025-03-27 23:41

import django.contrib.postgres.constraints
import django.contrib.postgres.fields.ranges
import django.db.models.deletion
import django.utils.timezone
from django.contrib.postgres.operations import BtreeGistExtension
from django.db import migrations, models

import sentry.db.models.fields.bounded
import sentry.db.models.fields.foreignkey
import sentry.db.models.fields.hybrid_cloud_foreign_key
import sentry.models.groupopenperiod
from sentry.new_migrations.migrations import CheckedMigration


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production.
    # This should only be used for operations where it's safe to run the migration after your
    # code has deployed. So this should not be used for most operations that alter the schema
    # of a table.
    # Here are some things that make sense to mark as post deployment:
    # - Large data migrations. Typically we want these to be run manually so that they can be
    #   monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   run this outside deployments so that we don't block them. Note that while adding an index
    #   is a schema change, it's completely safe to run the operation after the code has deployed.
    # Once deployed, run these manually via: https://develop.sentry.dev/database-migrations/#migration-deployment

    is_post_deployment = False

    dependencies = [
        ("sentry", "0852_delete_new_groups_column"),
    ]

    operations = [
        BtreeGistExtension(),
        migrations.CreateModel(
            name="GroupOpenPeriod",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, null=True, on_delete="SET_NULL"
                    ),
                ),
                ("date_started", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_ended", models.DateTimeField(null=True)),
                ("data", models.JSONField(default=dict)),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.group"
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.project"
                    ),
                ),
                (
                    "resolution_activity",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="sentry.activity",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_groupopenperiod",
                "indexes": [
                    models.Index(
                        fields=["group", "date_started"], name="sentry_grou_group_i_4bffd0_idx"
                    )
                ],
                "constraints": [
                    django.contrib.postgres.constraints.ExclusionConstraint(
                        expressions=[
                            (
                                sentry.models.groupopenperiod.TsTzRange(
                                    "date_started",
                                    "date_ended",
                                    django.contrib.postgres.fields.ranges.RangeBoundary(),
                                ),
                                "&&",
                            )
                        ],
                        name="exclude_open_period_overlap",
                    )
                ],
            },
        ),
    ]
