# Generated by Django 1.11.29 on 2021-03-26 14:43
import re

from django.db import migrations

from sentry.utils.query import RangeQuerySetWrapperWithProgressBar

USER_MISERY_REGEX = r"^user_misery\((\d+)\)"


def update_user_misery_column_on_saved_queries(apps, schema_editor):
    DiscoverSavedQuery = apps.get_model("sentry", "DiscoverSavedQuery")

    for saved_query in RangeQuerySetWrapperWithProgressBar(DiscoverSavedQuery.objects.all()):
        query = saved_query.query
        fields = query.get("fields")
        if not fields:
            continue

        updated = False
        for i, field in enumerate(fields):
            match = re.match(USER_MISERY_REGEX, field)
            if match and "count_unique(user)" not in fields:
                fields[i] = f"count_miserable(user, {match.group(1)})"
                updated = True

        if updated:
            saved_query.query["fields"] = fields
            saved_query.save()


class Migration(migrations.Migration):
    # This flag is used to mark that a migration shouldn't be automatically run in
    # production. We set this to True for operations that we think are risky and want
    # someone from ops to run manually and monitor.
    # General advice is that if in doubt, mark your migration as `is_dangerous`.
    # Some things you should always mark as dangerous:
    # - Large data migrations. Typically we want these to be run manually by ops so that
    #   they can be monitored. Since data migrations will now hold a transaction open
    #   this is even more important.
    # - Adding columns to highly active tables, even ones that are NULL.
    is_dangerous = False

    # This flag is used to decide whether to run this migration in a transaction or not.
    # By default we prefer to run in a transaction, but for migrations where you want
    # to `CREATE INDEX CONCURRENTLY` this needs to be set to False. Typically you'll
    # want to create an index concurrently when adding one to an existing table.
    # You'll also usually want to set this to `False` if you're writing a data
    # migration, since we don't want the entire migration to run in one long-running
    # transaction.
    atomic = False

    dependencies = [
        ("sentry", "0181_copy_useroptions_to_notificationsettings"),
    ]

    operations = [
        migrations.RunPython(
            update_user_misery_column_on_saved_queries, reverse_code=migrations.RunPython.noop
        )
    ]
