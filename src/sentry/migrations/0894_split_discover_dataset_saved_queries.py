# Generated by Django 5.2.1 on 2025-05-14 19:14


from enum import Enum

from django.db import migrations
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.db.migrations.state import StateApps

from sentry.discover.dataset_split import _get_and_save_split_decision_for_query
from sentry.models.dashboard_widget import TypesClass
from sentry.new_migrations.migrations import CheckedMigration
from sentry.utils.query import RangeQuerySetWrapperWithProgressBar


class DiscoverSavedQueryTypes(TypesClass):
    DISCOVER = 0
    ERROR_EVENTS = 1
    """
     Error side of the split from Discover.
    """
    TRANSACTION_LIKE = 2
    """
    This targets transaction-like data from the split from discover.
    """

    TYPES = [
        (DISCOVER, "discover"),
        (ERROR_EVENTS, "error-events"),
        (TRANSACTION_LIKE, "transaction-like"),
    ]
    TYPE_NAMES = [t[1] for t in TYPES]


class DatasetSourcesTypes(Enum):
    """
    Ambiguous queries that haven't been or couldn't be categorized into a
    specific dataset.
    """

    UNKNOWN = 0
    """
     Dataset inferred by either running the query or using heuristics.
    """
    INFERRED = 1
    """
     Canonical dataset, user explicitly selected it.
    """
    USER = 2
    """
     Was an ambiguous dataset forced to split (i.e. we picked a default).
    """
    FORCED = 3

    @classmethod
    def as_choices(cls) -> tuple[tuple[int, str], ...]:
        return tuple((source.value, source.name.lower()) for source in cls)


def split_discover_dataset_saved_queries(
    apps: StateApps, schema_editor: BaseDatabaseSchemaEditor
) -> None:
    DiscoverSavedQuery = apps.get_model("sentry", "DiscoverSavedQuery")
    queryset = DiscoverSavedQuery.objects.filter(
        dataset=DiscoverSavedQueryTypes.DISCOVER,
    ).select_related("organization")

    for saved_query in RangeQuerySetWrapperWithProgressBar(queryset):
        try:
            _get_and_save_split_decision_for_query(saved_query, dry_run=False)
        except Exception:
            saved_query.dataset = DiscoverSavedQueryTypes.ERROR_EVENTS
            saved_query.dataset_source = DatasetSourcesTypes.FORCED.value
            saved_query.save()


def reverse_split_discover_dataset_saved_queries(
    apps: StateApps, schema_editor: BaseDatabaseSchemaEditor
) -> None:
    DiscoverSavedQuery = apps.get_model("sentry", "DiscoverSavedQuery")
    DiscoverSavedQuery.objects.all().update(
        dataset=DiscoverSavedQueryTypes.DISCOVER, dataset_source=DatasetSourcesTypes.UNKNOWN.value
    )


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production.
    # This should only be used for operations where it's safe to run the migration after your
    # code has deployed. So this should not be used for most operations that alter the schema
    # of a table.
    # Here are some things that make sense to mark as post deployment:
    # - Large data migrations. Typically we want these to be run manually so that they can be
    #   monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   run this outside deployments so that we don't block them. Note that while adding an index
    #   is a schema change, it's completely safe to run the operation after the code has deployed.
    # Once deployed, run these manually via: https://develop.sentry.dev/database-migrations/#migration-deployment

    is_post_deployment = True

    dependencies = [
        ("sentry", "0893_rulesnooze_added_with_timezone"),
    ]

    operations = [
        migrations.RunPython(
            split_discover_dataset_saved_queries,
            reverse_code=reverse_split_discover_dataset_saved_queries,
            hints={"tables": ["sentry_discoversavedquery"]},
        ),
    ]
