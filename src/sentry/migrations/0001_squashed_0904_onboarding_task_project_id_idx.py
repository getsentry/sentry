# Generated by Django 5.2.1 on 2025-05-21 16:31

import datetime
import uuid

import django.contrib.postgres.constraints
import django.contrib.postgres.fields
import django.contrib.postgres.fields.ranges
import django.db.models.constraints
import django.db.models.deletion
import django.db.models.fields.json
import django.db.models.functions.comparison
import django.db.models.functions.datetime
import django.db.models.functions.text
import django.db.models.manager
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import bitfield.models
import sentry.backup.mixins
import sentry.db.models.fields.array
import sentry.db.models.fields.bounded
import sentry.db.models.fields.citext
import sentry.db.models.fields.foreignkey
import sentry.db.models.fields.gzippeddict
import sentry.db.models.fields.hybrid_cloud_foreign_key
import sentry.db.models.fields.jsonfield
import sentry.db.models.fields.picklefield
import sentry.db.models.fields.slug
import sentry.db.models.fields.text
import sentry.db.models.fields.uuid
import sentry.db.models.indexes
import sentry.deletions.models.scheduleddeletion
import sentry.incidents.models.alert_rule
import sentry.models.apiapplication
import sentry.models.apigrant
import sentry.models.apitoken
import sentry.models.broadcast
import sentry.models.files.abstractfile
import sentry.models.files.abstractfileblob
import sentry.models.groupopenperiod
import sentry.models.groupshare
import sentry.models.organizationmemberinvite
import sentry.models.orgauthtoken
import sentry.models.rule
import sentry.models.savedsearch
import sentry.relocation.models.relocation
import sentry.sentry_apps.models.sentry_app
import sentry.sentry_apps.models.sentry_app_installation
import sentry.sentry_apps.models.servicehook
import sentry.users.models.authenticator
import sentry.users.models.user
import sentry.utils.security.hash
from sentry.new_migrations.migrations import CheckedMigration
from sentry.new_migrations.monkey.special import SafeRunSQL


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production.
    # This should only be used for operations where it's safe to run the migration after your
    # code has deployed. So this should not be used for most operations that alter the schema
    # of a table.
    # Here are some things that make sense to mark as post deployment:
    # - Large data migrations. Typically we want these to be run manually so that they can be
    #   monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   run this outside deployments so that we don't block them. Note that while adding an index
    #   is a schema change, it's completely safe to run the operation after the code has deployed.
    # Once deployed, run these manually via: https://develop.sentry.dev/database-migrations/#migration-deployment

    is_post_deployment = True

    replaces = [
        ("sentry", "0001_squashed_0484_break_org_member_user_fk"),
        ("sentry", "0485_remove_scheduled_job"),
        ("sentry", "0486_integer_pr_comment_issue_list"),
        ("sentry", "0487_add_indexes_to_bundles"),
        ("sentry", "0488_add_orgauthtoken"),
        ("sentry", "0489_index_checkin_timeout"),
        ("sentry", "0490_add_is_test_to_org"),
        ("sentry", "0491_remove_orgmemmap_unique_constraints"),
        ("sentry", "0492_pickle_to_json_sentry_groupedmessage"),
        ("sentry", "0493_pickle_to_json_sentry_activity"),
        ("sentry", "0494_add_traceid_checkin"),
        ("sentry", "0495_add_date_last_modified_to_artifact_bundle"),
        ("sentry", "0496_update_userid_state"),
        ("sentry", "0497_add_comment_reactions_column"),
        ("sentry", "0498_typed_bitfield"),
        ("sentry", "0499_typed_bitfield_revert"),
        ("sentry", "0500_set_none_date_last_modified_to_date_uploaded"),
        ("sentry", "0501_typed_bitfield_remove_labels"),
        ("sentry", "0502_savedsearch_update_me_myteams"),
        ("sentry", "0503_alter_notification_actor_nullable"),
        ("sentry", "0504_add_artifact_bundle_index"),
        ("sentry", "0505_debugfile_date_accessed"),
        ("sentry", "0506_null_boolean_fields"),
        ("sentry", "0507_add_oidc_scopes"),
        ("sentry", "0507_delete_pending_deletion_rules"),
        ("sentry", "0508_index_checkin_monitorenvironment"),
        ("sentry", "0508_merging_migrations"),
        ("sentry", "0509_merging_migrations"),
        ("sentry", "0510_index_checkin_traceid"),
        ("sentry", "0511_pickle_to_json_sentry_rawevent"),
        ("sentry", "0512_add_proguard_release_association"),
        ("sentry", "0513_django_jsonfield"),
        ("sentry", "0514_migrate_priority_saved_searches"),
        ("sentry", "0515_slugify_invalid_monitors"),
        ("sentry", "0516_switch_pagerduty_silo"),
        ("sentry", "0517_backfill_pagerdutyservices_into_org_integrations"),
        ("sentry", "0518_cleanup_bundles_indexes"),
        ("sentry", "0519_remove_repo_name_constraint"),
        ("sentry", "0520_add_flat_file_index_table"),
        ("sentry", "0521_migrate_world_map_widgets"),
        ("sentry", "0522_migrate_discover_savedquery_worldmaps"),
        ("sentry", "0523_add_new_index_to_groupedmessage"),
        ("sentry", "0524_flip_checkin_index"),
        ("sentry", "0525_add_next_checkin_latest"),
        ("sentry", "0526_pr_comment_type_column"),
        ("sentry", "0527_backfill_next_checkin_latest"),
        ("sentry", "0528_truncate_flat_index"),
        ("sentry", "0529_remove_pagerduty_service"),
        ("sentry", "0530_new_notification_tables"),
        ("sentry", "0531_add_notification_uuid_to_incident_activity"),
        ("sentry", "0532_denormalize_team_and_user_x_actor"),
        ("sentry", "0533_make_flatfile_unique_again"),
        ("sentry", "0534_add_notification_uuid_to_rule_fire_history"),
        ("sentry", "0535_add_created_date_to_outbox_model"),
        ("sentry", "0536_backfill_tombstones"),
        ("sentry", "0537_backfill_xactor_team_and_user_ids"),
        ("sentry", "0538_remove_name_data_from_rule"),
        ("sentry", "0539_add_last_state_change_monitorenv"),
        ("sentry", "0540_add_release_threshold_table"),
        ("sentry", "0541_add_replicated_auth_models"),
        ("sentry", "0542_rm_flatfile_file"),
        ("sentry", "0543_add_team_id_to_groupsubscription"),
        ("sentry", "0544_remove_groupsubscription_columns"),
        ("sentry", "0545_add_last_verified_auth_ident_replica"),
        ("sentry", "0546_backfill_fix_bad_xactors"),
        ("sentry", "0547_add_commitfilechange_language_column"),
        ("sentry", "0548_add_is_unclaimed_boolean_to_user"),
        ("sentry", "0549_re_add_groupsubscription_columns"),
        ("sentry", "0550_migrate_no_action_dupe_issue_alerts"),
        ("sentry", "0551_drop_xactor_actor"),
        ("sentry", "0552_create_neglectedalert_table"),
        ("sentry", "0553_add_new_index_to_groupedmessage_table"),
        ("sentry", "0554_add_team_replica"),
        ("sentry", "0555_set_neglectedrule_email_date_columns_nullable"),
        ("sentry", "0556_organizationmapping_replicate_require_2fa"),
        ("sentry", "0557_threshold_related_name"),
        ("sentry", "0558_add_organization_member_team_replica"),
        ("sentry", "0559_custom_dynamic_sampling_rule"),
        ("sentry", "0560_add_monitorincident_table"),
        ("sentry", "0561_backfill_new_notification_tables"),
        ("sentry", "0562_drop_xactor_actor_from_state"),
        ("sentry", "0563_commitfilechange_drop_language_column"),
        ("sentry", "0564_commitfilechange_delete_language_column"),
        ("sentry", "0565_fix_diff_env_dupe_alerts"),
        ("sentry", "0566_remove_cron_missed_margins_zero"),
        ("sentry", "0567_add_slug_reservation_model"),
        ("sentry", "0568_monitors_fix_next_checkin_latest"),
        ("sentry", "0569_dashboard_widgets_indicator"),
        ("sentry", "0570_repository_add_languages_column"),
        ("sentry", "0571_add_hybrid_cloud_foreign_key_to_slug_reservation"),
        ("sentry", "0572_sentry_remove_unused_eventuser_index"),
        ("sentry", "0573_add_first_seen_index_groupedmessage"),
        ("sentry", "0574_backfill_weekly_report_settings"),
        ("sentry", "0575_incident_date_added_index"),
        ("sentry", "0576_add_missing_org_integration_scope"),
        ("sentry", "0577_drop_latest_incident_index"),
        ("sentry", "0578_add_query_and_users_to_custom_dynamic_sampling_rules"),
        ("sentry", "0579_index_incident_trigger"),
        ("sentry", "0580_threhsold_window_positive_integer"),
        ("sentry", "0581_add_user_and_team_to_alert_rules"),
        ("sentry", "0582_add_status_indexes_checkins"),
        ("sentry", "0583_add_early_adopter_to_organization_mapping"),
        ("sentry", "0584_apitoken_add_name_and_last_chars"),
        ("sentry", "0585_add_orgmember_partnership_restricted_flag"),
        ("sentry", "0586_add_has_feedbacks_flag"),
        ("sentry", "0587_remove_unused_neglectedrule_rows"),
        ("sentry", "0588_add_relocation_models"),
        ("sentry", "0589_add_commit_date_added_indices"),
        ("sentry", "0590_add_metadata_to_sentry_app"),
        ("sentry", "0591_remove_relocation_hybrid_cloud_foreign_keys"),
        ("sentry", "0592_delete_relocation_hybrid_cloud_foreign_keys"),
        ("sentry", "0593_add_notification_flag_to_dynamic_sampling_custom_rule"),
        ("sentry", "0594_trivial_but_dangerous_2"),
        ("sentry", "0595_trivial_but_dangerous_3"),
        ("sentry", "0596_trivial_but_dangerous_4"),
        ("sentry", "0597_trivial_but_dangerous_5"),
        ("sentry", "0598_trivial_but_dangerous_1"),
        ("sentry", "0599_add_import_chunk"),
        ("sentry", "0600_eventattachment_metadata"),
        ("sentry", "0601_add_has_sourcemaps_project_flag"),
        ("sentry", "0602_import_chunk_unique_together"),
        ("sentry", "0603_add_dangerous_but_trivial_index"),
        ("sentry", "0604_remove_dangerous_but_trivial_index"),
        ("sentry", "0605_addremove_dangerous_but_trivial_index"),
        ("sentry", "0606_update_user_to_optional_organization_slug_reservation"),
        ("sentry", "0607_drop_externalactor_actorid"),
        ("sentry", "0608_notification_setting_db_constraint"),
        ("sentry", "0609_remove_notification_setting_model"),
        ("sentry", "0610_remove_notification_setting_table"),
        ("sentry", "0611_add_regression_group_model"),
        ("sentry", "0612_expand_relocation_model"),
        ("sentry", "0613_drop_eventuser_table_part_1"),
        ("sentry", "0614_drop_eventuser_table_part_2"),
        ("sentry", "0615_add_dashboard_widget_query_on_demand_table"),
        ("sentry", "0616_drop_event_user_id_from_userreport_table_step_1"),
        ("sentry", "0617_monitor_boolean_fields_muted_disabled"),
        ("sentry", "0618_drop_event_user_id_from_userreport_table_step_2"),
        ("sentry", "0619_monitors_migrate_is_muted"),
        ("sentry", "0620_add_has_new_feedbacks_flag"),
        ("sentry", "0621_set_muted_monitors_to_active"),
        ("sentry", "0622_add_has_custom_metrics_flag"),
        ("sentry", "0623_increase_regression_fingerprint_length"),
        ("sentry", "0624_add_is_muted_monitorenvironment"),
        ("sentry", "0625_change_rule_label_type_to_char256"),
        ("sentry", "0626_add_member_project_creation_bitfield"),
        ("sentry", "0627_change_to_sentry_slug"),
        ("sentry", "0628_better_menv_latest_index"),
        ("sentry", "0629_eventattachment_index"),
        ("sentry", "0630_better_monitor_latest_index"),
        ("sentry", "0631_add_priority_columns_to_groupedmessage"),
        ("sentry", "0632_apitoken_backfill_last_chars"),
        ("sentry", "0633_add_priority_locked_at_to_groupedmessage"),
        ("sentry", "0634_backfill_github_webhook_outbox_shard_ids"),
        ("sentry", "0635_groupenvironment_index"),
        ("sentry", "0636_monitor_incident_env_resolving_index"),
        ("sentry", "0637_remove_pr_comment_pr_id_constraint"),
        ("sentry", "0638_add_date_added_to_dashboard_widget_on_demand"),
        ("sentry", "0639_add_spec_version_to_dashboard_on_demand"),
        ("sentry", "0640_index_together"),
        ("sentry", "0641_backfill_group_attributes"),
        ("sentry", "0642_index_together_release"),
        ("sentry", "0643_add_date_modified_col_dashboard_widget_query"),
        ("sentry", "0644_backfill_priority_for_groups"),
        ("sentry", "0645_backfill_add_uuid_to_all_rule_actions"),
        ("sentry", "0646_create_notification_message_table"),
        ("sentry", "0647_apitoken_add_hashed_columns"),
        ("sentry", "0648_monitor_env_break_env_fk"),
        ("sentry", "0649_add_index_for_group_priority"),
        ("sentry", "0650_create_sentryshot"),
        ("sentry", "0651_enable_activated_alert_rules"),
        ("sentry", "0652_alert_rule_activation_condition"),
        ("sentry", "0653_apitoken_add_token_type"),
        ("sentry", "0654_rename_priority_sort_to_trends"),
        ("sentry", "0655_apitoken_increase_token_length"),
        ("sentry", "0656_add_discover_dataset_split_dashboard"),
        ("sentry", "0657_add_status_column_for_alert_rule_trigger_action"),
        ("sentry", "0658_projectkey_usecase"),
        ("sentry", "0659_artifactbundleindex_cleanup"),
        ("sentry", "0660_fix_cron_monitor_invalid_orgs"),
        ("sentry", "0661_artifactbundleindex_cleanup_step2"),
        ("sentry", "0662_monitor_drop_last_state_change"),
        ("sentry", "0663_artifactbundleindex_cleanup_step3"),
        ("sentry", "0664_create_new_broken_monitor_detection_table"),
        ("sentry", "0665_monitor_drop_last_state_change_db"),
        ("sentry", "0666_monitor_incident_default_grouphash"),
        ("sentry", "0667_drop_django_team_org_role_column"),
        ("sentry", "0668_add_active_monitor_incident_index"),
        ("sentry", "0669_alert_rule_activation"),
        ("sentry", "0670_monitor_incident_cleanup_duplicates"),
        ("sentry", "0671_enforce_unqiue_active_incidents"),
        ("sentry", "0672_backfill_ukraine_timezone_name"),
        ("sentry", "0673_add_env_muted_to_broken_detection"),
        ("sentry", "0674_monitor_clear_missed_timeout_as_error"),
        ("sentry", "0675_dashboard_widget_query_rename_priority_sort_to_trends"),
        ("sentry", "0676_apitoken_hashed_indexes"),
        ("sentry", "0677_unpickle_project_options_again"),
        ("sentry", "0678_add_is_hidden_dashboard_widget_query"),
        ("sentry", "0679_add_query_sub_fk_to_aar_activations"),
        ("sentry", "0680_unpickle_options_again"),
        ("sentry", "0681_unpickle_authenticator_again"),
        ("sentry", "0682_monitors_constrain_to_project_id_slug"),
        ("sentry", "0683_reprocessing_datetime_indexes"),
        ("sentry", "0684_monitor_check_in_config_nullable"),
        ("sentry", "0685_alert_rule_conditons_rename_singular"),
        ("sentry", "0686_remove_config_from_checkin_state_operation"),
        ("sentry", "0687_alert_rule_project_backfill_migration"),
        ("sentry", "0688_add_project_flag_high_priority_alerts"),
        ("sentry", "0689_drop_config_from_cron_checkin"),
        ("sentry", "0690_remove_project_team_avatar"),
        ("sentry", "0691_remove_project_team_avatar_model"),
        ("sentry", "0692_backfill_group_priority_again"),
        ("sentry", "0693_add_monitors_ownership_actor_id"),
        ("sentry", "0694_db_index_alert_rule_actions"),
        ("sentry", "0695_add_monitors_ownership_owner_user_id_team_id"),
        ("sentry", "0696_remove_monitor_owner_actor_id"),
        ("sentry", "0697_remove_monitor_owner_actor_id_db"),
        ("sentry", "0698_remove_file_id_from_control_avatars"),
        ("sentry", "0699_update_monitor_owner_team_id_cascsade"),
        ("sentry", "0700_drop_fileid_controlavatar"),
        ("sentry", "0701_backfill_alertrule_user_team"),
        ("sentry", "0702_alert_rule_project_backfill_migration_2"),
        ("sentry", "0703_add_team_user_to_rule"),
        ("sentry", "0704_backfill_rule_user_team"),
        ("sentry", "0705_grouphistory_add_userteam"),
        ("sentry", "0706_grouphistory_userteam_backfill"),
        ("sentry", "0707_alert_rule_activations_incidents_fk"),
        ("sentry", "0708_rule_remove_owner_state"),
        ("sentry", "0709_alertrule_remove_owner_state"),
        ("sentry", "0710_grouphistory_remove_actor_state"),
        ("sentry", "0711_backfill_group_attributes_to_self_hosted"),
        ("sentry", "0712_create_tombstone_compound_indexes"),
        ("sentry", "0713_team_remove_actor_state"),
        ("sentry", "0714_drop_project_team_avatar"),
        ("sentry", "0715_remove_actormodel_constraints"),
        ("sentry", "0716_remove_actormodel"),
        ("sentry", "0717_query_subscription_timebox"),
        ("sentry", "0718_delete_timebox_columns"),
        ("sentry", "0719_querysubscription_timebox_column_deletion_db"),
        ("sentry", "0720_remove_actor_columns"),
        ("sentry", "0721_delete_sentryfunctions"),
        ("sentry", "0722_drop_sentryfunctions"),
        ("sentry", "0723_project_template_models"),
        ("sentry", "0724_discover_saved_query_dataset"),
        ("sentry", "0725_create_sentry_groupsearchview_table"),
        ("sentry", "0726_apitoken_backfill_hashes"),
        ("sentry", "0727_add_description_alertrule"),
        ("sentry", "0728_incident_subscription_fk"),
        ("sentry", "0729_backfill_groupsearchviews_with_pinned_searches"),
        ("sentry", "0730_add_subscription_fk_to_incident"),
        ("sentry", "0731_add_insight_project_flags"),
        ("sentry", "0732_add_span_attribute_extraction_rules"),
        ("sentry", "0733_relocation_provenance"),
        ("sentry", "0734_rm_reprocessing_step1"),
        ("sentry", "0735_sunset_appstore_connect_integration"),
        ("sentry", "0736_rm_reprocessing_step2"),
        ("sentry", "0737_add_discover_saved_query_dataset_source"),
        ("sentry", "0738_rm_reprocessing_step3"),
        ("sentry", "0739_backfill_group_info_to_group_attributes"),
        ("sentry", "0740_one_relocation_file_kind_per_relocation"),
        ("sentry", "0741_metric_alert_anomaly_detection"),
        ("sentry", "0742_backfill_alertrule_detection_type"),
        ("sentry", "0743_backfill_broken_monitor_notification_setting_option"),
        ("sentry", "0744_add_dataset_source_field_to_dashboards"),
        ("sentry", "0745_add_prevent_superuser_access_bitflag"),
        ("sentry", "0746_add_bitflags_to_hybrid_cloud"),
        ("sentry", "0747_create_datasecrecywaiver_table"),
        ("sentry", "0748_create_grouphashmetadata_table"),
        ("sentry", "0749_disable_member_invite"),
        ("sentry", "0750_disable_member_invite_in_hybrid_cloud"),
        ("sentry", "0751_grouphashmetadata_use_one_to_one_field_for_grouphash"),
        ("sentry", "0752_fix_substatus_for_unresolved_groups"),
        ("sentry", "0753_fix_substatus_for_ignored_groups"),
        ("sentry", "0754_extend_broadcast_model"),
        ("sentry", "0755_remove_fk_constraints_spanattributeextraction"),
        ("sentry", "0756_grouprelease_represented_in_django"),
        ("sentry", "0757_add_scopes_to_apiapplication"),
        ("sentry", "0758_remove_spanattributeextraction_models"),
        ("sentry", "0759_remove_spanattributeextraction_tables"),
        ("sentry", "0760_remove_appstore_connect_integration_tables"),
        ("sentry", "0761_add_substatus_constraint_to_groups"),
        ("sentry", "0762_drop_substatus_constraint_to_groups"),
        ("sentry", "0763_add_created_by_to_broadcasts"),
        ("sentry", "0764_migrate_bad_status_substatus_rows"),
        ("sentry", "0765_add_org_to_api_auth"),
        ("sentry", "0766_fix_substatus_for_pending_merge"),
        ("sentry", "0767_add_selected_aggregate_to_dashboards_widget_query"),
        ("sentry", "0768_fix_old_group_first_seen_dates"),
        ("sentry", "0769_add_seer_fields_to_grouphash_metadata"),
        ("sentry", "0770_increase_project_slug_max_length"),
        ("sentry", "0771_add_grouping_config_to_grouphash_metadata"),
        ("sentry", "0772_backfill_grouphash_metadata_grouping_config"),
        ("sentry", "0773_make_group_score_nullable"),
        ("sentry", "0774_drop_group_score_in_state_only"),
        ("sentry", "0775_add_dashboard_permissions_model"),
        ("sentry", "0776_drop_group_score_in_database"),
        ("sentry", "0777_add_related_name_to_dashboard_permissions"),
        ("sentry", "0778_userreport_comments_max_length"),
        ("sentry", "0779_remove_groups_from_group_inbox"),
        ("sentry", "0780_create_sentry_rollback_models"),
        ("sentry", "0781_add_hash_basis_to_grouphash_metadata"),
        ("sentry", "0782_align_deletedproject_slug_length"),
        ("sentry", "0783_remove_release_project_id"),
        ("sentry", "0784_remove_broadcasts_cta_column"),
        ("sentry", "0785_add_new_field_to_dashboard_permissions"),
        ("sentry", "0786_drop_broadcasts_cta_column"),
        ("sentry", "0787_make_dashboard_perms_col_nullable"),
        ("sentry", "0788_remove__dashboard_perms_col"),
        ("sentry", "0789_add_unique_constraint_to_rollbackorganization"),
        ("sentry", "0790_delete_dashboard_perms_col"),
        ("sentry", "0791_add_hashing_metadata_to_grouphash_metadata"),
        ("sentry", "0792_add_unique_index_apiauthorization"),
        ("sentry", "0793_remove_db_constraint_alert_rule_exclusion"),
        ("sentry", "0794_rm_excluded_included_projects_alertrule"),
        ("sentry", "0795_drop_included_excluded_projects"),
        ("sentry", "0796_rm_excluded_projects_triggers"),
        ("sentry", "0797_drop_excluded_project_triggers"),
        ("sentry", "0798_add_favorite_dashboard_col"),
        ("sentry", "0799_cron_incident_index"),
        ("sentry", "0800_rm_incidentseen_incidentsubscription"),
        ("sentry", "0801_drop_incidentseen_incidentsubscription"),
        ("sentry", "0802_remove_grouping_auto_update_option"),
        ("sentry", "0803_delete_unused_metricskeyindexer_pt1"),
        ("sentry", "0804_delete_metrics_key_indexer_pt2"),
        ("sentry", "0805_add_alert_and_member_invite_scopes_to_sentry_apps"),
        ("sentry", "0806_remove_monitor_attachment_id_pt1"),
        ("sentry", "0807_remove_monitor_attachment_id_pt2"),
        ("sentry", "0808_change_grouphash_metadata_seer_matched_grouphash_deletion_config"),
        ("sentry", "0809_delete_auth_provider_default_teams"),
        ("sentry", "0810_add_project_has_flag"),
        ("sentry", "0811_fully_delete_auth_provider_default_teams"),
        ("sentry", "0812_rm_activation_incident"),
        ("sentry", "0813_rm_alertruleactivation_models"),
        ("sentry", "0814_drop_alertactivations"),
        ("sentry", "0816_add_timestamp_to_group_tombstone"),
        ("sentry", "0818_enforce_check_in_environment_not_null"),
        ("sentry", "0819_alert_rule_snuba_query_non_null"),
        ("sentry", "0820_snuba_query_non_none"),
        ("sentry", "0821_create_groupsearchview_page_filter_columns"),
        ("sentry", "0822_alert_rule_always_organization"),
        ("sentry", "0823_projectcodeowners_raw_never_null"),
        ("sentry", "0824_projectcodeowners_schema_non_null"),
        ("sentry", "0825_remove_notificationmessage_unique_ag_constraint"),
        ("sentry", "0826_make_sentryapp_uuid_unique"),
        ("sentry", "0827_projectteam_non_null"),
        ("sentry", "0828_add_platform_to_grouphash_metadata"),
        ("sentry", "0829_add_additional_timestamps_to_checkins"),
        ("sentry", "0830_add_external_id_to_project"),
        ("sentry", "0831_add_index_external_id_organization_to_project"),
        ("sentry", "0832_make_grouphash_metadata_date_added_nullable"),
        ("sentry", "0833_add_relocationtransfer_models"),
        ("sentry", "0834_add_index_on_authidentity_last_synced"),
        ("sentry", "0835_add_schema_version_to_grouphash_metadata"),
        ("sentry", "0836_create_groupsearchviewstarred_table"),
        ("sentry", "0837_create_groupsearchviewlastseen_table"),
        ("sentry", "0838_backfill_groupsearchview_positions_to_gsvstarred"),
        ("sentry", "0839_add_visibility_column_to_groupsearchview"),
        ("sentry", "0840_savedsearch_type_non_null"),
        ("sentry", "0841_backfill_desynced_starred_views"),
        ("sentry", "0842_create_organization_member_invite_table"),
        ("sentry", "0843_make_groupsearchview_postition_nullable_for_deletion"),
        ("sentry", "0844_remove_project_cascade_in_create_first_project"),
        ("sentry", "0845_safe_drop_groupsearchviewposition"),
        ("sentry", "0846_hard_drop_groupsearchview_position"),
        ("sentry", "0847_remove_duplicate_and_unused_indexes"),
        ("sentry", "0848_crons_post_migration_constraints"),
        ("sentry", "0849_monitor_checkin_unknown"),
        ("sentry", "0850_crons_drop_location"),
        ("sentry", "0851_new_group_nullable"),
        ("sentry", "0852_delete_new_groups_column"),
        ("sentry", "0853_add_group_open_periods"),
        ("sentry", "0854_add_project_sdk_model"),
        ("sentry", "0855_give_monitor_type_a_db_default"),
        ("sentry", "0856_monitors_remove_type_column_state"),
        ("sentry", "0857_update_group_open_periods_constraint"),
        ("sentry", "0858_backfill_groupsearchviews_with_org_visibility"),
        ("sentry", "0859_monitors_remove_type_column_db"),
        ("sentry", "0860_add_new_groupopenperiod_constraint"),
        ("sentry", "0861_monitors_remove_location"),
        ("sentry", "0862_monitors_remove_location_db"),
        ("sentry", "0863_update_organization_member_invite_model"),
        ("sentry", "0864_move_monitors"),
        ("sentry", "0865_file_offsets"),
        ("sentry", "0866_grouptype_index"),
        ("sentry", "0867_fix_drift_default_to_db_default"),
        ("sentry", "0868_delete_group_open_periods"),
        ("sentry", "0869_fix_drift_db_default_pt2"),
        ("sentry", "0870_delete_non_member_views"),
        ("sentry", "0871_fix_some_drift"),
        ("sentry", "0872_fix_drift_deleted_columns"),
        ("sentry", "0873_update_groupsearchview_visibility_default"),
        ("sentry", "0874_positive_integer_drift"),
        ("sentry", "0875_integer_drift_group_1"),
        ("sentry", "0876_integer_drift_group_2"),
        ("sentry", "0877_integer_drift_release"),
        ("sentry", "0878_backfill_open_periods"),
        ("sentry", "0879_add_seer_fields_to_group"),
        ("sentry", "0880_orgauthtoken_bigint"),
        ("sentry", "0881_delete_single_prioritized_groupsearchviews"),
        ("sentry", "0882_projectoptions_idx_on_key"),
        ("sentry", "0883_delete_incident_snapshot_tables_pt1"),
        ("sentry", "0884_delete_incident_snapshot_tables_pt2"),
        ("sentry", "0885_remove_project_integrations_table"),
        ("sentry", "0886_django_arrayfield_scope_list"),
        ("sentry", "0887_environment_deleted_column"),
        ("sentry", "0888_groupopenperiod_gist_index_in_code"),
        ("sentry", "0889_remove_index_on_key_field"),
        ("sentry", "0890_remove_index_on_group_release_last_seen"),
        ("sentry", "0891_remove_project_integrations_table_physical"),
        ("sentry", "0892_sentry_app_json_field"),
        ("sentry", "0893_rulesnooze_added_with_timezone"),
        ("sentry", "0894_split_discover_dataset_saved_queries"),
        ("sentry", "0895_relocation_provenance_smallint"),
        ("sentry", "0896_org_level_access_not_null"),
        ("sentry", "0897_rm_extraneous_groupedmessage_index"),
        ("sentry", "0898_groupedmessage_wrong_int_type"),
        ("sentry", "0899_organization_slug_upper_idx"),
        ("sentry", "0900_group_link_group_id_no_index"),
        ("sentry", "0901_org_slug_wrong_index_name"),
        ("sentry", "0902_detection_type_match_size"),
        ("sentry", "0903_missing_indexes_in_state"),
        ("sentry", "0904_onboarding_task_project_id_idx"),
    ]

    initial = True

    checked = False  # This is an initial migration and can take locks

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128)),
                ("last_login", models.DateTimeField(blank=True, null=True)),
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("username", models.CharField(max_length=128, unique=True)),
                ("name", models.CharField(blank=True, db_column="first_name", max_length=200)),
                ("email", models.EmailField(blank=True, max_length=75)),
                ("is_staff", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("is_unclaimed", models.BooleanField(db_default=False, default=False)),
                ("is_superuser", models.BooleanField(default=False)),
                ("is_managed", models.BooleanField(default=False)),
                ("is_sentry_app", models.BooleanField(default=None, null=True)),
                ("is_password_expired", models.BooleanField(default=False)),
                ("last_password_change", models.DateTimeField(null=True)),
                (
                    "flags",
                    bitfield.models.BitField(["newsletter_consent_prompt"], default=0, null=True),
                ),
                ("session_nonce", models.CharField(max_length=12, null=True)),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now)),
                ("last_active", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ("avatar_type", models.PositiveSmallIntegerField(db_default=0, default=0)),
                (
                    "avatar_url",
                    models.CharField(db_default=None, default=None, max_length=120, null=True),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "db_table": "auth_user",
            },
            managers=[
                ("objects", sentry.users.models.user.UserManager(cache_fields=["pk"])),
            ],
        ),
        migrations.CreateModel(
            name="AlertRule",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, null=True, on_delete="SET_NULL"
                    ),
                ),
                ("name", models.TextField()),
                ("status", models.SmallIntegerField(db_default=0, default=0)),
                ("threshold_type", models.SmallIntegerField(null=True)),
                ("resolve_threshold", models.FloatField(null=True)),
                ("threshold_period", models.IntegerField()),
                ("comparison_delta", models.IntegerField(null=True)),
                ("date_modified", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "monitor_type",
                    models.IntegerField(
                        db_default=sentry.incidents.models.alert_rule.AlertRuleMonitorTypeInt[
                            "CONTINUOUS"
                        ],
                        default=sentry.incidents.models.alert_rule.AlertRuleMonitorTypeInt[
                            "CONTINUOUS"
                        ],
                    ),
                ),
                ("description", models.CharField(max_length=1000, null=True)),
                (
                    "detection_type",
                    models.CharField(db_default="static", default="static", max_length=32),
                ),
                ("sensitivity", models.CharField(null=True)),
                ("seasonality", models.CharField(null=True)),
            ],
            options={
                "db_table": "sentry_alertrule",
                "base_manager_name": "objects_with_snapshots",
                "default_manager_name": "objects_with_snapshots",
            },
            managers=[
                ("objects_with_snapshots", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="ApiKey",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "scopes",
                    bitfield.models.BitField(
                        [
                            "project:read",
                            "project:write",
                            "project:admin",
                            "project:releases",
                            "team:read",
                            "team:write",
                            "team:admin",
                            "event:read",
                            "event:write",
                            "event:admin",
                            "org:read",
                            "org:write",
                            "org:admin",
                            "member:read",
                            "member:write",
                            "member:admin",
                            "org:integrations",
                            "alerts:read",
                            "alerts:write",
                            "member:invite",
                        ],
                        default=None,
                    ),
                ),
                (
                    "scope_list",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), default=list, size=None
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Organization", db_index=True, on_delete="CASCADE"
                    ),
                ),
                ("label", models.CharField(blank=True, default="Default", max_length=64)),
                ("key", models.CharField(max_length=32, unique=True)),
                (
                    "status",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_index=True, default=0
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("allowed_origins", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "sentry_apikey",
            },
        ),
        migrations.CreateModel(
            name="ArtifactBundle",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                (
                    "bundle_id",
                    models.UUIDField(db_index=True, default="00000000-00000000-00000000-00000000"),
                ),
                ("artifact_count", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("indexing_state", models.IntegerField(default=None, null=True)),
                (
                    "date_added",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("date_uploaded", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_last_modified", models.DateTimeField(null=True)),
            ],
            options={
                "db_table": "sentry_artifactbundle",
            },
        ),
        migrations.CreateModel(
            name="AuthProvider",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Organization", db_index=True, on_delete="CASCADE", unique=True
                    ),
                ),
                ("provider", models.CharField(max_length=128)),
                ("config", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "sync_time",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
                ),
                ("last_sync", models.DateTimeField(null=True)),
                (
                    "default_role",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=50),
                ),
                ("default_global_access", models.BooleanField(default=True)),
                ("flags", bitfield.models.BitField(["allow_unlinked", "scim_enabled"], default=0)),
            ],
            options={
                "db_table": "sentry_authprovider",
            },
        ),
        migrations.CreateModel(
            name="ControlFile",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("name", models.TextField()),
                ("type", models.CharField(max_length=64)),
                (
                    "timestamp",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("headers", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ("size", sentry.db.models.fields.bounded.WrappingU32IntegerField(null=True)),
                ("checksum", models.CharField(db_index=True, max_length=40, null=True)),
            ],
            options={
                "db_table": "sentry_controlfile",
            },
            bases=(models.Model, sentry.models.files.abstractfile._Parent),
        ),
        migrations.CreateModel(
            name="ControlFileBlob",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("path", models.TextField(null=True)),
                ("size", sentry.db.models.fields.bounded.WrappingU32IntegerField(null=True)),
                ("checksum", models.CharField(max_length=40, unique=True)),
                (
                    "timestamp",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
            ],
            options={
                "db_table": "sentry_controlfileblob",
            },
            bases=(models.Model, sentry.models.files.abstractfileblob._Parent),
        ),
        migrations.CreateModel(
            name="ControlOption",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("key", models.CharField(max_length=128, unique=True)),
                ("last_updated", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "last_updated_by",
                    models.CharField(db_default="unknown", default="unknown", max_length=16),
                ),
                ("value", sentry.db.models.fields.picklefield.PickledObjectField(editable=False)),
            ],
            options={
                "db_table": "sentry_controloption",
            },
            bases=(sentry.backup.mixins.OverwritableConfigMixin, models.Model),
        ),
        migrations.CreateModel(
            name="ControlRelocationTransfer",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                ("relocation_uuid", sentry.db.models.fields.uuid.UUIDField(max_length=32)),
                ("org_slug", models.CharField()),
                ("requesting_region", models.CharField()),
                ("exporting_region", models.CharField()),
                ("state", models.CharField(default="request")),
                (
                    "scheduled_for",
                    models.DateTimeField(default=django.utils.timezone.now, null=True),
                ),
                ("public_key", models.BinaryField(null=True)),
            ],
            options={
                "db_table": "sentry_controlrelocationtransfer",
            },
        ),
        migrations.CreateModel(
            name="Dashboard",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                (
                    "created_by_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, on_delete="CASCADE"
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "visits",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(default=1, null=True),
                ),
                (
                    "last_visited",
                    models.DateTimeField(default=django.utils.timezone.now, null=True),
                ),
                ("filters", sentry.db.models.fields.jsonfield.JSONField(null=True)),
            ],
            options={
                "db_table": "sentry_dashboard",
            },
        ),
        migrations.CreateModel(
            name="DeletedOrganization",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("actor_label", models.CharField(max_length=64, null=True)),
                ("actor_id", sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ("actor_key", models.CharField(max_length=32, null=True)),
                ("ip_address", models.GenericIPAddressField(null=True, unpack_ipv4=True)),
                ("date_deleted", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_created", models.DateTimeField(null=True)),
                ("reason", models.TextField(blank=True, null=True)),
                ("name", models.CharField(max_length=64, null=True)),
                ("slug", models.CharField(max_length=50, null=True)),
            ],
            options={
                "db_table": "sentry_deletedorganization",
            },
        ),
        migrations.CreateModel(
            name="DeletedProject",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("actor_label", models.CharField(max_length=64, null=True)),
                ("actor_id", sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ("actor_key", models.CharField(max_length=32, null=True)),
                ("ip_address", models.GenericIPAddressField(null=True, unpack_ipv4=True)),
                ("date_deleted", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_created", models.DateTimeField(null=True)),
                ("reason", models.TextField(blank=True, null=True)),
                ("slug", models.CharField(max_length=100, null=True)),
                ("name", models.CharField(max_length=200, null=True)),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
                ),
                ("organization_name", models.CharField(max_length=64, null=True)),
                ("organization_slug", models.CharField(max_length=50, null=True)),
                ("platform", models.CharField(max_length=64, null=True)),
            ],
            options={
                "db_table": "sentry_deletedproject",
            },
        ),
        migrations.CreateModel(
            name="DeletedTeam",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("actor_label", models.CharField(max_length=64, null=True)),
                ("actor_id", sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ("actor_key", models.CharField(max_length=32, null=True)),
                ("ip_address", models.GenericIPAddressField(null=True, unpack_ipv4=True)),
                ("date_deleted", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_created", models.DateTimeField(null=True)),
                ("reason", models.TextField(blank=True, null=True)),
                ("name", models.CharField(max_length=64, null=True)),
                ("slug", models.CharField(max_length=50, null=True)),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
                ),
                ("organization_name", models.CharField(max_length=64, null=True)),
                ("organization_slug", models.CharField(max_length=50, null=True)),
            ],
            options={
                "db_table": "sentry_deletedteam",
            },
        ),
        migrations.CreateModel(
            name="DocIntegration",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=64)),
                (
                    "slug",
                    sentry.db.models.fields.slug.SentrySlugField(
                        db_index=False, max_length=64, unique=True
                    ),
                ),
                ("author", models.CharField(max_length=255)),
                ("description", models.TextField()),
                ("url", models.URLField()),
                ("popularity", models.PositiveSmallIntegerField(default=1, null=True)),
                ("is_draft", models.BooleanField(default=True)),
                ("metadata", sentry.db.models.fields.jsonfield.JSONField(null=True)),
            ],
            options={
                "db_table": "sentry_docintegration",
            },
        ),
        migrations.CreateModel(
            name="Email",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("email", sentry.db.models.fields.citext.CIEmailField(max_length=75, unique=True)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "db_table": "sentry_email",
            },
        ),
        migrations.CreateModel(
            name="Environment",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("organization_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("name", models.CharField(max_length=64)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "db_table": "sentry_environment",
            },
        ),
        migrations.CreateModel(
            name="ExportedData",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, null=True, on_delete="SET_NULL"
                    ),
                ),
                (
                    "file_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(
                        db_index=True, null=True
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_finished", models.DateTimeField(null=True)),
                ("date_expired", models.DateTimeField(db_index=True, null=True)),
                ("query_type", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("query_info", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
            ],
            options={
                "db_table": "sentry_exporteddata",
            },
        ),
        migrations.CreateModel(
            name="File",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("name", models.TextField()),
                ("type", models.CharField(max_length=64)),
                (
                    "timestamp",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("headers", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ("size", sentry.db.models.fields.bounded.WrappingU32IntegerField(null=True)),
                ("checksum", models.CharField(db_index=True, max_length=40, null=True)),
                ("path", models.TextField(null=True)),
            ],
            options={
                "db_table": "sentry_file",
            },
            bases=(models.Model, sentry.models.files.abstractfile._Parent),
        ),
        migrations.CreateModel(
            name="FileBlob",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("path", models.TextField(null=True)),
                ("size", sentry.db.models.fields.bounded.WrappingU32IntegerField(null=True)),
                ("checksum", models.CharField(max_length=40, unique=True)),
                (
                    "timestamp",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
            ],
            options={
                "db_table": "sentry_fileblob",
            },
            bases=(models.Model, sentry.models.files.abstractfileblob._Parent),
        ),
        migrations.CreateModel(
            name="Group",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("logger", models.CharField(blank=True, db_index=True, default="", max_length=64)),
                (
                    "level",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        blank=True, db_index=True, default=40
                    ),
                ),
                ("message", models.TextField()),
                (
                    "culprit",
                    models.CharField(blank=True, db_column="view", max_length=200, null=True),
                ),
                (
                    "num_comments",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        default=0, null=True
                    ),
                ),
                ("platform", models.CharField(max_length=64, null=True)),
                (
                    "status",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_index=True, default=0
                    ),
                ),
                ("substatus", sentry.db.models.fields.bounded.BoundedIntegerField(null=True)),
                (
                    "times_seen",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_index=True, default=1
                    ),
                ),
                (
                    "last_seen",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                (
                    "first_seen",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("resolved_at", models.DateTimeField(db_index=True, null=True)),
                ("active_at", models.DateTimeField(db_index=True, null=True)),
                (
                    "time_spent_total",
                    sentry.db.models.fields.bounded.BoundedIntegerField(default=0),
                ),
                (
                    "time_spent_count",
                    sentry.db.models.fields.bounded.BoundedIntegerField(default=0),
                ),
                ("is_public", models.BooleanField(default=False, null=True)),
                (
                    "data",
                    sentry.db.models.fields.gzippeddict.GzippedDictField(blank=True, null=True),
                ),
                ("short_id", sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                (
                    "type",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_default=1, db_index=True, default=1
                    ),
                ),
                ("priority", models.PositiveIntegerField(null=True)),
                ("priority_locked_at", models.DateTimeField(null=True)),
                ("seer_fixability_score", models.FloatField(null=True)),
                ("seer_autofix_last_triggered", models.DateTimeField(null=True)),
            ],
            options={
                "verbose_name": "grouped message",
                "verbose_name_plural": "grouped messages",
                "db_table": "sentry_groupedmessage",
                "permissions": (("can_view", "Can view"),),
            },
        ),
        migrations.CreateModel(
            name="GroupSearchView",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ("name", models.TextField(max_length=128)),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, on_delete="CASCADE"
                    ),
                ),
                ("visibility", models.CharField(db_default="organization", max_length=16)),
                ("query", models.TextField()),
                (
                    "query_sort",
                    models.CharField(
                        default=sentry.models.savedsearch.SortOptions["DATE"], max_length=16
                    ),
                ),
                ("is_all_projects", models.BooleanField(db_default=False)),
                ("environments", sentry.db.models.fields.array.ArrayField(default=list, null=True)),
                ("time_filters", models.JSONField(db_default={"period": "14d"})),
            ],
            options={
                "db_table": "sentry_groupsearchview",
            },
        ),
        migrations.CreateModel(
            name="Option",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("key", models.CharField(max_length=128, unique=True)),
                ("last_updated", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "last_updated_by",
                    models.CharField(db_default="unknown", default="unknown", max_length=16),
                ),
                ("value", sentry.db.models.fields.picklefield.PickledObjectField(editable=False)),
            ],
            options={
                "db_table": "sentry_option",
            },
            bases=(sentry.backup.mixins.OverwritableConfigMixin, models.Model),
        ),
        migrations.CreateModel(
            name="OrganizationMapping",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(
                        db_index=True, unique=True
                    ),
                ),
                ("slug", models.SlugField(unique=True)),
                ("name", models.CharField(max_length=64)),
                ("date_created", models.DateTimeField(default=django.utils.timezone.now)),
                ("customer_id", models.CharField(db_index=True, max_length=255, null=True)),
                ("verified", models.BooleanField(default=False)),
                ("idempotency_key", models.CharField(max_length=48)),
                ("region_name", models.CharField(max_length=48)),
                ("status", sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ("allow_joinleave", models.BooleanField(db_default=False, default=False)),
                ("enhanced_privacy", models.BooleanField(db_default=False, default=False)),
                ("require_2fa", models.BooleanField(db_default=False, default=False)),
                ("early_adopter", models.BooleanField(db_default=False, default=False)),
                ("disable_shared_issues", models.BooleanField(db_default=False, default=False)),
                (
                    "disable_new_visibility_features",
                    models.BooleanField(db_default=False, default=False),
                ),
                (
                    "require_email_verification",
                    models.BooleanField(db_default=False, default=False),
                ),
                ("codecov_access", models.BooleanField(db_default=False, default=False)),
                (
                    "disable_member_project_creation",
                    models.BooleanField(db_default=False, default=False),
                ),
                ("prevent_superuser_access", models.BooleanField(db_default=False, default=False)),
                ("disable_member_invite", models.BooleanField(db_default=False, default=False)),
            ],
            options={
                "db_table": "sentry_organizationmapping",
            },
        ),
        migrations.CreateModel(
            name="RegionRelocationTransfer",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                ("relocation_uuid", sentry.db.models.fields.uuid.UUIDField(max_length=32)),
                ("org_slug", models.CharField()),
                ("requesting_region", models.CharField()),
                ("exporting_region", models.CharField()),
                ("state", models.CharField(default="request")),
                (
                    "scheduled_for",
                    models.DateTimeField(default=django.utils.timezone.now, null=True),
                ),
            ],
            options={
                "db_table": "sentry_regionrelocationtransfer",
            },
        ),
        migrations.CreateModel(
            name="Relay",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("relay_id", models.CharField(max_length=64, unique=True)),
                ("public_key", models.CharField(max_length=200)),
                ("first_seen", models.DateTimeField(default=None, null=True)),
                ("last_seen", models.DateTimeField(default=None, null=True)),
                ("is_internal", models.BooleanField(default=None, null=True)),
            ],
            options={
                "db_table": "sentry_relay",
            },
            bases=(sentry.backup.mixins.OverwritableConfigMixin, models.Model),
        ),
        migrations.CreateModel(
            name="SentryShot",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("uuid", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ("sentry_url", models.URLField()),
                ("component_identifier", models.CharField()),
                (
                    "organization_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Organization", db_index=True, on_delete="CASCADE"
                    ),
                ),
                (
                    "date_added",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
            ],
            options={
                "db_table": "sentry_sentryshot",
            },
        ),
        migrations.CreateModel(
            name="ServiceHook",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("guid", models.CharField(max_length=32, null=True, unique=True)),
                (
                    "application_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.ApiApplication", db_index=True, null=True, on_delete="CASCADE"
                    ),
                ),
                ("actor_id", sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                (
                    "installation_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.SentryAppInstallation",
                        db_index=True,
                        null=True,
                        on_delete="CASCADE",
                    ),
                ),
                (
                    "project_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(
                        db_index=True, null=True
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(
                        db_index=True, null=True
                    ),
                ),
                ("url", models.URLField(max_length=512)),
                (
                    "secret",
                    models.TextField(default=sentry.sentry_apps.models.servicehook.generate_secret),
                ),
                ("events", sentry.db.models.fields.array.ArrayField(null=True)),
                (
                    "status",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_index=True, default=0
                    ),
                ),
                ("version", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "db_table": "sentry_servicehook",
            },
        ),
        migrations.CreateModel(
            name="UserRole",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ("name", models.CharField(max_length=32, unique=True)),
                ("permissions", sentry.db.models.fields.array.ArrayField(null=True)),
            ],
            options={
                "db_table": "sentry_userrole",
            },
            bases=(sentry.backup.mixins.OverwritableConfigMixin, models.Model),
        ),
        migrations.CreateModel(
            name="AlertRuleActivity",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, null=True, on_delete="SET_NULL"
                    ),
                ),
                ("type", models.IntegerField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "alert_rule",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.alertrule"
                    ),
                ),
                (
                    "previous_alert_rule",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="previous_alert_rule",
                        to="sentry.alertrule",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_alertruleactivity",
            },
        ),
        migrations.CreateModel(
            name="AlertRuleTrigger",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("label", models.TextField()),
                ("threshold_type", models.SmallIntegerField(null=True)),
                ("alert_threshold", models.FloatField()),
                ("resolve_threshold", models.FloatField(null=True)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "alert_rule",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.alertrule"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_alertruletrigger",
            },
        ),
        migrations.CreateModel(
            name="AlertRuleTriggerAction",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "integration_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Integration",
                        blank=True,
                        db_index=True,
                        null=True,
                        on_delete="CASCADE",
                    ),
                ),
                (
                    "sentry_app_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.SentryApp",
                        blank=True,
                        db_index=True,
                        null=True,
                        on_delete="CASCADE",
                    ),
                ),
                ("type", models.SmallIntegerField()),
                ("target_type", models.SmallIntegerField()),
                ("target_identifier", models.TextField(null=True)),
                ("target_display", models.TextField(null=True)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("sentry_app_config", sentry.db.models.fields.jsonfield.JSONField(null=True)),
                (
                    "status",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_default=0, default=0
                    ),
                ),
                (
                    "alert_rule_trigger",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.alertruletrigger"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_alertruletriggeraction",
            },
        ),
        migrations.CreateModel(
            name="ApiApplication",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "client_id",
                    models.CharField(
                        default=sentry.models.apiapplication.generate_token,
                        max_length=64,
                        unique=True,
                    ),
                ),
                (
                    "client_secret",
                    models.TextField(default=sentry.models.apiapplication.generate_token),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        default=sentry.models.apiapplication.generate_name,
                        max_length=64,
                    ),
                ),
                (
                    "status",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_index=True, default=0
                    ),
                ),
                ("allowed_origins", models.TextField(blank=True, null=True)),
                ("redirect_uris", models.TextField()),
                ("homepage_url", models.URLField(null=True)),
                ("privacy_url", models.URLField(null=True)),
                ("terms_url", models.URLField(null=True)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("scopes", sentry.db.models.fields.array.ArrayField(null=True)),
                ("requires_org_level_access", models.BooleanField(db_default=False, default=False)),
                (
                    "owner",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_apiapplication",
            },
        ),
        migrations.CreateModel(
            name="ApiGrant",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        db_index=True, default=sentry.models.apigrant.generate_code, max_length=64
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        db_index=True, default=sentry.models.apigrant.default_expiration
                    ),
                ),
                ("redirect_uri", models.CharField(max_length=255)),
                (
                    "scopes",
                    bitfield.models.BitField(
                        [
                            "project:read",
                            "project:write",
                            "project:admin",
                            "project:releases",
                            "team:read",
                            "team:write",
                            "team:admin",
                            "event:read",
                            "event:write",
                            "event:admin",
                            "org:read",
                            "org:write",
                            "org:admin",
                            "member:read",
                            "member:write",
                            "member:admin",
                            "openid",
                            "profile",
                            "email",
                        ],
                        default=None,
                    ),
                ),
                (
                    "scope_list",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), default=list, size=None
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Organization", db_index=True, null=True, on_delete="CASCADE"
                    ),
                ),
                (
                    "application",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.apiapplication"
                    ),
                ),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "sentry_apigrant",
            },
        ),
        migrations.CreateModel(
            name="ApiToken",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "scopes",
                    bitfield.models.BitField(
                        [
                            "project:read",
                            "project:write",
                            "project:admin",
                            "project:releases",
                            "team:read",
                            "team:write",
                            "team:admin",
                            "event:read",
                            "event:write",
                            "event:admin",
                            "org:read",
                            "org:write",
                            "org:admin",
                            "member:read",
                            "member:write",
                            "member:admin",
                            "org:integrations",
                            "alerts:read",
                            "alerts:write",
                            "member:invite",
                        ],
                        default=None,
                    ),
                ),
                (
                    "scope_list",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), default=list, size=None
                    ),
                ),
                (
                    "scoping_organization_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Organization", db_index=True, null=True, on_delete="CASCADE"
                    ),
                ),
                ("name", models.CharField(max_length=255, null=True)),
                (
                    "token",
                    models.CharField(
                        default=sentry.models.apitoken.generate_token, max_length=71, unique=True
                    ),
                ),
                ("hashed_token", models.CharField(max_length=128, null=True, unique=True)),
                ("token_type", models.CharField(max_length=7, null=True)),
                ("token_last_characters", models.CharField(max_length=4, null=True)),
                (
                    "refresh_token",
                    models.CharField(
                        default=sentry.models.apitoken.generate_token,
                        max_length=71,
                        null=True,
                        unique=True,
                    ),
                ),
                ("hashed_refresh_token", models.CharField(max_length=128, null=True, unique=True)),
                (
                    "expires_at",
                    models.DateTimeField(
                        default=sentry.models.apitoken.default_expiration, null=True
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "application",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.apiapplication",
                    ),
                ),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "sentry_apitoken",
            },
        ),
        migrations.CreateModel(
            name="AuthIdentityReplica",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "auth_identity_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.AuthIdentity", db_index=True, on_delete="CASCADE", unique=True
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, on_delete="CASCADE"
                    ),
                ),
                (
                    "auth_provider_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.AuthProvider", db_index=True, on_delete="CASCADE"
                    ),
                ),
                ("ident", models.CharField(max_length=128)),
                ("data", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                (
                    "last_verified",
                    models.DateTimeField(
                        db_default=django.db.models.functions.datetime.Now(),
                        default=django.utils.timezone.now,
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "db_table": "sentry_authidentityreplica",
                "unique_together": {("auth_provider_id", "ident"), ("auth_provider_id", "user_id")},
            },
        ),
        migrations.CreateModel(
            name="Broadcast",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("upstream_id", models.CharField(blank=True, max_length=32, null=True)),
                ("title", models.CharField(max_length=64)),
                ("message", models.CharField(max_length=256)),
                ("link", models.URLField(blank=True, null=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                (
                    "date_expires",
                    models.DateTimeField(
                        blank=True, default=sentry.models.broadcast.default_expiration, null=True
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("media_url", models.URLField(blank=True, null=True)),
                ("category", models.CharField(blank=True, max_length=32, null=True)),
                (
                    "created_by_id",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_broadcast",
            },
        ),
        migrations.CreateModel(
            name="CommitAuthor",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                ("name", models.CharField(max_length=128, null=True)),
                ("email", models.CharField(max_length=200)),
                ("external_id", models.CharField(max_length=164, null=True)),
            ],
            options={
                "db_table": "sentry_commitauthor",
                "unique_together": {
                    ("organization_id", "email"),
                    ("organization_id", "external_id"),
                },
            },
        ),
        migrations.CreateModel(
            name="Commit",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                ("repository_id", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("key", models.CharField(max_length=64)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("message", models.TextField(null=True)),
                (
                    "author",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.commitauthor",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_commit",
            },
        ),
        migrations.CreateModel(
            name="CommitFileChange",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                ("filename", models.TextField()),
                ("type", models.CharField(max_length=1)),
                (
                    "commit",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.commit"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_commitfilechange",
            },
        ),
        migrations.CreateModel(
            name="ControlFileBlobIndex",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("offset", sentry.db.models.fields.bounded.WrappingU32IntegerField()),
                (
                    "blob",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="sentry.controlfileblob"
                    ),
                ),
                (
                    "file",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.controlfile"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_controlfileblobindex",
            },
        ),
        migrations.AddField(
            model_name="controlfile",
            name="blobs",
            field=models.ManyToManyField(
                through="sentry.ControlFileBlobIndex", to="sentry.controlfileblob"
            ),
        ),
        migrations.CreateModel(
            name="ControlFileBlobOwner",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                (
                    "blob",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.controlfileblob"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_controlfileblobowner",
            },
        ),
        migrations.CreateModel(
            name="ControlImportChunk",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                (
                    "import_uuid",
                    sentry.db.models.fields.uuid.UUIDField(db_index=True, max_length=32),
                ),
                ("model", models.CharField(db_index=True, max_length=64)),
                ("min_ordinal", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("max_ordinal", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("min_source_pk", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("max_source_pk", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                (
                    "min_inserted_pk",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
                ),
                (
                    "max_inserted_pk",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
                ),
                ("inserted_map", models.JSONField(default=dict)),
                ("existing_map", models.JSONField(default=dict)),
                ("overwrite_map", models.JSONField(default=dict)),
                ("inserted_identifiers", models.JSONField(default=dict)),
            ],
            options={
                "db_table": "sentry_controlimportchunk",
                "unique_together": {("import_uuid", "model", "min_ordinal")},
            },
        ),
        migrations.CreateModel(
            name="ControlImportChunkReplica",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                (
                    "import_uuid",
                    sentry.db.models.fields.uuid.UUIDField(db_index=True, max_length=32),
                ),
                ("model", models.CharField(db_index=True, max_length=64)),
                ("min_ordinal", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("max_ordinal", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("min_source_pk", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("max_source_pk", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                (
                    "min_inserted_pk",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
                ),
                (
                    "max_inserted_pk",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
                ),
                ("inserted_map", models.JSONField(default=dict)),
                ("existing_map", models.JSONField(default=dict)),
                ("overwrite_map", models.JSONField(default=dict)),
                ("inserted_identifiers", models.JSONField(default=dict)),
            ],
            options={
                "db_table": "sentry_controlimportchunkreplica",
                "unique_together": {("import_uuid", "model", "min_ordinal")},
            },
        ),
        migrations.CreateModel(
            name="ControlOutbox",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("shard_scope", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("shard_identifier", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("category", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("object_identifier", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("payload", sentry.db.models.fields.jsonfield.JSONField(null=True)),
                ("scheduled_from", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "scheduled_for",
                    models.DateTimeField(
                        default=datetime.datetime(2016, 8, 1, 0, 0, tzinfo=datetime.UTC)
                    ),
                ),
                (
                    "date_added",
                    models.DateTimeField(
                        db_default=django.db.models.functions.datetime.Now(),
                        default=django.utils.timezone.now,
                        editable=False,
                    ),
                ),
                ("region_name", models.CharField(max_length=48)),
            ],
            options={
                "db_table": "sentry_controloutbox",
                "indexes": [
                    models.Index(
                        fields=[
                            "region_name",
                            "shard_scope",
                            "shard_identifier",
                            "category",
                            "object_identifier",
                        ],
                        name="sentry_cont_region__1c1c72_idx",
                    ),
                    models.Index(
                        fields=["region_name", "shard_scope", "shard_identifier", "scheduled_for"],
                        name="sentry_cont_region__0c4512_idx",
                    ),
                    models.Index(
                        fields=["region_name", "shard_scope", "shard_identifier", "id"],
                        name="sentry_cont_region__a95d82_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ControlTombstone",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("table_name", models.CharField(max_length=48)),
                ("object_identifier", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "db_table": "sentry_controltombstone",
                "indexes": [
                    models.Index(
                        fields=["table_name", "object_identifier"],
                        name="sentry_cont_table_n_940c6d_idx",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="DashboardFavoriteUser",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, on_delete="CASCADE"
                    ),
                ),
                (
                    "dashboard",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.dashboard"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_dashboardfavoriteuser",
            },
        ),
        migrations.CreateModel(
            name="DashboardPermissions",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("is_editable_by_everyone", models.BooleanField(db_default=True, default=True)),
                (
                    "dashboard",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="permissions",
                        to="sentry.dashboard",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_dashboardpermissions",
            },
        ),
        migrations.CreateModel(
            name="DashboardWidget",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("order", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("title", models.CharField(max_length=255)),
                ("description", models.CharField(max_length=255, null=True)),
                ("thresholds", sentry.db.models.fields.jsonfield.JSONField(null=True)),
                ("interval", models.CharField(max_length=10, null=True)),
                ("display_type", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "widget_type",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
                ),
                ("limit", models.IntegerField(null=True)),
                ("detail", sentry.db.models.fields.jsonfield.JSONField(null=True)),
                (
                    "discover_widget_split",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
                ),
                (
                    "dataset_source",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_default=0, default=0
                    ),
                ),
                (
                    "dashboard",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.dashboard"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_dashboardwidget",
            },
        ),
        migrations.CreateModel(
            name="DashboardWidgetQuery",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("fields", sentry.db.models.fields.array.ArrayField(null=True)),
                ("conditions", models.TextField()),
                (
                    "aggregates",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "columns",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                (
                    "field_aliases",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), null=True, size=None
                    ),
                ),
                ("orderby", models.TextField(default="")),
                ("order", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "date_modified",
                    models.DateTimeField(
                        db_default=django.db.models.functions.datetime.Now(),
                        default=django.utils.timezone.now,
                    ),
                ),
                ("is_hidden", models.BooleanField(db_default=False, default=False)),
                ("selected_aggregate", models.IntegerField(null=True)),
                (
                    "widget",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.dashboardwidget"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_dashboardwidgetquery",
            },
        ),
        migrations.CreateModel(
            name="DashboardWidgetQueryOnDemand",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("spec_hashes", sentry.db.models.fields.array.ArrayField(null=True)),
                ("spec_version", models.IntegerField(null=True)),
                ("extraction_state", models.CharField(max_length=30)),
                ("date_modified", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "date_added",
                    models.DateTimeField(
                        db_default=django.db.models.functions.datetime.Now(),
                        default=django.utils.timezone.now,
                    ),
                ),
                (
                    "dashboard_widget_query",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.dashboardwidgetquery",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_dashboardwidgetqueryondemand",
            },
        ),
        migrations.CreateModel(
            name="DebugIdArtifactBundle",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                ("debug_id", models.UUIDField()),
                ("source_file_type", models.IntegerField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "artifact_bundle",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.artifactbundle"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_debugidartifactbundle",
            },
        ),
        migrations.CreateModel(
            name="DocIntegrationAvatar",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("ident", models.CharField(db_index=True, max_length=32, unique=True)),
                (
                    "control_file_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True, unique=True),
                ),
                ("avatar_type", models.PositiveSmallIntegerField(db_default=0, default=0)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "doc_integration",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="avatar",
                        to="sentry.docintegration",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_docintegrationavatar",
            },
        ),
        migrations.CreateModel(
            name="EventAttachment",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("project_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                (
                    "group_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(
                        db_index=True, null=True
                    ),
                ),
                ("event_id", models.CharField(db_index=True, max_length=32)),
                ("type", models.CharField(db_index=True, max_length=64)),
                ("name", models.TextField()),
                ("content_type", models.TextField(null=True)),
                ("size", sentry.db.models.fields.bounded.BoundedIntegerField(null=True)),
                ("sha1", models.CharField(max_length=40, null=True)),
                (
                    "date_added",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                (
                    "file_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(
                        db_index=True, null=True
                    ),
                ),
                ("blob_path", models.TextField(null=True)),
            ],
            options={
                "db_table": "sentry_eventattachment",
                "indexes": [
                    models.Index(
                        fields=["project_id", "date_added"], name="sentry_even_project_62b83b_idx"
                    ),
                    models.Index(
                        fields=["project_id", "event_id"], name="sentry_even_project_974f7b_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ExportedDataBlob",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("blob_id", sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                ("offset", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                (
                    "data_export",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.exporteddata"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_exporteddatablob",
            },
        ),
        migrations.AddField(
            model_name="artifactbundle",
            name="file",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="sentry.file"
            ),
        ),
        migrations.AddField(
            model_name="file",
            name="blob",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="legacy_blob",
                to="sentry.fileblob",
            ),
        ),
        migrations.CreateModel(
            name="FileBlobIndex",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("offset", sentry.db.models.fields.bounded.WrappingU32IntegerField()),
                (
                    "blob",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="sentry.fileblob"
                    ),
                ),
                (
                    "file",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.file"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_fileblobindex",
            },
        ),
        migrations.AddField(
            model_name="file",
            name="blobs",
            field=models.ManyToManyField(through="sentry.FileBlobIndex", to="sentry.fileblob"),
        ),
        migrations.CreateModel(
            name="FileBlobOwner",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                (
                    "blob",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.fileblob"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_fileblobowner",
            },
        ),
        migrations.CreateModel(
            name="Activity",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("type", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("ident", models.CharField(max_length=64, null=True)),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, null=True, on_delete="SET_NULL"
                    ),
                ),
                ("datetime", models.DateTimeField(default=django.utils.timezone.now)),
                ("data", sentry.db.models.fields.gzippeddict.GzippedDictField(null=True)),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="sentry.group"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_activity",
            },
        ),
        migrations.CreateModel(
            name="GroupCommitResolution",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("group_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                (
                    "commit_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                (
                    "datetime",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
            ],
            options={
                "db_table": "sentry_groupcommitresolution",
                "unique_together": {("group_id", "commit_id")},
            },
        ),
        migrations.CreateModel(
            name="GroupHash",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("hash", models.CharField(max_length=32)),
                (
                    "group_tombstone_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_index=True, null=True
                    ),
                ),
                ("state", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="sentry.group"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_grouphash",
            },
        ),
        migrations.CreateModel(
            name="GroupHashMetadata",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ("schema_version", models.CharField(null=True)),
                ("platform", models.CharField(null=True)),
                ("latest_grouping_config", models.CharField(null=True)),
                ("hash_basis", models.CharField(null=True)),
                ("hashing_metadata", sentry.db.models.fields.jsonfield.JSONField(null=True)),
                ("seer_date_sent", models.DateTimeField(null=True)),
                ("seer_event_sent", models.CharField(max_length=32, null=True)),
                ("seer_model", models.CharField(null=True)),
                ("seer_match_distance", models.FloatField(null=True)),
                (
                    "grouphash",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="_metadata",
                        to="sentry.grouphash",
                    ),
                ),
                (
                    "seer_matched_grouphash",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="seer_matchees",
                        to="sentry.grouphash",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_grouphashmetadata",
            },
        ),
        migrations.CreateModel(
            name="GroupMeta",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("key", models.CharField(max_length=64)),
                ("value", models.TextField()),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.group"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_groupmeta",
            },
        ),
        migrations.CreateModel(
            name="GroupRedirect",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
                ),
                ("group_id", sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                (
                    "previous_group_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(unique=True),
                ),
                (
                    "previous_short_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
                ),
                ("previous_project_slug", models.SlugField(null=True)),
            ],
            options={
                "db_table": "sentry_groupredirect",
                "unique_together": {
                    ("organization_id", "previous_short_id", "previous_project_slug")
                },
            },
        ),
        migrations.CreateModel(
            name="GroupRelease",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "project_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                ("group_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                (
                    "release_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True),
                ),
                ("environment", models.CharField(default="", max_length=64)),
                ("first_seen", models.DateTimeField(default=django.utils.timezone.now)),
                ("last_seen", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "db_table": "sentry_grouprelease",
                "indexes": [
                    models.Index(
                        fields=["group_id", "first_seen"], name="sentry_grou_group_i_6eaff8_idx"
                    ),
                    models.Index(
                        fields=["group_id", "-last_seen"], name="sentry_grou_group_i_b6e502_idx"
                    ),
                ],
                "unique_together": {("group_id", "release_id", "environment")},
            },
        ),
        migrations.CreateModel(
            name="GroupSnooze",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("until", models.DateTimeField(null=True)),
                ("count", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ("window", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                (
                    "user_count",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
                ),
                (
                    "user_window",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
                ),
                ("state", sentry.db.models.fields.jsonfield.JSONField(null=True)),
                (
                    "actor_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
                ),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.group", unique=True
                    ),
                ),
            ],
            options={
                "db_table": "sentry_groupsnooze",
            },
        ),
        migrations.CreateModel(
            name="IdentityProvider",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("type", models.CharField(max_length=64)),
                ("config", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ("external_id", models.CharField(max_length=64, null=True)),
            ],
            options={
                "db_table": "sentry_identityprovider",
                "unique_together": {("type", "external_id")},
            },
        ),
        migrations.CreateModel(
            name="Identity",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("external_id", models.TextField()),
                ("data", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ("status", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ("scopes", sentry.db.models.fields.array.ArrayField(null=True)),
                ("date_verified", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "idp",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.identityprovider"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_identity",
            },
        ),
        migrations.CreateModel(
            name="Incident",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("identifier", models.IntegerField()),
                (
                    "detection_uuid",
                    sentry.db.models.fields.uuid.UUIDField(db_index=True, max_length=32, null=True),
                ),
                ("status", models.PositiveSmallIntegerField(default=1)),
                ("status_method", models.PositiveSmallIntegerField(default=3)),
                ("type", models.PositiveSmallIntegerField()),
                ("title", models.TextField()),
                ("date_started", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_detected", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_closed", models.DateTimeField(null=True)),
                (
                    "alert_rule",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="sentry.alertrule"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_incident",
            },
        ),
        migrations.CreateModel(
            name="IncidentActivity",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, null=True, on_delete="CASCADE"
                    ),
                ),
                ("type", models.IntegerField()),
                ("value", models.TextField(null=True)),
                ("previous_value", models.TextField(null=True)),
                ("comment", models.TextField(null=True)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("notification_uuid", models.UUIDField(null=True)),
                (
                    "incident",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.incident"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_incidentactivity",
            },
        ),
        migrations.CreateModel(
            name="IncidentTrigger",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("status", models.SmallIntegerField()),
                ("date_modified", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "alert_rule_trigger",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.alertruletrigger"
                    ),
                ),
                (
                    "incident",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_index=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.incident",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_incidenttrigger",
            },
        ),
        migrations.AddField(
            model_name="alertruletrigger",
            name="triggered_incidents",
            field=models.ManyToManyField(
                related_name="triggers", through="sentry.IncidentTrigger", to="sentry.incident"
            ),
        ),
        migrations.CreateModel(
            name="Integration",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ("provider", models.CharField(max_length=64)),
                ("external_id", models.CharField(max_length=64)),
                ("name", models.CharField(max_length=200)),
                ("metadata", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                (
                    "status",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        default=0, null=True
                    ),
                ),
            ],
            options={
                "db_table": "sentry_integration",
                "unique_together": {("provider", "external_id")},
            },
        ),
        migrations.CreateModel(
            name="IntegrationExternalProject",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_integration_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("name", models.CharField(max_length=128)),
                ("external_id", models.CharField(max_length=64)),
                ("resolved_status", models.CharField(max_length=64)),
                ("unresolved_status", models.CharField(max_length=64)),
            ],
            options={
                "db_table": "sentry_integrationexternalproject",
                "unique_together": {("organization_integration_id", "external_id")},
            },
        ),
        migrations.CreateModel(
            name="IntegrationFeature",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("target_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                (
                    "target_type",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0),
                ),
                ("user_description", models.TextField(null=True)),
                ("feature", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "db_table": "sentry_integrationfeature",
                "unique_together": {("target_id", "target_type", "feature")},
            },
        ),
        migrations.CreateModel(
            name="LatestRepoReleaseEnvironment",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("repository_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("environment_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("release_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("deploy_id", sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ("commit_id", sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
            ],
            options={
                "db_table": "sentry_latestrelease",
                "unique_together": {("repository_id", "environment_id")},
            },
        ),
        migrations.CreateModel(
            name="LostPasswordHash",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("hash", models.CharField(max_length=32)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        unique=True,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_lostpasswordhash",
            },
        ),
        migrations.CreateModel(
            name="NotificationSettingOption",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ("scope_type", models.CharField(max_length=32)),
                ("scope_identifier", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                (
                    "team_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Team", db_index=True, null=True, on_delete="CASCADE"
                    ),
                ),
                ("type", models.CharField(max_length=32)),
                ("value", models.CharField(max_length=32)),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_notificationsettingoption",
            },
        ),
        migrations.CreateModel(
            name="NotificationSettingProvider",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ("scope_type", models.CharField(max_length=32)),
                ("scope_identifier", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                (
                    "team_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Team", db_index=True, null=True, on_delete="CASCADE"
                    ),
                ),
                ("type", models.CharField(max_length=32)),
                ("value", models.CharField(max_length=32)),
                ("provider", models.CharField(max_length=32)),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_notificationsettingprovider",
            },
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=64)),
                ("slug", sentry.db.models.fields.slug.SentryOrgSlugField(unique=True)),
                ("status", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("default_role", models.CharField(default="member", max_length=32)),
                ("is_test", models.BooleanField(db_default=False, default=False)),
                (
                    "flags",
                    bitfield.models.BitField(
                        [
                            "allow_joinleave",
                            "enhanced_privacy",
                            "disable_shared_issues",
                            "early_adopter",
                            "require_2fa",
                            "disable_new_visibility_features",
                            "require_email_verification",
                            "codecov_access",
                            "disable_member_project_creation",
                            "prevent_superuser_access",
                            "disable_member_invite",
                        ],
                        default=1,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_organization",
                "indexes": [
                    sentry.db.models.indexes.IndexWithPostgresNameLimits(
                        django.db.models.functions.text.Upper("slug"),
                        name="sentry_organization_slug_upper_idx",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="NotificationAction",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "integration_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Integration",
                        blank=True,
                        db_index=True,
                        null=True,
                        on_delete="CASCADE",
                    ),
                ),
                (
                    "sentry_app_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.SentryApp",
                        blank=True,
                        db_index=True,
                        null=True,
                        on_delete="CASCADE",
                    ),
                ),
                ("type", models.SmallIntegerField()),
                ("target_type", models.SmallIntegerField()),
                ("target_identifier", models.TextField(null=True)),
                ("target_display", models.TextField(null=True)),
                ("trigger_type", models.SmallIntegerField()),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_notificationaction",
            },
        ),
        migrations.AddField(
            model_name="incident",
            name="organization",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
            ),
        ),
        migrations.CreateModel(
            name="GroupSearchViewStarred",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, on_delete="CASCADE"
                    ),
                ),
                ("position", models.PositiveSmallIntegerField()),
                (
                    "group_search_view",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.groupsearchview"
                    ),
                ),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_groupsearchviewstarred",
            },
        ),
        migrations.CreateModel(
            name="GroupSearchViewLastVisited",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, on_delete="CASCADE"
                    ),
                ),
                ("last_visited", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "group_search_view",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.groupsearchview"
                    ),
                ),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_groupsearchviewlastvisited",
            },
        ),
        migrations.AddField(
            model_name="groupsearchview",
            name="organization",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
            ),
        ),
        migrations.CreateModel(
            name="FeatureAdoption",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("feature_id", models.PositiveIntegerField()),
                ("date_completed", models.DateTimeField(default=django.utils.timezone.now)),
                ("complete", models.BooleanField(default=False)),
                ("applicable", models.BooleanField(default=True)),
                ("data", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_featureadoption",
            },
        ),
        migrations.CreateModel(
            name="ExternalIssue",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "integration_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Integration", db_index=True, on_delete="CASCADE"
                    ),
                ),
                ("key", models.CharField(max_length=256)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("title", models.TextField(null=True)),
                ("description", models.TextField(null=True)),
                ("metadata", sentry.db.models.fields.jsonfield.JSONField(null=True)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.organization",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_externalissue",
            },
        ),
        migrations.AddField(
            model_name="exporteddata",
            name="organization",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
            ),
        ),
        migrations.CreateModel(
            name="DiscoverSavedQuery",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "created_by_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, null=True, on_delete="SET_NULL"
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("query", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ("version", models.IntegerField(null=True)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                (
                    "visits",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(default=1, null=True),
                ),
                (
                    "last_visited",
                    models.DateTimeField(default=django.utils.timezone.now, null=True),
                ),
                ("is_homepage", models.BooleanField(blank=True, null=True)),
                (
                    "dataset",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_default=0, default=0
                    ),
                ),
                (
                    "dataset_source",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_default=0, default=0
                    ),
                ),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_discoversavedquery",
            },
        ),
        migrations.CreateModel(
            name="DataSecrecyWaiver",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ("access_start", models.DateTimeField(default=django.utils.timezone.now)),
                ("access_end", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "zendesk_tickets",
                    sentry.db.models.fields.array.ArrayField(default=list, null=True),
                ),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.organization",
                        unique=True,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_datasecrecywaiver",
            },
        ),
        migrations.CreateModel(
            name="DashboardTombstone",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "slug",
                    sentry.db.models.fields.slug.SentrySlugField(db_index=False, max_length=255),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_dashboardtombstone",
            },
        ),
        migrations.AddField(
            model_name="dashboard",
            name="organization",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
            ),
        ),
        migrations.CreateModel(
            name="CustomDynamicSamplingRule",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("is_active", models.BooleanField(default=True)),
                ("is_org_level", models.BooleanField(default=False)),
                ("rule_id", models.IntegerField(default=0)),
                ("condition", models.TextField()),
                ("sample_rate", models.FloatField(default=0.0)),
                ("start_date", models.DateTimeField(default=django.utils.timezone.now)),
                ("end_date", models.DateTimeField()),
                ("num_samples", models.IntegerField()),
                ("condition_hash", models.CharField(max_length=40)),
                ("query", models.TextField(null=True)),
                (
                    "created_by_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", blank=True, db_index=True, null=True, on_delete="CASCADE"
                    ),
                ),
                ("notification_sent", models.BooleanField(blank=True, null=True)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_customdynamicsamplingrule",
            },
        ),
        migrations.CreateModel(
            name="AuthProviderReplica",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "auth_provider_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.AuthProvider", db_index=True, on_delete="CASCADE", unique=True
                    ),
                ),
                ("provider", models.CharField(max_length=128)),
                ("config", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                (
                    "default_role",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=50),
                ),
                ("default_global_access", models.BooleanField(default=True)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("scim_enabled", models.BooleanField()),
                ("allow_unlinked", models.BooleanField()),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.organization",
                        unique=True,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_authproviderreplica",
            },
        ),
        migrations.AddField(
            model_name="alertrule",
            name="organization",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
            ),
        ),
        migrations.CreateModel(
            name="OrganizationAvatar",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("ident", models.CharField(db_index=True, max_length=32, unique=True)),
                (
                    "file_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True, unique=True),
                ),
                ("avatar_type", models.PositiveSmallIntegerField(default=0)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="avatar",
                        to="sentry.organization",
                        unique=True,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_organizationavatar",
            },
        ),
        migrations.CreateModel(
            name="OrganizationIntegration",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                (
                    "organization_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Organization", db_index=True, on_delete="CASCADE"
                    ),
                ),
                ("config", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                (
                    "default_auth_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_index=True, null=True
                    ),
                ),
                ("status", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ("grace_period_end", models.DateTimeField(blank=True, db_index=True, null=True)),
                (
                    "integration",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.integration"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_organizationintegration",
            },
        ),
        migrations.CreateModel(
            name="OrganizationMember",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", blank=True, db_index=True, null=True, on_delete="CASCADE"
                    ),
                ),
                ("email", models.EmailField(blank=True, max_length=75, null=True)),
                ("role", models.CharField(default="member", max_length=32)),
                (
                    "flags",
                    bitfield.models.BitField(
                        [
                            "sso:linked",
                            "sso:invalid",
                            "member-limit:restricted",
                            "idp:provisioned",
                            "idp:role-restricted",
                            "partnership:restricted",
                        ],
                        default=0,
                    ),
                ),
                ("token", models.CharField(blank=True, max_length=64, null=True, unique=True)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("token_expires_at", models.DateTimeField(default=None, null=True)),
                ("has_global_access", models.BooleanField(default=True)),
                (
                    "inviter_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", blank=True, db_index=True, null=True, on_delete="SET_NULL"
                    ),
                ),
                ("invite_status", models.PositiveSmallIntegerField(default=0, null=True)),
                (
                    "type",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        blank=True, default=50
                    ),
                ),
                ("user_is_active", models.BooleanField(db_default=True, default=True)),
                ("user_email", models.CharField(blank=True, max_length=75, null=True)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="member_set",
                        to="sentry.organization",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_organizationmember",
            },
        ),
        migrations.CreateModel(
            name="OrganizationMemberInvite",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                (
                    "inviter_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", blank=True, db_index=True, null=True, on_delete="SET_NULL"
                    ),
                ),
                ("invite_status", models.PositiveSmallIntegerField(default=0)),
                ("email", models.EmailField(max_length=75)),
                ("role", models.CharField(default="member", max_length=32)),
                ("organization_member_team_data", models.JSONField(default=list)),
                (
                    "token",
                    models.CharField(
                        default=sentry.models.organizationmemberinvite.generate_token,
                        max_length=64,
                        unique=True,
                    ),
                ),
                (
                    "token_expires_at",
                    models.DateTimeField(
                        default=sentry.models.organizationmemberinvite.default_expiration
                    ),
                ),
                ("sso_linked", models.BooleanField(default=False)),
                ("sso_invalid", models.BooleanField(default=False)),
                ("member_limit_restricted", models.BooleanField(default=False)),
                ("idp_provisioned", models.BooleanField(db_default=False, default=False)),
                ("idp_role_restricted", models.BooleanField(default=False)),
                ("partnership_restricted", models.BooleanField(default=False)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="invite_set",
                        to="sentry.organization",
                    ),
                ),
                (
                    "organization_member",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.organizationmember"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_organizationmemberinvite",
            },
        ),
        migrations.CreateModel(
            name="OrganizationMemberMapping",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Organization", db_index=True, on_delete="CASCADE"
                    ),
                ),
                (
                    "organizationmember_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(
                        db_index=True, null=True
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("role", models.CharField(default="member", max_length=32)),
                ("email", models.EmailField(blank=True, max_length=75, null=True)),
                ("invite_status", models.PositiveSmallIntegerField(default=0, null=True)),
                (
                    "inviter",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="inviter_orgmembermapping_set",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="orgmembermapping_set",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_organizationmembermapping",
            },
        ),
        migrations.CreateModel(
            name="OrganizationMemberTeamReplica",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "team_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Team", db_index=True, on_delete="CASCADE"
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Organization", db_index=True, on_delete="CASCADE"
                    ),
                ),
                (
                    "organizationmember_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                (
                    "organizationmemberteam_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                ("is_active", models.BooleanField()),
                ("role", models.CharField(blank=True, max_length=32, null=True)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "db_table": "sentry_organizationmember_teamsreplica",
                "unique_together": {("team_id", "organizationmember_id", "organization_id")},
            },
        ),
        migrations.CreateModel(
            name="OrganizationOption",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("key", models.CharField(max_length=64)),
                ("value", sentry.db.models.fields.picklefield.PickledObjectField(editable=False)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_organizationoptions",
            },
        ),
        migrations.CreateModel(
            name="OrganizationSlugReservation",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("slug", models.SlugField(unique=True)),
                (
                    "organization_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.organization", db_index=True, on_delete="CASCADE"
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(
                        db_index=True, null=True
                    ),
                ),
                ("region_name", models.CharField(max_length=48)),
                (
                    "reservation_type",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(default=0),
                ),
                (
                    "date_added",
                    models.DateTimeField(default=django.utils.timezone.now, editable=False),
                ),
            ],
            options={
                "db_table": "sentry_organizationslugreservation",
                "unique_together": {("organization_id", "reservation_type")},
            },
        ),
        migrations.CreateModel(
            name="OrgAuthToken",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Organization", db_index=True, on_delete="CASCADE"
                    ),
                ),
                ("token_hashed", models.TextField(unique=True)),
                ("token_last_characters", models.CharField(max_length=4, null=True)),
                ("name", models.CharField(max_length=255)),
                (
                    "scope_list",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(),
                        default=list,
                        size=None,
                        validators=[sentry.models.orgauthtoken.validate_scope_list],
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_last_used", models.DateTimeField(blank=True, null=True)),
                (
                    "project_last_used_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Project", blank=True, db_index=True, null=True, on_delete="SET_NULL"
                    ),
                ),
                ("date_deactivated", models.DateTimeField(blank=True, null=True)),
                (
                    "created_by",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_orgauthtoken",
            },
        ),
        migrations.CreateModel(
            name="PerfStringIndexer",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("string", models.CharField(max_length=200)),
                ("organization_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "last_seen",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("retention_days", models.IntegerField(default=90)),
                (
                    "use_case_id",
                    models.CharField(
                        db_default="performance", default="performance", max_length=120
                    ),
                ),
            ],
            options={
                "db_table": "sentry_perfstringindexer",
                "constraints": [
                    models.UniqueConstraint(
                        fields=("string", "organization_id", "use_case_id"),
                        name="perf_unique_org_string_usecase",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("slug", sentry.db.models.fields.slug.SentrySlugField(max_length=100, null=True)),
                ("name", models.CharField(max_length=200)),
                ("forced_color", models.CharField(blank=True, max_length=6, null=True)),
                ("public", models.BooleanField(default=False)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "status",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_index=True, default=0
                    ),
                ),
                ("first_event", models.DateTimeField(null=True)),
                ("external_id", models.CharField(max_length=256, null=True)),
                (
                    "flags",
                    bitfield.models.BitField(
                        [
                            "has_releases",
                            "has_issue_alerts_targeting",
                            "has_transactions",
                            "has_alert_filters",
                            "has_sessions",
                            "has_profiles",
                            "has_replays",
                            "has_feedbacks",
                            "has_new_feedbacks",
                            "spike_protection_error_currently_active",
                            "spike_protection_transaction_currently_active",
                            "spike_protection_attachment_currently_active",
                            "has_minified_stack_trace",
                            "has_cron_monitors",
                            "has_cron_checkins",
                            "has_sourcemaps",
                            "has_custom_metrics",
                            "has_high_priority_alerts",
                            "has_insights_http",
                            "has_insights_db",
                            "has_insights_assets",
                            "has_insights_app_start",
                            "has_insights_screen_load",
                            "has_insights_vitals",
                            "has_insights_caches",
                            "has_insights_queues",
                            "has_insights_llm_monitoring",
                            "has_flags",
                        ],
                        default=10,
                        null=True,
                    ),
                ),
                ("platform", models.CharField(max_length=64, null=True)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_project",
            },
        ),
        migrations.CreateModel(
            name="PlatformExternalIssue",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("service_type", models.CharField(max_length=64)),
                ("display_name", models.TextField()),
                ("web_url", models.URLField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        db_index=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.group",
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.project",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_platformexternalissue",
            },
        ),
        migrations.CreateModel(
            name="OrganizationOnboardingTask",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, null=True, on_delete="SET_NULL"
                    ),
                ),
                ("status", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("completion_seen", models.DateTimeField(null=True)),
                ("date_completed", models.DateTimeField(default=django.utils.timezone.now)),
                ("data", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ("task", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="sentry.project",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_organizationonboardingtask",
            },
        ),
        migrations.CreateModel(
            name="NotificationActionProject",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "action",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.notificationaction"
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.project"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_notificationactionproject",
            },
        ),
        migrations.AddField(
            model_name="notificationaction",
            name="projects",
            field=models.ManyToManyField(
                through="sentry.NotificationActionProject", to="sentry.project"
            ),
        ),
        migrations.CreateModel(
            name="IncidentProject",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "incident",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.incident"
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        db_index=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.project",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_incidentproject",
            },
        ),
        migrations.AddField(
            model_name="incident",
            name="projects",
            field=models.ManyToManyField(
                related_name="incidents", through="sentry.IncidentProject", to="sentry.project"
            ),
        ),
        migrations.CreateModel(
            name="GroupTombstone",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                (
                    "previous_group_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(unique=True),
                ),
                (
                    "level",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        blank=True, default=40
                    ),
                ),
                ("message", models.TextField()),
                ("culprit", models.CharField(blank=True, max_length=200, null=True)),
                (
                    "data",
                    sentry.db.models.fields.gzippeddict.GzippedDictField(blank=True, null=True),
                ),
                (
                    "actor_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.project"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_grouptombstone",
            },
        ),
        migrations.CreateModel(
            name="GroupShare",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "uuid",
                    models.CharField(
                        default=sentry.models.groupshare.default_uuid, max_length=32, unique=True
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, null=True, on_delete="CASCADE"
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.group", unique=True
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.project"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_groupshare",
            },
        ),
        migrations.CreateModel(
            name="GroupSeen",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=False, on_delete="CASCADE"
                    ),
                ),
                ("last_seen", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.group"
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.project"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_groupseen",
            },
        ),
        migrations.CreateModel(
            name="GroupSearchViewProject",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                (
                    "group_search_view",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.groupsearchview"
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.project"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_groupsearchviewproject",
            },
        ),
        migrations.AddField(
            model_name="groupsearchview",
            name="projects",
            field=models.ManyToManyField(
                through="sentry.GroupSearchViewProject", to="sentry.project"
            ),
        ),
        migrations.CreateModel(
            name="GroupOpenPeriod",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, null=True, on_delete="SET_NULL"
                    ),
                ),
                ("date_started", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_ended", models.DateTimeField(null=True)),
                ("data", models.JSONField(default=dict)),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.group"
                    ),
                ),
                (
                    "resolution_activity",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="sentry.activity",
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.project"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_groupopenperiod",
            },
        ),
        migrations.CreateModel(
            name="GroupLink",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "linked_type",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=1),
                ),
                ("linked_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                (
                    "relationship",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=2),
                ),
                ("data", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                (
                    "datetime",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        db_index=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.group",
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.project",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_grouplink",
            },
        ),
        migrations.CreateModel(
            name="GroupInbox",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("reason", models.PositiveSmallIntegerField(default=0)),
                ("reason_details", sentry.db.models.fields.jsonfield.JSONField(null=True)),
                (
                    "date_added",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.group",
                        unique=True,
                    ),
                ),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.organization",
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.project",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_groupinbox",
            },
        ),
        migrations.AddField(
            model_name="grouphash",
            name="project",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE, to="sentry.project"
            ),
        ),
        migrations.CreateModel(
            name="GroupEmailThread",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("email", models.EmailField(max_length=75)),
                ("msgid", models.CharField(max_length=100)),
                ("date", models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="groupemail_set",
                        to="sentry.group",
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="groupemail_set",
                        to="sentry.project",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_groupemailthread",
            },
        ),
        migrations.CreateModel(
            name="GroupBookmark",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, on_delete="CASCADE"
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bookmark_set",
                        to="sentry.group",
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bookmark_set",
                        to="sentry.project",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_groupbookmark",
            },
        ),
        migrations.AddField(
            model_name="group",
            name="project",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="sentry.project"
            ),
        ),
        migrations.CreateModel(
            name="EnvironmentProject",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("is_hidden", models.BooleanField(null=True)),
                (
                    "environment",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.environment"
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.project"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_environmentproject",
            },
        ),
        migrations.AddField(
            model_name="environment",
            name="projects",
            field=models.ManyToManyField(through="sentry.EnvironmentProject", to="sentry.project"),
        ),
        migrations.CreateModel(
            name="DiscoverSavedQueryProject",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "discover_saved_query",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.discoversavedquery"
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.project"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_discoversavedqueryproject",
            },
        ),
        migrations.AddField(
            model_name="discoversavedquery",
            name="projects",
            field=models.ManyToManyField(
                through="sentry.DiscoverSavedQueryProject", to="sentry.project"
            ),
        ),
        migrations.CreateModel(
            name="DashboardProject",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "dashboard",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.dashboard"
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.project"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_dashboardproject",
            },
        ),
        migrations.AddField(
            model_name="dashboard",
            name="projects",
            field=models.ManyToManyField(through="sentry.DashboardProject", to="sentry.project"),
        ),
        migrations.CreateModel(
            name="CustomDynamicSamplingRuleProject",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "custom_dynamic_sampling_rule",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.customdynamicsamplingrule",
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.project"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_customdynamicsamplingruleproject",
            },
        ),
        migrations.AddField(
            model_name="customdynamicsamplingrule",
            name="projects",
            field=models.ManyToManyField(
                related_name="custom_dynamic_sampling_rules",
                through="sentry.CustomDynamicSamplingRuleProject",
                to="sentry.project",
            ),
        ),
        migrations.CreateModel(
            name="Counter",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("value", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.project",
                        unique=True,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_projectcounter",
            },
        ),
        migrations.CreateModel(
            name="AlertRuleProjects",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "alert_rule",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_index=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.alertrule",
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.project"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_alertruleprojects",
            },
        ),
        migrations.AddField(
            model_name="alertrule",
            name="projects",
            field=models.ManyToManyField(
                related_name="alert_rule_projects",
                through="sentry.AlertRuleProjects",
                to="sentry.project",
            ),
        ),
        migrations.AddField(
            model_name="activity",
            name="project",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="sentry.project"
            ),
        ),
        migrations.CreateModel(
            name="ProjectArtifactBundle",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                ("project_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "artifact_bundle",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.artifactbundle"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_projectartifactbundle",
            },
        ),
        migrations.CreateModel(
            name="ProjectBookmark",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, on_delete="CASCADE"
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.project",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_projectbookmark",
            },
        ),
        migrations.CreateModel(
            name="ProjectDebugFile",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("checksum", models.CharField(db_index=True, max_length=40, null=True)),
                ("object_name", models.TextField()),
                ("cpu_name", models.CharField(max_length=40)),
                (
                    "project_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(
                        db_index=True, null=True
                    ),
                ),
                ("debug_id", models.CharField(db_column="uuid", max_length=64)),
                ("code_id", models.CharField(max_length=64, null=True)),
                ("data", sentry.db.models.fields.jsonfield.JSONField(null=True)),
                (
                    "date_accessed",
                    models.DateTimeField(
                        db_default=django.db.models.functions.datetime.Now(),
                        default=django.utils.timezone.now,
                    ),
                ),
                (
                    "file",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.file"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_projectdsymfile",
            },
        ),
        migrations.CreateModel(
            name="ProguardArtifactRelease",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("organization_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("project_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("release_name", models.CharField(max_length=250)),
                ("proguard_uuid", models.UUIDField(db_index=True)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "project_debug_file",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.projectdebugfile"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_proguardartifactrelease",
            },
        ),
        migrations.CreateModel(
            name="ProjectKey",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("label", models.CharField(blank=True, max_length=64, null=True)),
                ("public_key", models.CharField(max_length=32, null=True, unique=True)),
                ("secret_key", models.CharField(max_length=32, null=True, unique=True)),
                ("roles", bitfield.models.BitField(["store", "api"], default=1)),
                (
                    "status",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_index=True, default=0
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                (
                    "rate_limit_count",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
                ),
                (
                    "rate_limit_window",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
                ),
                ("data", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ("use_case", models.CharField(db_default="user", default="user", max_length=32)),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="key_set",
                        to="sentry.project",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_projectkey",
            },
        ),
        migrations.CreateModel(
            name="ProjectOption",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("key", models.CharField(max_length=64)),
                ("value", sentry.db.models.fields.picklefield.PickledObjectField(editable=False)),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.project"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_projectoptions",
            },
        ),
        migrations.CreateModel(
            name="ProjectOwnership",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("raw", models.TextField(null=True)),
                ("schema", sentry.db.models.fields.jsonfield.JSONField(null=True)),
                ("fallthrough", models.BooleanField(default=True)),
                ("auto_assignment", models.BooleanField(default=True)),
                ("date_created", models.DateTimeField(default=django.utils.timezone.now)),
                ("last_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("is_active", models.BooleanField(default=True)),
                ("codeowners_auto_sync", models.BooleanField(default=True, null=True)),
                (
                    "suspect_committer_auto_assignment",
                    models.BooleanField(db_default=False, default=False),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.project",
                        unique=True,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_projectownership",
            },
        ),
        migrations.CreateModel(
            name="ProjectPlatform",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("project_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("platform", models.CharField(max_length=64)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("last_seen", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "db_table": "sentry_projectplatform",
                "unique_together": {("project_id", "platform")},
            },
        ),
        migrations.CreateModel(
            name="ProjectRedirect",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("redirect_slug", models.SlugField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.project"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_projectredirect",
            },
        ),
        migrations.CreateModel(
            name="ProjectSDK",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("event_type", sentry.db.models.fields.bounded.BoundedIntegerField()),
                ("sdk_name", models.CharField()),
                ("sdk_version", models.CharField()),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.project"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ProjectTemplate",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ("name", models.CharField(max_length=200)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_projecttemplate",
            },
        ),
        migrations.AddField(
            model_name="project",
            name="template",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE, to="sentry.projecttemplate"
            ),
        ),
        migrations.CreateModel(
            name="ProjectTemplateOption",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("key", models.CharField(max_length=64)),
                ("value", sentry.db.models.fields.picklefield.PickledObjectField(editable=False)),
                (
                    "project_template",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="options",
                        to="sentry.projecttemplate",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_projecttemplateoption",
            },
        ),
        migrations.CreateModel(
            name="ProjectTransactionThreshold",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ("threshold", models.IntegerField()),
                ("metric", models.PositiveSmallIntegerField(default=1)),
                (
                    "edited_by_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, null=True, on_delete="SET_NULL"
                    ),
                ),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.project",
                        unique=True,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_projecttransactionthreshold",
            },
        ),
        migrations.CreateModel(
            name="ProjectTransactionThresholdOverride",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ("transaction", models.CharField(max_length=200)),
                ("threshold", models.IntegerField()),
                ("metric", models.PositiveSmallIntegerField(default=1)),
                (
                    "edited_by_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, null=True, on_delete="SET_NULL"
                    ),
                ),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.project",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_projecttransactionthresholdoverride",
            },
        ),
        migrations.CreateModel(
            name="PromptsActivity",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                (
                    "project_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, on_delete="CASCADE"
                    ),
                ),
                ("feature", models.CharField(max_length=64)),
                ("data", sentry.db.models.fields.jsonfield.JSONField(default={})),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "db_table": "sentry_promptsactivity",
                "unique_together": {("user_id", "feature", "organization_id", "project_id")},
            },
        ),
        migrations.CreateModel(
            name="PullRequest",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                ("repository_id", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("key", models.CharField(max_length=64)),
                (
                    "date_added",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("title", models.TextField(null=True)),
                ("message", models.TextField(null=True)),
                ("merge_commit_sha", models.CharField(db_index=True, max_length=64, null=True)),
                (
                    "author",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.commitauthor",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_pull_request",
            },
        ),
        migrations.CreateModel(
            name="PullRequestComment",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("external_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("created_at", models.DateTimeField()),
                ("updated_at", models.DateTimeField()),
                (
                    "group_ids",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=sentry.db.models.fields.bounded.BoundedBigIntegerField(),
                        size=None,
                    ),
                ),
                ("reactions", sentry.db.models.fields.jsonfield.JSONField(null=True)),
                (
                    "comment_type",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_default=0, default=0
                    ),
                ),
                (
                    "pull_request",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.pullrequest"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_pullrequest_comment",
            },
        ),
        migrations.CreateModel(
            name="PullRequestCommit",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "commit",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.commit"
                    ),
                ),
                (
                    "pull_request",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.pullrequest"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_pullrequest_commit",
            },
        ),
        migrations.CreateModel(
            name="QuerySubscription",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("type", models.TextField()),
                ("status", models.SmallIntegerField(db_index=True, default=0)),
                ("subscription_id", models.TextField(null=True, unique=True)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "date_updated",
                    models.DateTimeField(default=django.utils.timezone.now, null=True),
                ),
                ("query_extra", models.TextField(null=True)),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.project",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_querysubscription",
            },
        ),
        migrations.AddField(
            model_name="incident",
            name="subscription",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="sentry.querysubscription",
            ),
        ),
        migrations.CreateModel(
            name="RecentSearch",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=False, on_delete="CASCADE"
                    ),
                ),
                ("type", models.PositiveSmallIntegerField()),
                ("query", models.TextField()),
                ("query_hash", models.CharField(max_length=32)),
                ("last_seen", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_recentsearch",
            },
        ),
        migrations.CreateModel(
            name="RegionImportChunk",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                (
                    "import_uuid",
                    sentry.db.models.fields.uuid.UUIDField(db_index=True, max_length=32),
                ),
                ("model", models.CharField(db_index=True, max_length=64)),
                ("min_ordinal", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("max_ordinal", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("min_source_pk", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("max_source_pk", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                (
                    "min_inserted_pk",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
                ),
                (
                    "max_inserted_pk",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
                ),
                ("inserted_map", models.JSONField(default=dict)),
                ("existing_map", models.JSONField(default=dict)),
                ("overwrite_map", models.JSONField(default=dict)),
                ("inserted_identifiers", models.JSONField(default=dict)),
            ],
            options={
                "db_table": "sentry_regionimportchunk",
                "unique_together": {("import_uuid", "model", "min_ordinal")},
            },
        ),
        migrations.CreateModel(
            name="RegionOutbox",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("shard_scope", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("shard_identifier", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("category", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("object_identifier", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("payload", sentry.db.models.fields.jsonfield.JSONField(null=True)),
                ("scheduled_from", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "scheduled_for",
                    models.DateTimeField(
                        default=datetime.datetime(2016, 8, 1, 0, 0, tzinfo=datetime.UTC)
                    ),
                ),
                (
                    "date_added",
                    models.DateTimeField(
                        db_default=django.db.models.functions.datetime.Now(),
                        default=django.utils.timezone.now,
                        editable=False,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_regionoutbox",
                "indexes": [
                    models.Index(
                        fields=["shard_scope", "shard_identifier", "category", "object_identifier"],
                        name="sentry_regi_shard_s_bfff84_idx",
                    ),
                    models.Index(
                        fields=["shard_scope", "shard_identifier", "scheduled_for"],
                        name="sentry_regi_shard_s_cd9995_idx",
                    ),
                    models.Index(
                        fields=["shard_scope", "shard_identifier", "id"],
                        name="sentry_regi_shard_s_e7412f_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="RegionScheduledDeletion",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "guid",
                    models.CharField(
                        default=sentry.deletions.models.scheduleddeletion.default_guid,
                        max_length=32,
                        unique=True,
                    ),
                ),
                ("app_label", models.CharField(max_length=64)),
                ("model_name", models.CharField(max_length=64)),
                ("object_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "date_scheduled",
                    models.DateTimeField(
                        default=sentry.deletions.models.scheduleddeletion.default_date_schedule
                    ),
                ),
                ("actor_id", sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ("data", sentry.db.models.fields.jsonfield.JSONField(default={})),
                ("in_progress", models.BooleanField(default=False)),
            ],
            options={
                "db_table": "sentry_regionscheduleddeletion",
                "unique_together": {("app_label", "model_name", "object_id")},
            },
        ),
        migrations.CreateModel(
            name="RegionTombstone",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("table_name", models.CharField(max_length=48)),
                ("object_identifier", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "db_table": "sentry_regiontombstone",
                "indexes": [
                    models.Index(
                        fields=["table_name", "object_identifier"],
                        name="sentry_regi_table_n_cd667a_idx",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="RegressionGroup",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_regressed", models.DateTimeField()),
                ("date_resolved", models.DateTimeField(null=True)),
                ("version", models.IntegerField()),
                ("active", models.BooleanField(default=True)),
                (
                    "project_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                ("type", sentry.db.models.fields.bounded.BoundedIntegerField()),
                ("fingerprint", models.CharField(max_length=64)),
                ("baseline", models.FloatField()),
                ("regressed", models.FloatField()),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["type", "project_id", "fingerprint", "active"],
                        name="sentry_regr_type_3a29e7_idx",
                    )
                ],
                "unique_together": {("type", "project_id", "fingerprint", "version")},
            },
        ),
        migrations.CreateModel(
            name="RelayUsage",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("relay_id", models.CharField(max_length=64)),
                ("version", models.CharField(default="0.0.1", max_length=32)),
                ("first_seen", models.DateTimeField(default=django.utils.timezone.now)),
                ("last_seen", models.DateTimeField(default=django.utils.timezone.now)),
                ("public_key", models.CharField(db_index=True, max_length=200, null=True)),
            ],
            options={
                "db_table": "sentry_relayusage",
                "unique_together": {("relay_id", "version")},
            },
            bases=(sentry.backup.mixins.OverwritableConfigMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Release",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "status",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        default=0, null=True
                    ),
                ),
                ("version", models.CharField(max_length=250)),
                ("ref", models.CharField(blank=True, max_length=250, null=True)),
                ("url", models.URLField(blank=True, null=True)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_started", models.DateTimeField(blank=True, null=True)),
                ("date_released", models.DateTimeField(blank=True, null=True)),
                ("data", sentry.db.models.fields.jsonfield.JSONField(default={})),
                (
                    "owner_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", blank=True, db_index=True, null=True, on_delete="SET_NULL"
                    ),
                ),
                (
                    "commit_count",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        default=0, null=True
                    ),
                ),
                (
                    "last_commit_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
                ),
                ("authors", sentry.db.models.fields.array.ArrayField(null=True)),
                (
                    "total_deploys",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        default=0, null=True
                    ),
                ),
                (
                    "last_deploy_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
                ),
                ("package", models.TextField(null=True)),
                ("major", models.BigIntegerField(null=True)),
                ("minor", models.BigIntegerField(null=True)),
                ("patch", models.BigIntegerField(null=True)),
                ("revision", models.BigIntegerField(null=True)),
                ("prerelease", models.TextField(null=True)),
                ("build_code", models.TextField(null=True)),
                ("build_number", models.BigIntegerField(null=True)),
                ("user_agent", models.TextField(null=True)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_release",
            },
        ),
        migrations.CreateModel(
            name="GroupResolution",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "current_release_version",
                    models.CharField(blank=True, max_length=250, null=True),
                ),
                ("type", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                (
                    "actor_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
                ),
                (
                    "datetime",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("status", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.group", unique=True
                    ),
                ),
                (
                    "release",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.release"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_groupresolution",
            },
        ),
        migrations.CreateModel(
            name="GroupEnvironment",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "first_seen",
                    models.DateTimeField(
                        db_index=True, default=django.utils.timezone.now, null=True
                    ),
                ),
                (
                    "environment",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.environment",
                    ),
                ),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.group",
                    ),
                ),
                (
                    "first_release",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="sentry.release",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_groupenvironment",
            },
        ),
        migrations.AddField(
            model_name="group",
            name="first_release",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                null=True, on_delete=django.db.models.deletion.PROTECT, to="sentry.release"
            ),
        ),
        migrations.CreateModel(
            name="Distribution",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                ("name", models.CharField(max_length=64)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "release",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.release"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_distribution",
            },
        ),
        migrations.CreateModel(
            name="Deploy",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                (
                    "environment_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True),
                ),
                (
                    "date_finished",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("date_started", models.DateTimeField(blank=True, null=True)),
                ("name", models.CharField(blank=True, max_length=64, null=True)),
                ("url", models.URLField(blank=True, null=True)),
                ("notified", models.BooleanField(db_index=True, default=False, null=True)),
                (
                    "release",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.release"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_deploy",
            },
        ),
        migrations.CreateModel(
            name="ReleaseActivity",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("type", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("data", models.JSONField(default=dict)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "release",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.release"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_releaseactivity",
            },
        ),
        migrations.CreateModel(
            name="ReleaseArtifactBundle",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                ("release_name", models.CharField(max_length=250)),
                ("dist_name", models.CharField(default="", max_length=64)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "artifact_bundle",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.artifactbundle"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_releaseartifactbundle",
            },
        ),
        migrations.CreateModel(
            name="ReleaseCommit",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                ("project_id", sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ("order", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                (
                    "commit",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.commit"
                    ),
                ),
                (
                    "release",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.release"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_releasecommit",
            },
        ),
        migrations.CreateModel(
            name="ReleaseEnvironment",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("project_id", sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ("first_seen", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "last_seen",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                (
                    "environment",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.environment",
                    ),
                ),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.organization",
                    ),
                ),
                (
                    "release",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.release",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_environmentrelease",
            },
        ),
        migrations.CreateModel(
            name="ReleaseFile",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                ("project_id", sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                (
                    "release_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                ("ident", models.CharField(max_length=40)),
                ("name", models.TextField()),
                (
                    "dist_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(
                        db_index=True, null=True
                    ),
                ),
                (
                    "artifact_count",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        default=1, null=True
                    ),
                ),
                (
                    "file",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.file"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_releasefile",
            },
        ),
        migrations.CreateModel(
            name="ReleaseHeadCommit",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                ("repository_id", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                (
                    "commit",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.commit"
                    ),
                ),
                (
                    "release",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.release"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_releaseheadcommit",
            },
        ),
        migrations.CreateModel(
            name="ReleaseProject",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "new_groups",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        default=0, null=True
                    ),
                ),
                ("adopted", models.DateTimeField(blank=True, null=True)),
                ("unadopted", models.DateTimeField(blank=True, null=True)),
                ("first_seen_transaction", models.DateTimeField(blank=True, null=True)),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.project"
                    ),
                ),
                (
                    "release",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.release"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_release_project",
            },
        ),
        migrations.AddField(
            model_name="release",
            name="projects",
            field=models.ManyToManyField(
                related_name="releases", through="sentry.ReleaseProject", to="sentry.project"
            ),
        ),
        migrations.CreateModel(
            name="ReleaseProjectEnvironment",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "new_issues_count",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0),
                ),
                ("first_seen", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "last_seen",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                (
                    "last_deploy_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_index=True, null=True
                    ),
                ),
                ("adopted", models.DateTimeField(blank=True, null=True)),
                ("unadopted", models.DateTimeField(blank=True, null=True)),
                (
                    "environment",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.environment"
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.project"
                    ),
                ),
                (
                    "release",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.release"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_releaseprojectenvironment",
            },
        ),
        migrations.CreateModel(
            name="ReleaseThreshold",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("threshold_type", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("trigger_type", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("value", models.IntegerField()),
                ("window_in_seconds", models.PositiveIntegerField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "environment",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.environment",
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="release_thresholds",
                        to="sentry.project",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Relocation",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ("creator_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("owner_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                (
                    "uuid",
                    sentry.db.models.fields.uuid.UUIDField(
                        db_index=True,
                        default=sentry.relocation.models.relocation.default_guid,
                        max_length=32,
                        unique=True,
                    ),
                ),
                ("step", models.SmallIntegerField(default=None)),
                (
                    "provenance",
                    models.SmallIntegerField(
                        db_default=sentry.relocation.models.relocation.Relocation.Provenance[
                            "SELF_HOSTED"
                        ],
                        default=sentry.relocation.models.relocation.Relocation.Provenance[
                            "SELF_HOSTED"
                        ],
                    ),
                ),
                ("status", models.SmallIntegerField(default=0)),
                ("scheduled_pause_at_step", models.SmallIntegerField(default=None, null=True)),
                ("scheduled_cancel_at_step", models.SmallIntegerField(default=None, null=True)),
                ("want_org_slugs", models.JSONField(default=list)),
                ("want_usernames", models.JSONField(null=True)),
                ("latest_notified", models.SmallIntegerField(default=None, null=True)),
                ("latest_unclaimed_emails_sent_at", models.DateTimeField(default=None, null=True)),
                ("latest_task", models.CharField(default="", max_length=64)),
                ("latest_task_attempts", models.SmallIntegerField(default=0)),
                ("failure_reason", models.CharField(default=None, max_length=256, null=True)),
            ],
            options={
                "db_table": "sentry_relocation",
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(
                            ("scheduled_pause_at_step__gt", models.F("step")),
                            ("scheduled_pause_at_step__isnull", True),
                            _connector="OR",
                        ),
                        name="scheduled_pause_at_step_greater_than_current_step",
                    ),
                    models.CheckConstraint(
                        condition=models.Q(
                            ("scheduled_cancel_at_step__gt", models.F("step")),
                            ("scheduled_cancel_at_step__isnull", True),
                            _connector="OR",
                        ),
                        name="scheduled_cancel_at_step_greater_than_current_step",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="RelocationFile",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ("kind", models.SmallIntegerField()),
                (
                    "file",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.file"
                    ),
                ),
                (
                    "relocation",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.relocation"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_relocationfile",
            },
        ),
        migrations.CreateModel(
            name="RelocationValidation",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ("status", models.SmallIntegerField(default=0)),
                ("attempts", models.SmallIntegerField(default=0)),
                (
                    "relocation",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.relocation"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_relocationvalidation",
            },
        ),
        migrations.CreateModel(
            name="RelocationValidationAttempt",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ("status", models.SmallIntegerField(default=0)),
                (
                    "build_id",
                    sentry.db.models.fields.uuid.UUIDField(
                        db_index=True, max_length=32, unique=True
                    ),
                ),
                (
                    "relocation",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.relocation"
                    ),
                ),
                (
                    "relocation_validation",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.relocationvalidation",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_relocationvalidationattempt",
            },
        ),
        migrations.CreateModel(
            name="Repository",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                ("name", models.CharField(max_length=200)),
                ("url", models.URLField(null=True)),
                ("provider", models.CharField(max_length=64, null=True)),
                ("external_id", models.CharField(max_length=64, null=True)),
                ("config", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                (
                    "status",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_index=True, default=0
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "integration_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_index=True, null=True
                    ),
                ),
                ("languages", sentry.db.models.fields.array.ArrayField(null=True)),
            ],
            options={
                "db_table": "sentry_repository",
                "unique_together": {("organization_id", "provider", "external_id")},
            },
        ),
        migrations.CreateModel(
            name="RepositoryProjectPathConfig",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                (
                    "organization_integration_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.OrganizationIntegration", db_index=True, on_delete="CASCADE"
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                ("integration_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("stack_root", models.TextField()),
                ("source_root", models.TextField()),
                ("default_branch", models.TextField(null=True)),
                ("automatically_generated", models.BooleanField(db_default=False, default=False)),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.project",
                    ),
                ),
                (
                    "repository",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.repository"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_repositoryprojectpathconfig",
            },
        ),
        migrations.CreateModel(
            name="ProjectCodeOwners",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("raw", models.TextField()),
                ("schema", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.project",
                    ),
                ),
                (
                    "repository_project_path_config",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="sentry.repositoryprojectpathconfig",
                        unique=True,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_projectcodeowners",
            },
        ),
        migrations.CreateModel(
            name="RollbackOrganization",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                ("data", models.JSONField(default=None, null=True)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_rollbackorganization",
            },
        ),
        migrations.CreateModel(
            name="RollbackUser",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, on_delete="CASCADE"
                    ),
                ),
                ("uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("share_uuid", models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ("data", models.JSONField(default=None, null=True)),
                ("share_data", models.JSONField(default=None, null=True)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_rollbackuser",
            },
        ),
        migrations.CreateModel(
            name="Rule",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "environment_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
                ),
                ("label", models.CharField(max_length=256)),
                ("data", sentry.db.models.fields.gzippeddict.GzippedDictField()),
                (
                    "status",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_index=True, default=0
                    ),
                ),
                (
                    "source",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_default=sentry.models.rule.RuleSource["ISSUE"],
                        default=sentry.models.rule.RuleSource["ISSUE"],
                    ),
                ),
                (
                    "owner_user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, null=True, on_delete="SET_NULL"
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.project"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_rule",
            },
        ),
        migrations.CreateModel(
            name="NeglectedRule",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("disable_date", models.DateTimeField()),
                ("opted_out", models.BooleanField(default=False)),
                ("sent_initial_email_date", models.DateTimeField(null=True)),
                ("sent_final_email_date", models.DateTimeField(null=True)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
                    ),
                ),
                (
                    "rule",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.rule"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="GroupRuleStatus",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("status", models.PositiveSmallIntegerField(default=0)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("last_active", models.DateTimeField(null=True)),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.group"
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.project"
                    ),
                ),
                (
                    "rule",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.rule"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_grouprulestatus",
            },
        ),
        migrations.CreateModel(
            name="RuleActivity",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, null=True, on_delete="SET_NULL"
                    ),
                ),
                ("type", models.IntegerField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "rule",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.rule"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_ruleactivity",
            },
        ),
        migrations.CreateModel(
            name="RuleFireHistory",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("event_id", sentry.db.models.fields.text.CharField(max_length=32, null=True)),
                (
                    "date_added",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("notification_uuid", models.UUIDField(null=True)),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.group",
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.project",
                    ),
                ),
                (
                    "rule",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.rule"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_rulefirehistory",
            },
        ),
        migrations.CreateModel(
            name="NotificationMessage",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("error_details", sentry.db.models.fields.jsonfield.JSONField(null=True)),
                ("error_code", models.IntegerField(db_index=True, null=True)),
                ("message_identifier", sentry.db.models.fields.text.CharField(null=True)),
                (
                    "rule_action_uuid",
                    sentry.db.models.fields.text.CharField(db_index=True, null=True),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("open_period_start", models.DateTimeField(null=True)),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="sentry.group"
                    ),
                ),
                (
                    "incident",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="sentry.incident"
                    ),
                ),
                (
                    "parent_notification_message",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.notificationmessage",
                    ),
                ),
                (
                    "trigger_action",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.alertruletriggeraction",
                    ),
                ),
                (
                    "rule_fire_history",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.rulefirehistory",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_notificationmessage",
            },
        ),
        migrations.CreateModel(
            name="RuleSnooze",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, null=True, on_delete="CASCADE"
                    ),
                ),
                (
                    "owner_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, null=True, on_delete="SET_NULL"
                    ),
                ),
                ("until", models.DateTimeField(db_index=True, null=True)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "alert_rule",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.alertrule",
                    ),
                ),
                (
                    "rule",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="sentry.rule"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_rulesnooze",
            },
        ),
        migrations.CreateModel(
            name="SavedSearch",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("type", models.PositiveSmallIntegerField(default=0)),
                ("name", models.CharField(max_length=128)),
                ("query", models.TextField()),
                (
                    "sort",
                    sentry.db.models.fields.text.CharField(
                        default=sentry.models.savedsearch.SortOptions["DATE"],
                        max_length=16,
                        null=True,
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("is_global", models.BooleanField(db_index=True, default=False, null=True)),
                (
                    "owner_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, null=True, on_delete="CASCADE"
                    ),
                ),
                ("visibility", models.CharField(default="owner", max_length=16)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.organization",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_savedsearch",
            },
        ),
        migrations.CreateModel(
            name="ScheduledDeletion",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "guid",
                    models.CharField(
                        default=sentry.deletions.models.scheduleddeletion.default_guid,
                        max_length=32,
                        unique=True,
                    ),
                ),
                ("app_label", models.CharField(max_length=64)),
                ("model_name", models.CharField(max_length=64)),
                ("object_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "date_scheduled",
                    models.DateTimeField(
                        default=sentry.deletions.models.scheduleddeletion.default_date_schedule
                    ),
                ),
                ("actor_id", sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ("data", sentry.db.models.fields.jsonfield.JSONField(default={})),
                ("in_progress", models.BooleanField(default=False)),
            ],
            options={
                "db_table": "sentry_scheduleddeletion",
                "unique_together": {("app_label", "model_name", "object_id")},
            },
        ),
        migrations.CreateModel(
            name="SentryApp",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "scopes",
                    bitfield.models.BitField(
                        [
                            "project:read",
                            "project:write",
                            "project:admin",
                            "project:releases",
                            "team:read",
                            "team:write",
                            "team:admin",
                            "event:read",
                            "event:write",
                            "event:admin",
                            "org:read",
                            "org:write",
                            "org:admin",
                            "member:read",
                            "member:write",
                            "member:admin",
                            "org:integrations",
                            "alerts:read",
                            "alerts:write",
                            "member:invite",
                        ],
                        default=None,
                    ),
                ),
                (
                    "scope_list",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), default=list, size=None
                    ),
                ),
                ("date_deleted", models.DateTimeField(blank=True, null=True)),
                (
                    "owner_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Organization", db_index=True, on_delete="CASCADE"
                    ),
                ),
                ("name", models.TextField()),
                (
                    "slug",
                    sentry.db.models.fields.slug.SentrySlugField(
                        db_index=False, max_length=64, unique=True
                    ),
                ),
                ("author", models.TextField(null=True)),
                (
                    "status",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_index=True, default=0
                    ),
                ),
                (
                    "uuid",
                    models.CharField(
                        default=sentry.sentry_apps.models.sentry_app.default_uuid,
                        max_length=64,
                        unique=True,
                    ),
                ),
                ("redirect_url", models.URLField(null=True)),
                ("webhook_url", models.URLField(max_length=512, null=True)),
                ("is_alertable", models.BooleanField(default=False)),
                ("verify_install", models.BooleanField(default=True)),
                ("events", sentry.db.models.fields.array.ArrayField(null=True)),
                ("overview", models.TextField(null=True)),
                ("schema", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_published", models.DateTimeField(blank=True, null=True)),
                ("creator_label", models.TextField(null=True)),
                ("popularity", models.PositiveSmallIntegerField(default=1, null=True)),
                ("metadata", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                (
                    "application",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sentry_app",
                        to="sentry.apiapplication",
                    ),
                ),
                (
                    "creator_user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "proxy_user",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sentry_app",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_sentryapp",
            },
        ),
        migrations.CreateModel(
            name="SentryAppAvatar",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("ident", models.CharField(db_index=True, max_length=32, unique=True)),
                (
                    "control_file_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True, unique=True),
                ),
                ("avatar_type", models.PositiveSmallIntegerField(default=0)),
                ("color", models.BooleanField(default=False)),
                (
                    "sentry_app",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="avatar",
                        to="sentry.sentryapp",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_sentryappavatar",
            },
        ),
        migrations.CreateModel(
            name="SentryAppComponent",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "uuid",
                    sentry.db.models.fields.uuid.UUIDField(
                        editable=False, max_length=32, unique=True
                    ),
                ),
                ("type", models.CharField(max_length=64)),
                ("schema", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                (
                    "sentry_app",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="components",
                        to="sentry.sentryapp",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_sentryappcomponent",
            },
        ),
        migrations.CreateModel(
            name="SentryAppInstallation",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_deleted", models.DateTimeField(blank=True, null=True)),
                (
                    "organization_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Organization", db_index=True, on_delete="CASCADE"
                    ),
                ),
                (
                    "uuid",
                    models.CharField(
                        default=sentry.sentry_apps.models.sentry_app_installation.default_uuid,
                        max_length=64,
                    ),
                ),
                (
                    "status",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_index=True, default=0
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "api_grant",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sentry_app_installation",
                        to="sentry.apigrant",
                    ),
                ),
                (
                    "api_token",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sentry_app_installation",
                        to="sentry.apitoken",
                    ),
                ),
                (
                    "sentry_app",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="installations",
                        to="sentry.sentryapp",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_sentryappinstallation",
            },
        ),
        migrations.CreateModel(
            name="SentryAppInstallationForProvider",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                (
                    "organization_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Organization", db_index=True, on_delete="CASCADE"
                    ),
                ),
                ("provider", models.CharField(max_length=64)),
                (
                    "sentry_app_installation",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.sentryappinstallation",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_sentryappinstallationforprovider",
            },
        ),
        migrations.CreateModel(
            name="SentryAppInstallationToken",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "api_token",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.apitoken"
                    ),
                ),
                (
                    "sentry_app_installation",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.sentryappinstallation",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_sentryappinstallationtoken",
            },
        ),
        migrations.CreateModel(
            name="ServiceHookProject",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "project_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                (
                    "service_hook",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.servicehook"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_servicehookproject",
            },
        ),
        migrations.CreateModel(
            name="SnubaQuery",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("type", models.SmallIntegerField()),
                ("dataset", models.TextField()),
                ("query", models.TextField()),
                ("aggregate", models.TextField()),
                ("time_window", models.IntegerField()),
                ("resolution", models.IntegerField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "environment",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.environment",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_snubaquery",
            },
        ),
        migrations.AddField(
            model_name="querysubscription",
            name="snuba_query",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="subscriptions",
                to="sentry.snubaquery",
            ),
        ),
        migrations.AddField(
            model_name="alertrule",
            name="snuba_query",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="sentry.snubaquery", unique=True
            ),
        ),
        migrations.CreateModel(
            name="SnubaQueryEventType",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("type", models.SmallIntegerField()),
                (
                    "snuba_query",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.snubaquery"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_snubaqueryeventtype",
            },
        ),
        migrations.CreateModel(
            name="StringIndexer",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("string", models.CharField(max_length=200)),
                ("organization_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "last_seen",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("retention_days", models.IntegerField(default=90)),
            ],
            options={
                "db_table": "sentry_stringindexer",
                "constraints": [
                    models.UniqueConstraint(
                        fields=("string", "organization_id"), name="unique_org_string"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("slug", sentry.db.models.fields.slug.SentrySlugField()),
                ("name", models.CharField(max_length=64)),
                ("status", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ("idp_provisioned", models.BooleanField(db_default=False, default=False)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_team",
            },
        ),
        migrations.AddField(
            model_name="rule",
            name="owner_team",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, to="sentry.team"
            ),
        ),
        migrations.CreateModel(
            name="ProjectTeam",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.project"
                    ),
                ),
                (
                    "team",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.team"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_projectteam",
            },
        ),
        migrations.AddField(
            model_name="project",
            name="teams",
            field=models.ManyToManyField(
                related_name="teams", through="sentry.ProjectTeam", to="sentry.team"
            ),
        ),
        migrations.CreateModel(
            name="OrganizationMemberTeam",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("role", models.CharField(blank=True, max_length=32, null=True)),
                (
                    "organizationmember",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.organizationmember"
                    ),
                ),
                (
                    "team",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.team"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_organizationmember_teams",
            },
        ),
        migrations.AddField(
            model_name="organizationmember",
            name="teams",
            field=models.ManyToManyField(
                blank=True, through="sentry.OrganizationMemberTeam", to="sentry.team"
            ),
        ),
        migrations.CreateModel(
            name="OrganizationAccessRequest",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "requester_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, null=True, on_delete="CASCADE"
                    ),
                ),
                (
                    "member",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.organizationmember"
                    ),
                ),
                (
                    "team",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.team"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_organizationaccessrequest",
            },
        ),
        migrations.CreateModel(
            name="GroupSubscription",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, null=True, on_delete="CASCADE"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("reason", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscription_set",
                        to="sentry.group",
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscription_set",
                        to="sentry.project",
                    ),
                ),
                (
                    "team",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="sentry.team"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_groupsubscription",
            },
        ),
        migrations.CreateModel(
            name="GroupOwner",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("type", models.PositiveSmallIntegerField()),
                ("context", sentry.db.models.fields.jsonfield.JSONField(null=True)),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, null=True, on_delete="CASCADE"
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.group",
                    ),
                ),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.organization",
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.project",
                    ),
                ),
                (
                    "team",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="sentry.team"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_groupowner",
            },
        ),
        migrations.CreateModel(
            name="GroupHistory",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, null=True, on_delete="SET_NULL"
                    ),
                ),
                ("status", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ("prev_history_date", models.DateTimeField(null=True)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.group",
                    ),
                ),
                (
                    "prev_history",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.grouphistory",
                    ),
                ),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.organization",
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.project",
                    ),
                ),
                (
                    "release",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.release",
                    ),
                ),
                (
                    "team",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to="sentry.team"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_grouphistory",
            },
        ),
        migrations.CreateModel(
            name="GroupAssignee",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, null=True, on_delete="CASCADE"
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assignee_set",
                        to="sentry.group",
                        unique=True,
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assignee_set",
                        to="sentry.project",
                    ),
                ),
                (
                    "team",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sentry_assignee_set",
                        to="sentry.team",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_groupasignee",
            },
        ),
        migrations.CreateModel(
            name="ExternalActor",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, null=True, on_delete="CASCADE"
                    ),
                ),
                (
                    "integration_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Integration", db_index=True, on_delete="CASCADE"
                    ),
                ),
                ("provider", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("external_name", models.TextField()),
                ("external_id", models.TextField(null=True)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
                    ),
                ),
                (
                    "team",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="sentry.team"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_externalactor",
            },
        ),
        migrations.CreateModel(
            name="DashboardPermissionsTeam",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "permissions",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.dashboardpermissions",
                    ),
                ),
                (
                    "team",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.team"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_dashboardpermissionsteam",
            },
        ),
        migrations.AddField(
            model_name="dashboardpermissions",
            name="teams_with_edit_access",
            field=models.ManyToManyField(
                blank=True, through="sentry.DashboardPermissionsTeam", to="sentry.team"
            ),
        ),
        migrations.AddField(
            model_name="alertrule",
            name="team",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, to="sentry.team"
            ),
        ),
        migrations.CreateModel(
            name="TeamKeyTransaction",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("transaction", models.CharField(max_length=200)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
                    ),
                ),
                (
                    "project_team",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.projectteam",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_performanceteamkeytransaction",
            },
        ),
        migrations.CreateModel(
            name="TeamReplica",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "team_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Team", db_index=True, on_delete="CASCADE"
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Organization", db_index=True, on_delete="CASCADE"
                    ),
                ),
                ("slug", models.SlugField()),
                ("name", models.CharField(max_length=64)),
                ("status", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("org_role", models.CharField(max_length=32, null=True)),
            ],
            options={
                "db_table": "sentry_teamreplica",
                "unique_together": {("organization_id", "slug")},
            },
        ),
        migrations.CreateModel(
            name="UserAvatar",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("ident", models.CharField(db_index=True, max_length=32, unique=True)),
                (
                    "control_file_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True, unique=True),
                ),
                ("avatar_type", models.PositiveSmallIntegerField(default=0)),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="avatar",
                        to=settings.AUTH_USER_MODEL,
                        unique=True,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_useravatar",
            },
        ),
        migrations.CreateModel(
            name="UserEmail",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("email", models.EmailField(max_length=75)),
                (
                    "validation_hash",
                    models.CharField(
                        default=sentry.utils.security.hash.get_secure_token, max_length=32
                    ),
                ),
                ("date_hash_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("is_verified", models.BooleanField(default=False)),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="emails",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_useremail",
            },
        ),
        migrations.CreateModel(
            name="UserIP",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("ip_address", models.GenericIPAddressField()),
                ("country_code", models.CharField(max_length=16, null=True)),
                ("region_code", models.CharField(max_length=16, null=True)),
                ("first_seen", models.DateTimeField(default=django.utils.timezone.now)),
                ("last_seen", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "sentry_userip",
            },
        ),
        migrations.CreateModel(
            name="UserOption",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "project_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Project", db_index=True, null=True, on_delete="CASCADE"
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Organization", db_index=True, null=True, on_delete="CASCADE"
                    ),
                ),
                ("key", models.CharField(max_length=64)),
                ("value", sentry.db.models.fields.picklefield.PickledObjectField(editable=False)),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "sentry_useroption",
            },
        ),
        migrations.CreateModel(
            name="UserPermission",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("permission", models.CharField(max_length=32)),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "sentry_userpermission",
            },
            bases=(sentry.backup.mixins.OverwritableConfigMixin, models.Model),
        ),
        migrations.CreateModel(
            name="UserReport",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "project_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                (
                    "group_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(
                        db_index=True, null=True
                    ),
                ),
                ("event_id", models.CharField(max_length=32)),
                (
                    "environment_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(
                        db_index=True, null=True
                    ),
                ),
                ("name", models.CharField(max_length=128)),
                ("email", models.EmailField(max_length=75)),
                ("comments", models.TextField(max_length=4096)),
                (
                    "date_added",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
            ],
            options={
                "db_table": "sentry_userreport",
                "indexes": [
                    models.Index(
                        fields=["project_id", "event_id"], name="sentry_user_project_cbfd59_idx"
                    ),
                    models.Index(
                        fields=["project_id", "date_added"], name="sentry_user_project_b8faaf_idx"
                    ),
                ],
                "unique_together": {("project_id", "event_id")},
            },
        ),
        migrations.CreateModel(
            name="UserRoleUser",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                (
                    "role",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.userrole"
                    ),
                ),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "sentry_userrole_users",
            },
        ),
        migrations.AddField(
            model_name="userrole",
            name="users",
            field=models.ManyToManyField(
                through="sentry.UserRoleUser", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.CreateModel(
            name="ApiAuthorization",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "scopes",
                    bitfield.models.BitField(
                        [
                            "project:read",
                            "project:write",
                            "project:admin",
                            "project:releases",
                            "team:read",
                            "team:write",
                            "team:admin",
                            "event:read",
                            "event:write",
                            "event:admin",
                            "org:read",
                            "org:write",
                            "org:admin",
                            "member:read",
                            "member:write",
                            "member:admin",
                            "org:integrations",
                            "alerts:read",
                            "alerts:write",
                            "member:invite",
                        ],
                        default=None,
                    ),
                ),
                (
                    "scope_list",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.TextField(), default=list, size=None
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "organization_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Organization", db_index=True, null=True, on_delete="CASCADE"
                    ),
                ),
                (
                    "application",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.apiapplication",
                    ),
                ),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "sentry_apiauthorization",
                "constraints": [
                    models.UniqueConstraint(
                        condition=models.Q(("organization_id__isnull", True)),
                        fields=("user", "application"),
                        name="apiauthorization_user_app",
                    ),
                    models.UniqueConstraint(
                        condition=models.Q(("organization_id__isnull", False)),
                        fields=("user", "application", "organization_id"),
                        name="apiauthorization_user_app_org",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ArtifactBundleIndex",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                ("url", models.TextField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "artifact_bundle",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.artifactbundle"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_artifactbundleindex",
                "indexes": [
                    models.Index(
                        fields=["url", "artifact_bundle"], name="sentry_arti_url_7e628a_idx"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="AssistantActivity",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("guide_id", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("viewed_ts", models.DateTimeField(null=True)),
                ("dismissed_ts", models.DateTimeField(null=True)),
                ("useful", models.BooleanField(null=True)),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "sentry_assistant_activity",
                "unique_together": {("user", "guide_id")},
            },
        ),
        migrations.CreateModel(
            name="AuditLogEntry",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Organization", db_index=True, on_delete="CASCADE"
                    ),
                ),
                ("actor_label", models.CharField(blank=True, max_length=64, null=True)),
                (
                    "target_object",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
                ),
                ("event", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("ip_address", models.GenericIPAddressField(null=True, unpack_ipv4=True)),
                ("data", sentry.db.models.fields.gzippeddict.GzippedDictField()),
                ("datetime", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "actor",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="audit_actors",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "actor_key",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.apikey",
                    ),
                ),
                (
                    "target_user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="audit_targets",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_auditlogentry",
                "indexes": [
                    models.Index(
                        fields=["organization_id", "datetime"],
                        name="sentry_audi_organiz_c8bd18_idx",
                    ),
                    models.Index(
                        fields=["organization_id", "event", "datetime"],
                        name="sentry_audi_organiz_588b1e_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Authenticator",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("last_used_at", models.DateTimeField(null=True)),
                ("type", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("config", sentry.users.models.authenticator.AuthenticatorConfig(editable=False)),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "verbose_name": "authenticator",
                "verbose_name_plural": "authenticators",
                "db_table": "auth_authenticator",
                "unique_together": {("user", "type")},
            },
        ),
        migrations.CreateModel(
            name="AuthIdentity",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("ident", models.CharField(max_length=128)),
                ("data", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ("last_verified", models.DateTimeField(default=django.utils.timezone.now)),
                ("last_synced", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "auth_provider",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.authprovider"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_authidentity",
                "indexes": [
                    models.Index(fields=["last_synced"], name="auth_identity_last_synced_idx")
                ],
                "unique_together": {("auth_provider", "ident"), ("auth_provider", "user")},
            },
        ),
        migrations.CreateModel(
            name="BroadcastSeen",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_seen", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "broadcast",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.broadcast"
                    ),
                ),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "sentry_broadcastseen",
                "unique_together": {("broadcast", "user")},
            },
        ),
        migrations.AddIndex(
            model_name="commit",
            index=models.Index(
                fields=["repository_id", "date_added"], name="sentry_comm_reposit_da31f2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="commit",
            index=models.Index(
                fields=["author", "date_added"], name="sentry_comm_author__131211_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="commit",
            index=models.Index(
                fields=["organization_id", "date_added"], name="sentry_comm_organiz_7be514_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="commit",
            unique_together={("repository_id", "key")},
        ),
        migrations.AlterUniqueTogether(
            name="commitfilechange",
            unique_together={("commit", "filename")},
        ),
        migrations.AlterUniqueTogether(
            name="controlfileblobindex",
            unique_together={("file", "blob", "offset")},
        ),
        migrations.AlterUniqueTogether(
            name="controlfileblobowner",
            unique_together={("blob", "organization_id")},
        ),
        migrations.AlterUniqueTogether(
            name="dashboardfavoriteuser",
            unique_together={("user_id", "dashboard")},
        ),
        migrations.AlterUniqueTogether(
            name="dashboardwidget",
            unique_together={("dashboard", "order")},
        ),
        migrations.AlterUniqueTogether(
            name="dashboardwidgetquery",
            unique_together={("widget", "order")},
        ),
        migrations.AddIndex(
            model_name="debugidartifactbundle",
            index=models.Index(
                fields=["debug_id", "artifact_bundle"], name="sentry_debu_debug_i_8c6c44_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="exporteddatablob",
            unique_together={("data_export", "blob_id", "offset")},
        ),
        migrations.AlterUniqueTogether(
            name="fileblobindex",
            unique_together={("file", "blob", "offset")},
        ),
        migrations.AlterUniqueTogether(
            name="fileblobowner",
            unique_together={("blob", "organization_id")},
        ),
        migrations.AlterUniqueTogether(
            name="groupmeta",
            unique_together={("group", "key")},
        ),
        migrations.AlterUniqueTogether(
            name="identity",
            unique_together={("idp", "external_id"), ("idp", "user")},
        ),
        migrations.AddIndex(
            model_name="incidenttrigger",
            index=models.Index(
                fields=["alert_rule_trigger", "incident_id"], name="sentry_inci_alert_r_33da01_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="incidenttrigger",
            unique_together={("incident", "alert_rule_trigger")},
        ),
        migrations.AlterUniqueTogether(
            name="alertruletrigger",
            unique_together={("alert_rule", "label")},
        ),
        migrations.AddConstraint(
            model_name="notificationsettingoption",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("team_id__isnull", False), ("user_id__isnull", True)),
                    models.Q(("team_id__isnull", True), ("user_id__isnull", False)),
                    _connector="OR",
                ),
                name="notification_setting_option_team_or_user_check",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="notificationsettingoption",
            unique_together={("scope_type", "scope_identifier", "user_id", "team_id", "type")},
        ),
        migrations.AddConstraint(
            model_name="notificationsettingprovider",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("team_id__isnull", False), ("user_id__isnull", True)),
                    models.Q(("team_id__isnull", True), ("user_id__isnull", False)),
                    _connector="OR",
                ),
                name="notification_setting_provider_team_or_user_check",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="notificationsettingprovider",
            unique_together={
                ("scope_type", "scope_identifier", "user_id", "team_id", "provider", "type")
            },
        ),
        migrations.AddConstraint(
            model_name="groupsearchviewstarred",
            constraint=models.UniqueConstraint(
                deferrable=django.db.models.constraints.Deferrable["DEFERRED"],
                fields=("user_id", "organization_id", "position"),
                name="sentry_groupsearchviewstarred_unique_view_position_per_org_user",
            ),
        ),
        migrations.AddConstraint(
            model_name="groupsearchviewlastvisited",
            constraint=models.UniqueConstraint(
                fields=("user_id", "organization_id", "group_search_view_id"),
                name="sentry_groupsearchviewlastvisited_unique_last_visited_per_org_user_view",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="featureadoption",
            unique_together={("organization", "feature_id")},
        ),
        migrations.AlterUniqueTogether(
            name="externalissue",
            unique_together={("organization", "integration_id", "key")},
        ),
        migrations.AlterUniqueTogether(
            name="dashboardtombstone",
            unique_together={("organization", "slug")},
        ),
        migrations.AlterUniqueTogether(
            name="organizationintegration",
            unique_together={("organization_id", "integration")},
        ),
        migrations.AlterUniqueTogether(
            name="organizationmemberinvite",
            unique_together={("organization", "email")},
        ),
        migrations.AddIndex(
            model_name="organizationmembermapping",
            index=models.Index(
                fields=["organization_id", "user"], name="sentry_orga_organiz_ae9fe7_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="organizationmembermapping",
            index=models.Index(
                fields=["organization_id", "email"], name="sentry_orga_organiz_7de26b_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="organizationmembermapping",
            unique_together={("organization_id", "organizationmember_id")},
        ),
        migrations.AlterUniqueTogether(
            name="organizationoption",
            unique_together={("organization", "key")},
        ),
        migrations.AlterUniqueTogether(
            name="platformexternalissue",
            unique_together={("group", "service_type")},
        ),
        migrations.AlterUniqueTogether(
            name="organizationonboardingtask",
            unique_together={("organization", "task")},
        ),
        migrations.AlterUniqueTogether(
            name="incidentproject",
            unique_together={("project", "incident")},
        ),
        migrations.AlterUniqueTogether(
            name="groupseen",
            unique_together={("user_id", "group")},
        ),
        migrations.AlterUniqueTogether(
            name="groupsearchviewproject",
            unique_together={("group_search_view", "project")},
        ),
        migrations.AddIndex(
            model_name="groupopenperiod",
            index=models.Index(
                fields=["group", "date_started"], name="sentry_grou_group_i_4bffd0_idx"
            ),
        ),
        # would be nice but it doesn't support hints :(
        # django.contrib.postgres.operations.BtreeGistExtension(),
        SafeRunSQL(
            sql="CREATE EXTENSION btree_gist;",
            reverse_sql="",
            hints={"tables": ["sentry_groupopenperiod"]},
        ),
        migrations.AddConstraint(
            model_name="groupopenperiod",
            constraint=django.contrib.postgres.constraints.ExclusionConstraint(
                expressions=[
                    (models.F("group"), "="),
                    (
                        sentry.models.groupopenperiod.TsTzRange(
                            "date_started",
                            "date_ended",
                            django.contrib.postgres.fields.ranges.RangeBoundary(),
                        ),
                        "&&",
                    ),
                ],
                name="exclude_overlapping_start_end",
            ),
        ),
        migrations.AddIndex(
            model_name="grouplink",
            index=models.Index(
                fields=["project", "linked_id", "linked_type", "group"],
                name="sentry_grou_project_dd3e95_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="grouplink",
            unique_together={("group", "linked_type", "linked_id")},
        ),
        migrations.AddIndex(
            model_name="groupinbox",
            index=models.Index(
                fields=["project", "date_added"], name="sentry_grou_project_a9fe16_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="grouphash",
            unique_together={("project", "hash")},
        ),
        migrations.AddIndex(
            model_name="groupemailthread",
            index=models.Index(
                fields=["date", "project", "id"], name="sentry_grou_date_d4eb5a_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="groupemailthread",
            unique_together={("email", "group"), ("email", "msgid")},
        ),
        migrations.AlterUniqueTogether(
            name="groupbookmark",
            unique_together={("project", "user_id", "group")},
        ),
        migrations.AlterUniqueTogether(
            name="environmentproject",
            unique_together={("project", "environment")},
        ),
        migrations.AlterUniqueTogether(
            name="environment",
            unique_together={("organization_id", "name")},
        ),
        migrations.AlterUniqueTogether(
            name="discoversavedqueryproject",
            unique_together={("project", "discover_saved_query")},
        ),
        migrations.AddConstraint(
            model_name="discoversavedquery",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_homepage", True)),
                fields=("organization", "created_by_id", "is_homepage"),
                name="unique_user_homepage_query",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="dashboardproject",
            unique_together={("project", "dashboard")},
        ),
        migrations.AlterUniqueTogether(
            name="dashboard",
            unique_together={("organization", "title")},
        ),
        migrations.AlterUniqueTogether(
            name="customdynamicsamplingruleproject",
            unique_together={("custom_dynamic_sampling_rule", "project")},
        ),
        migrations.AddIndex(
            model_name="customdynamicsamplingrule",
            index=models.Index(
                condition=models.Q(("is_active", True)), fields=["organization"], name="org_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="customdynamicsamplingrule",
            index=models.Index(
                condition=models.Q(("is_active", True)), fields=["end_date"], name="end_date_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="customdynamicsamplingrule",
            index=models.Index(
                condition=models.Q(("is_active", True)),
                fields=["condition_hash"],
                name="condition_hash_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="alertruleprojects",
            unique_together={("alert_rule", "project")},
        ),
        migrations.AddIndex(
            model_name="activity",
            index=models.Index(
                fields=["project", "datetime"], name="sentry_acti_project_cd8457_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="projectartifactbundle",
            index=models.Index(
                fields=["project_id", "artifact_bundle"], name="sentry_proj_project_f73d36_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="projectbookmark",
            unique_together={("project", "user_id")},
        ),
        migrations.AddIndex(
            model_name="projectdebugfile",
            index=models.Index(
                fields=["project_id", "debug_id"], name="sentry_proj_project_c586ac_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="projectdebugfile",
            index=models.Index(
                fields=["project_id", "code_id"], name="sentry_proj_project_9b5950_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="proguardartifactrelease",
            unique_together={("project_id", "release_name", "proguard_uuid")},
        ),
        migrations.AddIndex(
            model_name="projectoption",
            index=models.Index(fields=["key"], name="sentry_proj_key_2426c1_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="projectoption",
            unique_together={("project", "key")},
        ),
        migrations.AlterUniqueTogether(
            name="projectredirect",
            unique_together={("organization", "redirect_slug")},
        ),
        migrations.AlterUniqueTogether(
            name="projectsdk",
            unique_together={("project", "event_type", "sdk_name")},
        ),
        migrations.AddConstraint(
            model_name="projecttemplate",
            constraint=models.UniqueConstraint(
                fields=("name", "organization"), name="unique_projecttemplate_name_per_org"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="projecttemplateoption",
            unique_together={("project_template", "key")},
        ),
        migrations.AlterUniqueTogether(
            name="projecttransactionthresholdoverride",
            unique_together={("project", "transaction")},
        ),
        migrations.AddIndex(
            model_name="pullrequest",
            index=models.Index(
                fields=["repository_id", "date_added"], name="sentry_pull_reposit_c429a4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="pullrequest",
            index=models.Index(
                fields=["organization_id", "merge_commit_sha"],
                name="sentry_pull_organiz_8aabcf_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="pullrequest",
            unique_together={("repository_id", "key")},
        ),
        migrations.AlterUniqueTogether(
            name="pullrequestcomment",
            unique_together={("pull_request", "comment_type")},
        ),
        migrations.AlterUniqueTogether(
            name="pullrequestcommit",
            unique_together={("pull_request", "commit")},
        ),
        migrations.AddIndex(
            model_name="incident",
            index=models.Index(
                fields=["alert_rule", "type", "status"], name="sentry_inci_alert_r_24a457_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="incident",
            unique_together={("organization", "identifier")},
        ),
        migrations.AlterUniqueTogether(
            name="recentsearch",
            unique_together={("user_id", "organization", "type", "query_hash")},
        ),
        migrations.AddIndex(
            model_name="groupenvironment",
            index=models.Index(
                fields=["environment", "first_release", "first_seen"],
                name="sentry_grou_environ_443bdb_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="groupenvironment",
            unique_together={("group", "environment")},
        ),
        migrations.AddIndex(
            model_name="group",
            index=models.Index(
                fields=["project", "first_release"], name="sentry_grou_project_4662d9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="group",
            index=models.Index(fields=["project", "id"], name="sentry_grou_project_41a5ce_idx"),
        ),
        migrations.AddIndex(
            model_name="group",
            index=models.Index(
                fields=["project", "status", "last_seen", "id"],
                name="sentry_grou_project_81a5ed_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="group",
            index=models.Index(
                fields=["project", "status", "type", "last_seen", "id"],
                name="sentry_grou_project_17d28d_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="group",
            index=models.Index(
                fields=["project", "status", "substatus", "last_seen", "id"],
                name="sentry_grou_project_5eb75b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="group",
            index=models.Index(
                fields=["project", "status", "substatus", "type", "last_seen", "id"],
                name="sentry_grou_project_ff3fdf_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="group",
            index=models.Index(
                fields=["project", "status", "substatus", "id"],
                name="sentry_grou_project_5acaf7_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="group",
            index=models.Index(
                fields=["status", "substatus", "id"], name="sentry_grou_status_48b516_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="group",
            index=models.Index(
                fields=["status", "substatus", "first_seen"], name="sentry_grou_status_e07f40_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="group",
            index=models.Index(
                fields=["project", "status", "priority", "last_seen", "id"],
                name="sentry_grou_project_4ac709_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="group",
            unique_together={("project", "short_id")},
        ),
        migrations.AlterUniqueTogether(
            name="distribution",
            unique_together={("release", "name")},
        ),
        migrations.AddIndex(
            model_name="releaseartifactbundle",
            index=models.Index(
                fields=["organization_id", "release_name", "dist_name", "artifact_bundle"],
                name="sentry_rele_organiz_291018_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="releasecommit",
            unique_together={("release", "commit"), ("release", "order")},
        ),
        migrations.AlterUniqueTogether(
            name="releaseenvironment",
            unique_together={("organization", "release", "environment")},
        ),
        migrations.AddIndex(
            model_name="releasefile",
            index=models.Index(
                fields=["release_id", "name"], name="sentry_rele_release_bff97c_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="releasefile",
            unique_together={("release_id", "ident")},
        ),
        migrations.AlterUniqueTogether(
            name="releaseheadcommit",
            unique_together={("repository_id", "release")},
        ),
        migrations.AddIndex(
            model_name="releaseproject",
            index=models.Index(
                fields=["project", "adopted"], name="sentry_rele_project_a80825_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="releaseproject",
            index=models.Index(
                fields=["project", "unadopted"], name="sentry_rele_project_2ca122_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="releaseproject",
            index=models.Index(
                fields=["project", "first_seen_transaction"], name="sentry_rele_project_3143eb_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="releaseproject",
            unique_together={("project", "release")},
        ),
        migrations.AddIndex(
            model_name="release",
            index=models.Index(
                fields=["organization", "version"],
                name="sentry_release_version_btree",
                opclasses=["", "text_pattern_ops"],
            ),
        ),
        migrations.AddIndex(
            model_name="release",
            index=sentry.db.models.indexes.IndexWithPostgresNameLimits(
                models.F("organization"),
                models.F("package"),
                models.OrderBy(models.F("major"), descending=True),
                models.OrderBy(models.F("minor"), descending=True),
                models.OrderBy(models.F("patch"), descending=True),
                models.OrderBy(models.F("revision"), descending=True),
                models.OrderBy(
                    models.Case(models.When(prerelease="", then=1), default=0), descending=True
                ),
                models.OrderBy(models.F("prerelease"), descending=True),
                name="sentry_release_semver_by_package_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="release",
            index=models.Index(
                models.F("organization"),
                models.OrderBy(models.F("major"), descending=True),
                models.OrderBy(models.F("minor"), descending=True),
                models.OrderBy(models.F("patch"), descending=True),
                models.OrderBy(models.F("revision"), descending=True),
                models.OrderBy(
                    models.Case(models.When(prerelease="", then=1), default=0), descending=True
                ),
                models.OrderBy(models.F("prerelease"), descending=True),
                name="sentry_release_semver_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="release",
            index=models.Index(
                fields=["organization", "build_code"], name="sentry_rele_organiz_ffeeb2_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="release",
            index=models.Index(
                fields=["organization", "build_number"], name="sentry_rele_organiz_6b035f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="release",
            index=models.Index(
                fields=["organization", "date_added"], name="sentry_rele_organiz_4ed947_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="release",
            index=models.Index(
                fields=["organization", "status"], name="sentry_rele_organiz_6975e7_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="release",
            unique_together={("organization", "version")},
        ),
        migrations.AddIndex(
            model_name="releaseprojectenvironment",
            index=models.Index(
                fields=["project", "adopted", "environment"], name="sentry_rele_project_4bea8e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="releaseprojectenvironment",
            index=models.Index(
                fields=["project", "unadopted", "environment"],
                name="sentry_rele_project_922a6a_idx",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="releaseprojectenvironment",
            unique_together={("project", "release", "environment")},
        ),
        migrations.AlterUniqueTogether(
            name="relocationfile",
            unique_together={("relocation", "file"), ("relocation", "kind")},
        ),
        migrations.AlterUniqueTogether(
            name="repositoryprojectpathconfig",
            unique_together={("project", "stack_root")},
        ),
        migrations.AddConstraint(
            model_name="rollbackorganization",
            constraint=models.UniqueConstraint(fields=("organization_id",), name="unique_org"),
        ),
        migrations.AddConstraint(
            model_name="rollbackuser",
            constraint=models.UniqueConstraint(
                fields=("user_id", "organization_id"), name="unique_user_org"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="grouprulestatus",
            unique_together={("rule", "group")},
        ),
        migrations.AddIndex(
            model_name="rulefirehistory",
            index=models.Index(
                fields=["rule", "date_added"], name="sentry_rule_rule_id_015b9e_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="notificationmessage",
            constraint=models.UniqueConstraint(
                condition=models.Q(
                    ("error_code__isnull", True),
                    ("incident__isnull", False),
                    ("parent_notification_message__isnull", True),
                    ("trigger_action__isnull", False),
                ),
                fields=("incident", "trigger_action"),
                name="singular_parent_message_per_incident_and_trigger_action",
            ),
        ),
        migrations.AddConstraint(
            model_name="notificationmessage",
            constraint=models.UniqueConstraint(
                models.F("rule_fire_history"),
                models.F("rule_action_uuid"),
                django.db.models.functions.comparison.Coalesce(
                    "open_period_start",
                    models.Value(datetime.datetime(1, 1, 1, 0, 0, tzinfo=datetime.UTC)),
                ),
                condition=models.Q(
                    ("error_code__isnull", True), ("parent_notification_message__isnull", True)
                ),
                name="singular_parent_message_per_rule_fire_history_rule_action_open_",
            ),
        ),
        migrations.AddConstraint(
            model_name="rulesnooze",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("alert_rule__isnull", True), ("rule__isnull", False)),
                    models.Q(("alert_rule__isnull", False), ("rule__isnull", True)),
                    _connector="OR",
                ),
                name="rule_or_alert_rule",
            ),
        ),
        migrations.AddConstraint(
            model_name="rulesnooze",
            constraint=models.UniqueConstraint(
                condition=models.Q(("user_id__isnull", True)),
                fields=("rule",),
                name="unique_rule_user",
            ),
        ),
        migrations.AddConstraint(
            model_name="rulesnooze",
            constraint=models.UniqueConstraint(
                condition=models.Q(("user_id__isnull", True)),
                fields=("alert_rule",),
                name="unique_alert_rule_user",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="rulesnooze",
            unique_together={("user_id", "alert_rule"), ("user_id", "rule")},
        ),
        migrations.AddConstraint(
            model_name="savedsearch",
            constraint=models.UniqueConstraint(
                condition=models.Q(("visibility", "owner_pinned")),
                fields=("organization", "owner_id", "type"),
                name="sentry_savedsearch_pinning_constraint",
            ),
        ),
        migrations.AddConstraint(
            model_name="savedsearch",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_global", True)),
                fields=("is_global", "name"),
                name="sentry_savedsearch_organization_id_313a24e907cdef99",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="sentryappinstallationforprovider",
            unique_together={("provider", "organization_id")},
        ),
        migrations.AlterUniqueTogether(
            name="sentryappinstallationtoken",
            unique_together={("sentry_app_installation", "api_token")},
        ),
        migrations.AlterUniqueTogether(
            name="servicehookproject",
            unique_together={("service_hook", "project_id")},
        ),
        migrations.AlterUniqueTogether(
            name="snubaqueryeventtype",
            unique_together={("snuba_query", "type")},
        ),
        migrations.AlterUniqueTogether(
            name="team",
            unique_together={("organization", "slug")},
        ),
        migrations.AddIndex(
            model_name="rule",
            index=models.Index(
                fields=["project", "status", "owner_team"], name="sentry_rule_project_cce776_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="rule",
            index=models.Index(
                fields=["project", "status", "owner_user_id"], name="sentry_rule_project_6e9491_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="rule",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("owner_team__isnull", False), ("owner_user_id__isnull", True)),
                    models.Q(("owner_team__isnull", True), ("owner_user_id__isnull", False)),
                    models.Q(("owner_team__isnull", True), ("owner_user_id__isnull", True)),
                    _connector="OR",
                ),
                name="rule_owner_user_or_team_check",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="projectteam",
            unique_together={("project", "team")},
        ),
        migrations.AlterUniqueTogether(
            name="project",
            unique_together={("organization", "external_id"), ("organization", "slug")},
        ),
        migrations.AlterUniqueTogether(
            name="organizationmemberteam",
            unique_together={("team", "organizationmember")},
        ),
        migrations.AlterUniqueTogether(
            name="organizationmember",
            unique_together={("organization", "email"), ("organization", "user_id")},
        ),
        migrations.AlterUniqueTogether(
            name="organizationaccessrequest",
            unique_together={("team", "member")},
        ),
        migrations.AddConstraint(
            model_name="groupsubscription",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("team_id__isnull", False), ("user_id__isnull", True)),
                    models.Q(("team_id__isnull", True), ("user_id__isnull", False)),
                    _connector="OR",
                ),
                name="subscription_team_or_user_check",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="groupsubscription",
            unique_together={("group", "team"), ("group", "user_id")},
        ),
        migrations.AddIndex(
            model_name="groupowner",
            index=models.Index(
                models.F("type"),
                django.db.models.functions.comparison.Cast(
                    django.db.models.fields.json.KeyTextTransform(
                        "commitId",
                        django.db.models.functions.comparison.Cast(
                            models.F("context"), models.JSONField()
                        ),
                    ),
                    models.BigIntegerField(),
                ),
                name="groupowner_type_json_commitid",
            ),
        ),
        migrations.AddIndex(
            model_name="grouphistory",
            index=models.Index(
                fields=["project", "status", "release"], name="sentry_grou_project_bbcf30_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="grouphistory",
            index=models.Index(fields=["group", "status"], name="sentry_grou_group_i_c61acb_idx"),
        ),
        migrations.AddIndex(
            model_name="grouphistory",
            index=models.Index(
                fields=["project", "date_added"], name="sentry_grou_project_20b3f8_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="groupassignee",
            unique_together={("project", "group")},
        ),
        migrations.AddConstraint(
            model_name="externalactor",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("user_id__isnull", False), ("team_id__isnull", False), _connector="OR"
                ),
                name="external_actor_team_or_user",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="externalactor",
            unique_together={
                ("organization", "provider", "external_name", "team_id"),
                ("organization", "provider", "external_name", "user_id"),
            },
        ),
        migrations.AlterUniqueTogether(
            name="dashboardpermissionsteam",
            unique_together={("team", "permissions")},
        ),
        migrations.AlterUniqueTogether(
            name="teamkeytransaction",
            unique_together={("project_team", "transaction")},
        ),
        migrations.AlterUniqueTogether(
            name="useremail",
            unique_together={("user", "email")},
        ),
        migrations.AlterUniqueTogether(
            name="userip",
            unique_together={("user", "ip_address")},
        ),
        migrations.AlterUniqueTogether(
            name="useroption",
            unique_together={("user", "organization_id", "key"), ("user", "project_id", "key")},
        ),
        migrations.AlterUniqueTogether(
            name="userpermission",
            unique_together={("user", "permission")},
        ),
    ]
