# Generated by Django 2.2.28 on 2023-05-30 23:37

from django.db import connection, migrations
from psycopg2.extras import execute_values

from sentry.models import GroupHistoryStatus, GroupStatus
from sentry.new_migrations.migrations import CheckedMigration
from sentry.types.group import GroupSubStatus
from sentry.utils.query import RangeQuerySetWrapper

BATCH_SIZE = 100

UPDATE_QUERY = """
    UPDATE sentry_groupedmessage
    SET substatus = data.substatus
    FROM (VALUES %s) as data (id, status, substatus)
    WHERE sentry_groupedmessage.id = data.id and sentry_groupedmessage.status = data.status and sentry_groupedmessage.substatus is NULL
"""


def map_unresolved_none_substatus(apps, schema_editor):
    Group = apps.get_model("sentry", "Group")
    GroupHistory = apps.get_model("sentry", "GroupHistory")

    cursor = connection.cursor()
    batch = []

    for group_id, status, substatus in RangeQuerySetWrapper(
        Group.objects.all().values_list("id", "status", "substatus"),
        result_value_getter=lambda item: item[0],
    ):
        if status != GroupStatus.UNRESOLVED and substatus is not None:
            continue

        try:
            most_recent_history = GroupHistory.objects.filter(
                group_id=group_id,
            ).latest("date_added")
        except GroupHistory.DoesNotExist:
            continue

        if most_recent_history.status == GroupHistoryStatus.REGRESSED:
            batch.append((group_id, status, GroupSubStatus.REGRESSED))
        elif most_recent_history.status in (
            GroupHistoryStatus.UNRESOLVED,
            GroupHistoryStatus.UNIGNORED,
        ):
            batch.append((group_id, status, GroupSubStatus.ONGOING))
        else:
            continue

        if len(batch) >= BATCH_SIZE:
            execute_values(cursor, UPDATE_QUERY, batch, page_size=BATCH_SIZE)
            batch = []

    if batch:
        execute_values(cursor, UPDATE_QUERY, batch, page_size=BATCH_SIZE)


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production. For
    # the most part, this should only be used for operations where it's safe to run the migration
    # after your code has deployed. So this should not be used for most operations that alter the
    # schema of a table.
    # Here are some things that make sense to mark as dangerous:
    # - Large data migrations. Typically we want these to be run manually by ops so that they can
    #   be monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   have ops run this and not block the deploy. Note that while adding an index is a schema
    #   change, it's completely safe to run the operation after the code has deployed.
    is_dangerous = True

    dependencies = [
        ("sentry", "0474_make_organization_mapping_org_id_unique"),
    ]

    operations = [
        migrations.RunPython(
            map_unresolved_none_substatus,
            reverse_code=migrations.RunPython.noop,
            hints={"tables": ["sentry_groupedmessage", "sentry_groupedhistory"]},
        ),
    ]
