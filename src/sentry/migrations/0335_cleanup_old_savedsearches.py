# Generated by Django 2.2.28 on 2022-10-29 07:47

from django.db import migrations

from sentry.new_migrations.migrations import CheckedMigration
from sentry.utils.query import RangeQuerySetWrapperWithProgressBar


def cleanup_savedsearch(apps, schema_editor):
    SavedSearch = apps.get_model("sentry", "SavedSearch")

    # This removes all old said searches that have associated project_id.
    #
    # We no longer provide an API to query searches with a project_id and
    # instead provide organization level saved searches. There are MANY old
    # saved searches since
    #
    # For more contextual history of this change see [0] (you must work at
    # Sentry, sorry)
    #
    # [0]: https://www.notion.so/sentry/Saved-Search-cleanup-d2c2ae68b2174453a63ec19003ae17ae
    for search in RangeQuerySetWrapperWithProgressBar(SavedSearch.objects.all()):

        # There shouldn't be any searches with a project ID AND a
        # organization_id, but just to be safe, let's include the check here
        if search.project_id is not None and search.organization_id is None:
            search.delete()


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production. For
    # the most part, this should only be used for operations where it's safe to run the migration
    # after your code has deployed. So this should not be used for most operations that alter the
    # schema of a table.
    # Here are some things that make sense to mark as dangerous:
    # - Large data migrations. Typically we want these to be run manually by ops so that they can
    #   be monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   have ops run this and not block the deploy. Note that while adding an index is a schema
    #   change, it's completely safe to run the operation after the code has deployed.
    is_dangerous = True

    # This flag is used to decide whether to run this migration in a transaction or not. Generally
    # we don't want to run in a transaction here, since for long running operations like data
    # back-fills this results in us locking an increasing number of rows until we finally commit.
    atomic = False

    dependencies = [
        ("sentry", "0334_repositorypath_automatically_generated"),
    ]

    operations = [
        migrations.RunPython(
            cleanup_savedsearch,
            migrations.RunPython.noop,
            hints={"tables": ["sentry_savedsearch"]},
        ),
    ]
