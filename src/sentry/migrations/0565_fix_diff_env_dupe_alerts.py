# Generated by Django 3.2.20 on 2023-09-22 19:28

from django.db import migrations

from sentry.new_migrations.migrations import CheckedMigration
from sentry.utils.query import RangeQuerySetWrapperWithProgressBar


class ObjectStatus:
    ACTIVE = 0
    HIDDEN = 1
    PENDING_DELETION = 2
    DELETION_IN_PROGRESS = 3

    DISABLED = 1


def is_incorrectly_disabled(apps, rule):
    Rule = apps.get_model("sentry", "Rule")

    matchers = {key for key in list(rule.data.keys()) if key not in ("name", "user_id")}
    extra_fields = ["actions", "environment"]
    matchers.update(extra_fields)
    existing_rules = Rule.objects.exclude(id=rule.id).filter(project=rule.project)
    for existing_rule in existing_rules:
        keys = 0
        matches = 0
        for matcher in matchers:
            if existing_rule.data.get(matcher) and rule.data.get(matcher):
                keys += 1

                if existing_rule.data[matcher] == rule.data[matcher]:
                    matches += 1

            elif matcher in extra_fields:
                if matcher == "environment":
                    if existing_rule.environment_id and rule.environment_id:
                        keys += 1
                        if existing_rule.environment_id == rule.environment_id:
                            matches += 1
                    else:
                        keys += 1
                elif not existing_rule.data.get(matcher) and not rule.data.get(matcher):
                    # neither rule has the matcher
                    continue

                else:
                    # one rule has the matcher and the other one doesn't
                    keys += 1

        if keys == matches:
            # this means it's actually a dupe including environment_id
            return False
    return True


def fix_diff_env_rules(apps, schema_editor):
    Rule = apps.get_model("sentry", "Rule")

    for rule in RangeQuerySetWrapperWithProgressBar(Rule.objects.all()):
        if rule.status == ObjectStatus.DISABLED and rule.environment_id:
            if is_incorrectly_disabled(apps, rule):
                rule.status = ObjectStatus.ACTIVE
                rule.save(update_fields=["status"])


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production. For
    # the most part, this should only be used for operations where it's safe to run the migration
    # after your code has deployed. So this should not be used for most operations that alter the
    # schema of a table.
    # Here are some things that make sense to mark as dangerous:
    # - Large data migrations. Typically we want these to be run manually by ops so that they can
    #   be monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   have ops run this and not block the deploy. Note that while adding an index is a schema
    #   change, it's completely safe to run the operation after the code has deployed.
    is_dangerous = True

    dependencies = [
        ("sentry", "0564_commitfilechange_delete_language_column"),
    ]

    operations = [
        migrations.RunPython(
            fix_diff_env_rules,
            migrations.RunPython.noop,
            hints={"tables": ["sentry_rule"]},
        ),
    ]
