# Generated by Django 2.2.27 on 2022-04-08 22:24

from django.db import migrations

from sentry.new_migrations.migrations import CheckedMigration
from sentry.utils.query import RangeQuerySetWrapperWithProgressBar


def backfill_alert_owners(apps, schema_editor):
    AlertRule = apps.get_model("sentry", "AlertRule")
    User = apps.get_model("sentry", "User")
    OrganizationMember = apps.get_model("sentry", "OrganizationMember")

    for alert_rule in RangeQuerySetWrapperWithProgressBar(AlertRule.objects_with_snapshots.all()):
        if not alert_rule.owner:
            continue

        owner = alert_rule.owner.resolve()

        valid_owner = False
        if (
            isinstance(owner, User)
            and OrganizationMember.objects.filter(
                organization=owner.organization, id=owner.id
            ).exists()
        ):
            valid_owner = True

        # Alerts assigned to a team should always have the owner removed.
        if not valid_owner:
            alert_rule.owner = None
            alert_rule.save()


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production. For
    # the most part, this should only be used for operations where it's safe to run the migration
    # after your code has deployed. So this should not be used for most operations that alter the
    # schema of a table.
    # Here are some things that make sense to mark as dangerous:
    # - Large data migrations. Typically we want these to be run manually by ops so that they can
    #   be monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   have ops run this and not block the deploy. Note that while adding an index is a schema
    #   change, it's completely safe to run the operation after the code has deployed.
    is_dangerous = True

    # This flag is used to decide whether to run this migration in a transaction or not. Generally
    # we don't want to run in a transaction here, since for long running operations like data
    # back-fills this results in us locking an increasing number of rows until we finally commit.
    atomic = False

    dependencies = [
        ("sentry", "0294_backfill_alert_owners"),
    ]

    operations = [
        migrations.RunPython(
            backfill_alert_owners,
            migrations.RunPython.noop,
            hints={"tables": ["sentry_alertrule"]},
        ),
    ]
