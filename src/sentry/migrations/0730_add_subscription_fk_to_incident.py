# Generated by Django 5.0.6 on 2024-06-12 16:47

import logging

import django.db.models.deletion
from django.db import migrations
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.db.migrations.state import StateApps

import sentry.db.models.fields.foreignkey
from sentry.new_migrations.migrations import CheckedMigration
from sentry.utils.query import RangeQuerySetWrapper

logger = logging.getLogger(__name__)


def _backfill_incident_subscription(
    apps: StateApps, schema_editor: BaseDatabaseSchemaEditor
) -> None:
    Incident = apps.get_model("sentry", "Incident")

    # use RangeQuerySetWrapper to avoid loading all Incidents into memory
    for incident in RangeQuerySetWrapper(Incident.objects.all()):
        if incident.subscription:
            continue

        alert_rule = incident.alert_rule
        snuba_query = alert_rule.snuba_query
        subscriptions = list(snuba_query.subscriptions.all())
        if len(subscriptions) == 0 or len(subscriptions) > 1:
            logger.info(
                "Incident found with no or multiple subscriptions. skipping",
                extra={
                    "incident_id": incident.id,
                    "snuba_query_id": snuba_query.id,
                    "subscription_ids": [
                        subscription.id for subscription in subscriptions if len(subscriptions) > 0
                    ],
                },
            )
            continue

        subscription = subscriptions[0]
        incident.subscription = subscription
        incident.save(update_fields=["subscription"])


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production.
    # This should only be used for operations where it's safe to run the migration after your
    # code has deployed. So this should not be used for most operations that alter the schema
    # of a table.
    # Here are some things that make sense to mark as post deployment:
    # - Large data migrations. Typically we want these to be run manually so that they can be
    #   monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   run this outside deployments so that we don't block them. Note that while adding an index
    #   is a schema change, it's completely safe to run the operation after the code has deployed.
    # Once deployed, run these manually via: https://develop.sentry.dev/database-migrations/#migration-deployment

    is_post_deployment = True

    dependencies = [
        ("sentry", "0729_backfill_groupsearchviews_with_pinned_searches"),
    ]

    operations = [
        migrations.AlterField(
            model_name="incident",
            name="subscription",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="sentry.querysubscription",
            ),
        ),
        # Run the data migration
        migrations.RunPython(
            _backfill_incident_subscription,
            migrations.RunPython.noop,
            hints={"tables": ["sentry_incident", "sentry_querysubscription"]},
        ),
    ]
