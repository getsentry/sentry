# Generated by Django 1.11.29 on 2020-10-22 08:13

from django.db import migrations
from sentry.utils.query import RangeQuerySetWrapperWithProgressBar


def backfill_debug_file_checksum(apps, schema_editor):
    """
    Fill the ProjectDebugFile.checksum from related File.checksum.
    """
    ProjectDebugFile = apps.get_model("sentry", "ProjectDebugFile")
    all_debug_files = ProjectDebugFile.objects.filter(checksum__isnull=True).select_related("file")
    for debug_file in RangeQuerySetWrapperWithProgressBar(queryset=all_debug_files, step=1000):
        if debug_file.file.checksum:
            ProjectDebugFile.objects.filter(id=debug_file.id).update(
                checksum=debug_file.file.checksum
            )


class Migration(migrations.Migration):
    # This flag is used to mark that a migration shouldn't be automatically run in
    # production. We set this to True for operations that we think are risky and want
    # someone from ops to run manually and monitor.
    # General advice is that if in doubt, mark your migration as `is_dangerous`.
    # Some things you should always mark as dangerous:
    # - Large data migrations. Typically we want these to be run manually by ops so that
    #   they can be monitored. Since data migrations will now hold a transaction open
    #   this is even more important.
    # - Adding columns to highly active tables, even ones that are NULL.
    is_dangerous = True

    # This flag is used to decide whether to run this migration in a transaction or not.
    # By default we prefer to run in a transaction, but for migrations where you want
    # to `CREATE INDEX CONCURRENTLY` this needs to be set to False. Typically you'll
    # want to create an index concurrently when adding one to an existing table.
    atomic = False

    dependencies = [
        ("sentry", "0115_add_checksum_to_debug_file"),
    ]

    operations = [
        migrations.RunPython(backfill_debug_file_checksum, migrations.RunPython.noop),
    ]
