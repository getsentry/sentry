# Generated by Django 5.2.1 on 2025-05-20 17:45

from enum import Enum

from django.db import migrations
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.db.migrations.state import StateApps
from django.db.models import Q

from sentry.discover.dashboard_widget_split import _get_and_save_split_decision_for_dashboard_widget
from sentry.models.dashboard_widget import TypesClass
from sentry.new_migrations.migrations import CheckedMigration
from sentry.utils.query import RangeQuerySetWrapperWithProgressBar


class DashboardWidgetTypes(TypesClass):
    DISCOVER = 0
    """
    Old way of accessing error events and transaction events simultaneously @deprecated. Use ERROR_EVENTS or TRANSACTION_LIKE instead.
    """
    ISSUE = 1
    RELEASE_HEALTH = 2
    METRICS = 3
    ERROR_EVENTS = 100
    """
     Error side of the split from Discover.
    """
    TRANSACTION_LIKE = 101
    """
    This targets transaction-like data from the split from discover. It may either use 'Transactions' events or 'PerformanceMetrics' depending on on-demand, MEP metrics, etc.
    """
    SPANS = 102
    LOGS = 103
    """
    These represent the logs trace item type on the EAP dataset.
    """

    TYPES = [
        (DISCOVER, "discover"),
        (ISSUE, "issue"),
        (
            RELEASE_HEALTH,
            "metrics",
        ),
        (ERROR_EVENTS, "error-events"),
        (TRANSACTION_LIKE, "transaction-like"),
        (SPANS, "spans"),
        (LOGS, "logs"),
    ]
    TYPE_NAMES = [t[1] for t in TYPES]


class DatasetSourcesTypes(Enum):
    """
    Ambiguous queries that haven't been or couldn't be categorized into a
    specific dataset.
    """

    UNKNOWN = 0
    """
     Dataset inferred by either running the query or using heuristics.
    """
    INFERRED = 1
    """
     Canonical dataset, user explicitly selected it.
    """
    USER = 2
    """
     Was an ambiguous dataset forced to split (i.e. we picked a default)
    """
    FORCED = 3
    """
     Dataset inferred by split script, version 1
    """
    SPLIT_VERSION_1 = 4
    """
     Dataset inferred by split script, version 2
    """
    SPLIT_VERSION_2 = 5

    @classmethod
    def as_choices(cls) -> tuple[tuple[int, str], ...]:
        return tuple((source.value, source.name.lower()) for source in cls)

    @classmethod
    def as_text_choices(cls) -> tuple[tuple[str, int], ...]:
        return tuple((source.name.lower(), source.value) for source in cls)


class DashboardWidgetDisplayTypes(TypesClass):
    LINE_CHART = 0
    AREA_CHART = 1
    STACKED_AREA_CHART = 2
    BAR_CHART = 3
    TABLE = 4
    BIG_NUMBER = 6
    TOP_N = 7
    TYPES = [
        (LINE_CHART, "line"),
        (AREA_CHART, "area"),
        (STACKED_AREA_CHART, "stacked_area"),
        (BAR_CHART, "bar"),
        (TABLE, "table"),
        (BIG_NUMBER, "big_number"),
        (TOP_N, "top_n"),
    ]
    TYPE_NAMES = [t[1] for t in TYPES]


def split_discover_dataset_dashboards_self_hosted(
    apps: StateApps, schema_editor: BaseDatabaseSchemaEditor
) -> None:
    DashboardWidgetQuery = apps.get_model("sentry", "DashboardWidgetQuery")
    catch_all_unsplit_widgets = Q(
        widget__widget_type=DashboardWidgetTypes.DISCOVER,
    ) & ~Q(
        widget__discover_widget_split__in=[
            DashboardWidgetTypes.ERROR_EVENTS,
            DashboardWidgetTypes.TRANSACTION_LIKE,
        ]
    )

    queryset = DashboardWidgetQuery.objects.filter(
        catch_all_unsplit_widgets,
    ).select_related("widget__dashboard__organization")

    for widget_query in RangeQuerySetWrapperWithProgressBar(queryset):
        try:
            _get_and_save_split_decision_for_dashboard_widget(widget_query, dry_run=False)
        except Exception:
            widget_query.widget.discover_widget_split = DashboardWidgetTypes.ERROR_EVENTS
            widget_query.widget.dataset_source = DatasetSourcesTypes.UNKNOWN.value
            widget_query.widget.save()


def reverse_split_discover_dataset_dashboards_self_hosted(
    apps: StateApps, schema_editor: BaseDatabaseSchemaEditor
) -> None:
    DashboardWidgetQuery = apps.get_model("sentry", "DashboardWidgetQuery")
    all_split_widgets = Q(
        widget__discover_widget_split__in=[
            DashboardWidgetTypes.ERROR_EVENTS,
            DashboardWidgetTypes.TRANSACTION_LIKE,
        ]
    )

    queryset = DashboardWidgetQuery.objects.filter(all_split_widgets)

    for widget_query in RangeQuerySetWrapperWithProgressBar(queryset):
        widget_query.widget.discover_widget_split = None
        widget_query.widget.dataset_source = DatasetSourcesTypes.UNKNOWN.value
        widget_query.widget.save()


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production.
    # This should only be used for operations where it's safe to run the migration after your
    # code has deployed. So this should not be used for most operations that alter the schema
    # of a table.
    # Here are some things that make sense to mark as post deployment:
    # - Large data migrations. Typically we want these to be run manually so that they can be
    #   monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   run this outside deployments so that we don't block them. Note that while adding an index
    #   is a schema change, it's completely safe to run the operation after the code has deployed.
    # Once deployed, run these manually via: https://develop.sentry.dev/database-migrations/#migration-deployment

    is_post_deployment = True

    dependencies = [
        ("sentry", "0912_make_organizationmemberteam_replica_is_active_true"),
    ]

    operations = [
        migrations.RunPython(
            split_discover_dataset_dashboards_self_hosted,
            reverse_code=reverse_split_discover_dataset_dashboards_self_hosted,
            hints={"tables": ["sentry_dashboardwidget"]},
        )
    ]
