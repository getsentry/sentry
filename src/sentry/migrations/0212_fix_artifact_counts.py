# Generated by Django 1.11.29 on 2021-06-21 07:28

from django.db import migrations
from django.db.models import Q

from sentry.utils.query import RangeQuerySetWrapperWithProgressBar

#: Copied from releasefile.py
ARTIFACT_INDEX_FILENAME = "artifact-index.json"


def uncount_internal_releasefiles(apps, schema_editor):
    # artifact_count=None implicitly means "count as 1".
    # Internal release files (artifact index, release archives) created *before*
    # 0211_add_artifact_count must not be counted as 1 but rather as 0, because their
    # individual files were saved with a count of None as well.
    ReleaseFile = apps.get_model("sentry", "ReleaseFile")
    db_alias = schema_editor.connection.alias
    qs = ReleaseFile.objects.using(db_alias).filter(
        Q(name=ARTIFACT_INDEX_FILENAME)
        | (Q(name__startswith="release-artifacts") & Q(name__endswith=".zip")),
        artifact_count=None,
    )
    for releasefile in RangeQuerySetWrapperWithProgressBar(qs, step=1000):
        releasefile.artifact_count = 0
        releasefile.save()


class Migration(migrations.Migration):
    # This flag is used to mark that a migration shouldn't be automatically run in
    # production. We set this to True for operations that we think are risky and want
    # someone from ops to run manually and monitor.
    # General advice is that if in doubt, mark your migration as `is_dangerous`.
    # Some things you should always mark as dangerous:
    # - Large data migrations. Typically we want these to be run manually by ops so that
    #   they can be monitored. Since data migrations will now hold a transaction open
    #   this is even more important.
    # - Adding columns to highly active tables, even ones that are NULL.
    is_dangerous = True

    # This flag is used to decide whether to run this migration in a transaction or not.
    # By default we prefer to run in a transaction, but for migrations where you want
    # to `CREATE INDEX CONCURRENTLY` this needs to be set to False. Typically you'll
    # want to create an index concurrently when adding one to an existing table.
    # You'll also usually want to set this to `False` if you're writing a data
    # migration, since we don't want the entire migration to run in one long-running
    # transaction.
    atomic = False

    dependencies = [
        ("sentry", "0211_add_artifact_count"),
    ]

    operations = [
        migrations.RunPython(
            code=uncount_internal_releasefiles,
            # There is no way to identify the release files affected by the forward migration
            # Also, no good reason to set their counts back to None, so do nothing here
            reverse_code=migrations.RunPython.noop,
        )
    ]
