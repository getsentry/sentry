# Generated by Django 5.2.1 on 2025-05-21 16:31

import django.db.models.deletion
from django.db import migrations, models

import sentry.db.models.fields.foreignkey
from sentry.new_migrations.migrations import CheckedMigration


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production.
    # This should only be used for operations where it's safe to run the migration after your
    # code has deployed. So this should not be used for most operations that alter the schema
    # of a table.
    # Here are some things that make sense to mark as post deployment:
    # - Large data migrations. Typically we want these to be run manually so that they can be
    #   monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   run this outside deployments so that we don't block them. Note that while adding an index
    #   is a schema change, it's completely safe to run the operation after the code has deployed.
    # Once deployed, run these manually via: https://develop.sentry.dev/database-migrations/#migration-deployment

    is_post_deployment = True

    replaces = [
        ("sentry", "0815_add_action_cols_to_threads_model"),
        ("sentry", "0817_update_notificationmessage_constraints_for_action_group_open_period"),
    ]

    dependencies = [
        ("sentry", "0001_squashed_0904_onboarding_task_project_id_idx"),
        ("workflow_engine", "0001_squashed_0065_add_status_to_detector_and_workflow"),
    ]

    operations = [
        migrations.AddField(
            model_name="notificationmessage",
            name="action",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE, to="workflow_engine.action"
            ),
        ),
        migrations.AddConstraint(
            model_name="notificationmessage",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(
                        ("incident__isnull", False),
                        ("trigger_action__isnull", False),
                        ("rule_action_uuid__isnull", True),
                        ("rule_fire_history__isnull", True),
                        ("action__isnull", True),
                        ("group__isnull", True),
                        ("open_period_start__isnull", True),
                    ),
                    models.Q(
                        ("incident__isnull", True),
                        ("trigger_action__isnull", True),
                        ("rule_action_uuid__isnull", False),
                        ("rule_fire_history__isnull", False),
                        ("action__isnull", True),
                        ("group__isnull", True),
                    ),
                    models.Q(
                        ("incident__isnull", True),
                        ("trigger_action__isnull", True),
                        ("rule_action_uuid__isnull", True),
                        ("rule_fire_history__isnull", True),
                        ("action__isnull", False),
                        ("group__isnull", False),
                    ),
                    _connector="OR",
                ),
                name="notification_type_mutual_exclusivity",
            ),
        ),
    ]
