# Generated by Django 1.11.29 on 2020-11-10 00:02

from django.db import migrations
from sentry.utils.query import RangeQuerySetWrapperWithProgressBar


def backfill_platformexternalissue_project_id(apps, schema_editor):
    """
    Fill the PlatformExternalIssue.project_id from related Group.project_id.
    """
    PlatformExternalIssue = apps.get_model("sentry", "PlatformExternalIssue")
    Group = apps.get_model("sentry", "Group")
    external_issues_with_group = PlatformExternalIssue.objects.filter(
        project_id__isnull=True
    ).select_related("group")
    for external_issue in RangeQuerySetWrapperWithProgressBar(
        queryset=external_issues_with_group, step=1000
    ):
        try:
            PlatformExternalIssue.objects.filter(id=external_issue.id).update(
                project_id=external_issue.group.project_id
            )
        except Group.DoesNotExist:
            pass


class Migration(migrations.Migration):
    # This flag is used to mark that a migration shouldn't be automatically run in
    # production. We set this to True for operations that we think are risky and want
    # someone from ops to run manually and monitor.
    # General advice is that if in doubt, mark your migration as `is_dangerous`.
    # Some things you should always mark as dangerous:
    # - Large data migrations. Typically we want these to be run manually by ops so that
    #   they can be monitored. Since data migrations will now hold a transaction open
    #   this is even more important.
    # - Adding columns to highly active tables, even ones that are NULL.
    is_dangerous = True

    # This flag is used to decide whether to run this migration in a transaction or not.
    # By default we prefer to run in a transaction, but for migrations where you want
    # to `CREATE INDEX CONCURRENTLY` this needs to be set to False. Typically you'll
    # want to create an index concurrently when adding one to an existing table.
    atomic = False

    dependencies = [
        ("sentry", "0126_make_platformexternalissue_group_id_flexfk"),
    ]

    operations = [
        migrations.RunPython(backfill_platformexternalissue_project_id, migrations.RunPython.noop),
    ]
