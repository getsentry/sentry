# Generated by Django 1.11.29 on 2021-02-24 00:18
import logging

from django.db import migrations, transaction


def fix_metric_alert_group_ids(apps, schema_editor):
    from sentry.snuba.tasks import update_subscription_in_snuba

    QuerySubscription = apps.get_model("sentry", "QuerySubscription")

    # This table has < 10k rows, so filtering on an unindexed column will be fine. This
    # should return < 50 rows in Saas, and even fewer on other deploys
    for subscription in QuerySubscription.objects.filter(snuba_query__query__contains="issue.id"):
        # We want to recreate the subscription in snuba, so that the conditions are built
        # properly for issue ids. To do this, we just fire off the update task.
        try:
            with transaction.atomic():
                subscription.status = 2  # QuerySubscription.Status.UPDATING.value
                subscription.save()
                update_subscription_in_snuba(subscription.id)
        except Exception:
            logging.exception("Failed to fix subscription")


class Migration(migrations.Migration):
    # This flag is used to mark that a migration shouldn't be automatically run in
    # production. We set this to True for operations that we think are risky and want
    # someone from ops to run manually and monitor.
    # General advice is that if in doubt, mark your migration as `is_dangerous`.
    # Some things you should always mark as dangerous:
    # - Large data migrations. Typically we want these to be run manually by ops so that
    #   they can be monitored. Since data migrations will now hold a transaction open
    #   this is even more important.
    # - Adding columns to highly active tables, even ones that are NULL.
    is_dangerous = False

    # This flag is used to decide whether to run this migration in a transaction or not.
    # By default we prefer to run in a transaction, but for migrations where you want
    # to `CREATE INDEX CONCURRENTLY` this needs to be set to False. Typically you'll
    # want to create an index concurrently when adding one to an existing table.
    # You'll also usually want to set this to `False` if you're writing a data
    # migration, since we don't want the entire migration to run in one long-running
    # transaction.
    atomic = False

    dependencies = [
        ("sentry", "0164_add_protect_on_delete_codeowners"),
    ]

    operations = [
        migrations.RunPython(fix_metric_alert_group_ids, reverse_code=migrations.RunPython.noop)
    ]
