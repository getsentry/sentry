# Generated by Django 5.2.1 on 2025-07-16 15:08

from enum import Enum
from typing import Any

from django.db import migrations
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.db.migrations.state import StateApps

from sentry.new_migrations.migrations import CheckedMigration
from sentry.utils.query import RangeQuerySetWrapperWithProgressBar


class EventType(Enum):
    ERROR = 0
    DEFAULT = 1
    TRANSACTION = 2
    TRACE_ITEM_SPAN = 3
    TRACE_ITEM_LOG = 4


def fix_span_item_event_type_alerts(
    apps: StateApps, schema_editor: BaseDatabaseSchemaEditor
) -> None:
    SnubaQuery = apps.get_model("sentry", "SnubaQuery")
    SnubaQueryEventType = apps.get_model("sentry", "SnubaQueryEventType")

    for snuba_query in RangeQuerySetWrapperWithProgressBar(
        SnubaQuery.objects.filter(dataset="events_analytics_platform")
    ):
        event_type_objects = SnubaQueryEventType.objects.filter(snuba_query=snuba_query)

        log_event_type: Any | None = None
        span_event_type: Any | None = None
        transaction_event_type: Any | None = None

        for event_type in event_type_objects:
            if event_type.type == EventType.TRACE_ITEM_SPAN.value:
                span_event_type = event_type
            if event_type.type == EventType.TRACE_ITEM_LOG.value:
                log_event_type = event_type
            if event_type.type == EventType.TRANSACTION.value:
                transaction_event_type = event_type

        # We have always explicitly set event type for logs, so if log event type
        # exists, we know it's a log alert, so skip the rest of the logic.
        if log_event_type is not None:
            continue

        # If it's not a log alerts and dataset is events_analytics_platform,
        # we know it's a span alert.
        if span_event_type is None:
            SnubaQueryEventType.objects.create(
                snuba_query=snuba_query, type=EventType.TRACE_ITEM_SPAN.value
            )

        # Always delete transaction event type.
        if transaction_event_type is not None:
            transaction_event_type.delete()


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production.
    # This should only be used for operations where it's safe to run the migration after your
    # code has deployed. So this should not be used for most operations that alter the schema
    # of a table.
    # Here are some things that make sense to mark as post deployment:
    # - Large data migrations. Typically we want these to be run manually so that they can be
    #   monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   run this outside deployments so that we don't block them. Note that while adding an index
    #   is a schema change, it's completely safe to run the operation after the code has deployed.
    # Once deployed, run these manually via: https://develop.sentry.dev/database-migrations/#migration-deployment

    is_post_deployment = True

    dependencies = [
        ("sentry", "0951_delete_ds_waiver"),
    ]

    operations = [
        migrations.RunPython(
            fix_span_item_event_type_alerts,
            reverse_code=migrations.RunPython.noop,
            hints={"tables": ["sentry_snubaquery", "sentry_snubaqueryeventtype"]},
        ),
    ]
