# Generated by Django 2.2.28 on 2023-01-31 22:25

from django.db import migrations, models

import sentry.db.models.fields.hybrid_cloud_foreign_key
from sentry.new_migrations.migrations import CheckedMigration


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production. For
    # the most part, this should only be used for operations where it's safe to run the migration
    # after your code has deployed. So this should not be used for most operations that alter the
    # schema of a table.
    # Here are some things that make sense to mark as dangerous:
    # - Large data migrations. Typically we want these to be run manually by ops so that they can
    #   be monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   have ops run this and not block the deploy. Note that while adding an index is a schema
    #   change, it's completely safe to run the operation after the code has deployed.
    is_dangerous = False

    dependencies = [
        ("sentry", "0353_add_missing_uuid_unique_indexes"),
    ]

    database_operations = [
        migrations.AlterField(
            model_name="savedsearch",
            name="owner",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                to="sentry.User", db_constraint=False, db_index=True, null=True
            ),
        ),
    ]

    state_operations = [
        migrations.AlterField(
            model_name="savedsearch",
            name="owner",
            # field=models.IntegerField(db_index=True, null=False),
            field=sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                "sentry.User",
                db_index=True,
                null=True,
                on_delete="CASCADE",
            ),
        ),
        migrations.RenameField(model_name="savedsearch", old_name="owner", new_name="owner_id"),
        migrations.RemoveConstraint(
            model_name="savedsearch",
            name="sentry_savedsearch_pinning_constraint",
        ),
        migrations.AddConstraint(
            model_name="savedsearch",
            constraint=models.UniqueConstraint(
                condition=models.Q(visibility="owner_pinned"),
                fields=("organization", "owner_id", "type"),
                name="sentry_savedsearch_pinning_constraint",
            ),
        ),
    ]

    operations = [
        migrations.SeparateDatabaseAndState(
            database_operations=database_operations, state_operations=state_operations
        )
    ]
