# Generated by Django 2.2.28 on 2023-02-01 23:50

from django.db import migrations

from sentry.new_migrations.migrations import CheckedMigration


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production. For
    # the most part, this should only be used for operations where it's safe to run the migration
    # after your code has deployed. So this should not be used for most operations that alter the
    # schema of a table.
    # Here are some things that make sense to mark as dangerous:
    # - Large data migrations. Typically we want these to be run manually by ops so that they can
    #   be monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   have ops run this and not block the deploy. Note that while adding an index is a schema
    #   change, it's completely safe to run the operation after the code has deployed.

    # There are a 10mm+ columns in the monitor checkins table
    is_dangerous = True

    dependencies = [
        ("sentry", "0352_add_org_role_to_team_model"),
    ]

    operations = [
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    """
                    CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS sentry_monitor_guid_key ON sentry_monitor USING btree (guid);
                    """,
                    reverse_sql="""
                    ALTER TABLE sentry_monitor DROP CONSTRAINT IF EXISTS sentry_monitor_guid_key;
                    """,
                    hints={
                        "tables": [
                            "sentry_monitor",
                        ]
                    },
                ),
                migrations.RunSQL(
                    """
                    CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS sentry_monitorcheckin_guid_key ON sentry_monitorcheckin USING btree (guid);
                    """,
                    reverse_sql="""
                    ALTER TABLE sentry_monitorcheckin DROP CONSTRAINT IF EXISTS sentry_monitorcheckin_guid_key;
                    """,
                    hints={
                        "tables": [
                            "sentry_monitorcheckin",
                        ]
                    },
                ),
                migrations.RunSQL(
                    """
                    CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS sentry_monitorlocation_guid_key ON sentry_monitorlocation USING btree (guid);
                    """,
                    reverse_sql="""
                    ALTER TABLE sentry_monitorlocation DROP CONSTRAINT IF EXISTS sentry_monitorlocation_guid_key;
                    """,
                    hints={
                        "tables": [
                            "sentry_monitorlocation",
                        ]
                    },
                ),
            ],
            state_operations=[],
        )
    ]
