# -*- coding: utf-8 -*-
# Generated by Django 1.11.29 on 2020-05-06 21:19
from __future__ import unicode_literals

from datetime import timedelta

from django.db import migrations, transaction
from enum import Enum

from sentry.utils.query import RangeQuerySetWrapperWithProgressBar


class QueryAggregations(Enum):
    TOTAL = 0
    UNIQUE_USERS = 1


aggregation_function_translations = {
    QueryAggregations.TOTAL: "count()",
    QueryAggregations.UNIQUE_USERS: "count_unique(user)",
}


def convert_alert_rule_to_snuba_query(alert_rule, SnubaQuery):
    if alert_rule.snuba_query:
        return

    with transaction.atomic():
        try:
            environment = alert_rule.environment.all()[0]
        except IndexError:
            environment = None
        snuba_query = SnubaQuery.objects.create(
            dataset=alert_rule.dataset,
            query=alert_rule.query,
            aggregate=aggregation_function_translations[QueryAggregations(alert_rule.aggregation)],
            time_window=int(timedelta(minutes=alert_rule.time_window).total_seconds()),
            resolution=int(timedelta(minutes=alert_rule.resolution).total_seconds()),
            environment=environment,
        )
        alert_rule.snuba_query = snuba_query
        alert_rule.save()
        alert_rule.query_subscriptions.all().update(snuba_query=snuba_query)


def migrate_alert_query_model(apps, schema_editor):
    AlertRule = apps.get_model("sentry", "AlertRule")
    SnubaQuery = apps.get_model("sentry", "SnubaQuery")
    for alert_rule in RangeQuerySetWrapperWithProgressBar(
        AlertRule.objects_with_snapshots.filter(snuba_query__isnull=True)
    ):
        convert_alert_rule_to_snuba_query(alert_rule, SnubaQuery)


class Migration(migrations.Migration):
    # This flag is used to mark that a migration shouldn't be automatically run in
    # production. We set this to True for operations that we think are risky and want
    # someone from ops to run manually and monitor.
    # General advice is that if in doubt, mark your migration as `is_dangerous`.
    # Some things you should always mark as dangerous:
    # - Large data migrations. Typically we want these to be run manually by ops so that
    #   they can be monitored. Since data migrations will now hold a transaction open
    #   this is even more important.
    # - Adding columns to highly active tables, even ones that are NULL.
    is_dangerous = False

    # This flag is used to decide whether to run this migration in a transaction or not.
    # By default we prefer to run in a transaction, but for migrations where you want
    # to `CREATE INDEX CONCURRENTLY` this needs to be set to False. Typically you'll
    # want to create an index concurrently when adding one to an existing table.
    atomic = False

    dependencies = [("sentry", "0072_alert_rules_query_changes")]

    operations = [
        migrations.RunPython(migrate_alert_query_model, reverse_code=migrations.RunPython.noop)
    ]
