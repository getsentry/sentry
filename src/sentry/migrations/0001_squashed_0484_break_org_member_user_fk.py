# Generated by Django 2.2.28 on 2023-06-14 19:11

import datetime

import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.db.migrations.operations.special
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models
from django.utils.timezone import utc

import bitfield.models
import sentry.db.mixin
import sentry.db.models.fields.array
import sentry.db.models.fields.bounded
import sentry.db.models.fields.citext
import sentry.db.models.fields.foreignkey
import sentry.db.models.fields.gzippeddict
import sentry.db.models.fields.hybrid_cloud_foreign_key
import sentry.db.models.fields.jsonfield
import sentry.db.models.fields.node
import sentry.db.models.fields.onetoone
import sentry.db.models.fields.picklefield
import sentry.db.models.fields.text
import sentry.db.models.fields.uuid
import sentry.models.apiapplication
import sentry.models.apigrant
import sentry.models.apitoken
import sentry.models.authenticator
import sentry.models.broadcast
import sentry.models.groupshare
import sentry.models.integrations.sentry_app
import sentry.models.integrations.sentry_app_installation
import sentry.models.scheduledeletion
import sentry.models.servicehook
import sentry.models.user
import sentry.utils.security.hash
from sentry.new_migrations.migrations import CheckedMigration


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production. For
    # the most part, this should only be used for operations where it's safe to run the migration
    # after your code has deployed. So this should not be used for most operations that alter the
    # schema of a table.
    # Here are some things that make sense to mark as dangerous:
    # - Large data migrations. Typically we want these to be run manually by ops so that they can
    #   be monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   have ops run this and not block the deploy. Note that while adding an index is a schema
    #   change, it's completely safe to run the operation after the code has deployed.
    is_dangerous = False

    replaces = [
        ("sentry", "0001_squashed_0200_release_indices"),
        ("sentry", "0201_semver_package"),
        ("sentry", "0202_org_slug_upper_idx"),
        ("sentry", "0203_groupedmessage_status_index"),
        ("sentry", "0204_use_project_team_for_team_key_transactions"),
        ("sentry", "0205_semver_backfill"),
        ("sentry", "0206_organization_require_email_verification_flag"),
        ("sentry", "0207_release_adoption"),
        ("sentry", "0208_add_team_scope"),
        ("sentry", "0209_avatar_remove_file_fk"),
        ("sentry", "0210_backfill_project_transaction_thresholds"),
        ("sentry", "0211_add_artifact_count"),
        ("sentry", "0212_appconnectbuilds"),
        ("sentry", "0213_rule_project_status_owner_index"),
        ("sentry", "0214_activity_project_type_datetime_idx"),
        ("sentry", "0215_fix_state"),
        ("sentry", "0216_cdc_setup_replication_index"),
        ("sentry", "0217_debugfile_remove_project_fk"),
        ("sentry", "0218_releasefile_remove_fks"),
        ("sentry", "0219_exporteddatablob_remove_blob_fk"),
        ("sentry", "0220_add_current_release_version_group_resolution"),
        ("sentry", "0221_add_appconnect_upload_dates"),
        ("sentry", "0222_add_datetime_index_to_auditlogentry"),
        ("sentry", "0223_semver_backfill_2"),
        ("sentry", "0224_has_sessions_flag"),
        ("sentry", "0225_latest_appconnect_builds_check"),
        ("sentry", "0226_add_visits"),
        ("sentry", "0227_backfill_visits"),
        ("sentry", "0228_update_auditlog_index_with_entry"),
        ("sentry", "0229_drop_jiratenant"),
        ("sentry", "0230_sentry_app_config_jsonfield"),
        ("sentry", "0231_alert_rule_comparison_delta"),
        ("sentry", "0232_backfill_missed_semver_releases"),
        ("sentry", "0233_recreate_subscriptions_in_snuba"),
        ("sentry", "0234_grouphistory"),
        ("sentry", "0235_add_metricskeyindexer_table"),
        ("sentry", "0236_remove_legacy_key_transactions"),
        ("sentry", "0237_recreate_subscriptions_in_snuba"),
        ("sentry", "0238_remove_scheduleddeletion_aborted"),
        ("sentry", "0239_drop_scheduleddeletion_aborted"),
        ("sentry", "0240_grouphistory_index"),
        ("sentry", "0241_grouphistory_null_actor"),
        ("sentry", "0242_delete_removed_plugin_data"),
        ("sentry", "0243_delete_visualstudio_repo_data"),
        ("sentry", "0244_organization_and_integration_foreign_keys"),
        ("sentry", "0245_delete_itunes_credentials"),
        ("sentry", "0246_incident_snapshots_remove_fks"),
        ("sentry", "0247_add_color_column"),
        ("sentry", "0248_add_popularity_column"),
        ("sentry", "0249_add_avatar_type_back"),
        ("sentry", "0250_backfill_popularity"),
        ("sentry", "0251_sentryappavatar_sentryapp_not_unique"),
        ("sentry", "0252_code_mapping_cascade_delete"),
        ("sentry", "0253_add_widget_type"),
        ("sentry", "0254_org_integration_grace_period_end"),
        ("sentry", "0255_delete_code_mappings_with_no_integration"),
        ("sentry", "0256_create_docintegration_table"),
        ("sentry", "0257_add_target_id_and_type_to_integrationfeature"),
        ("sentry", "0258_create_docintegrationavatar_table"),
        ("sentry", "0259_delete_codeowners_and_code_mappings_with_no_integration"),
        ("sentry", "0260_backfill_integrationfeature"),
        ("sentry", "0261_prepare_remove_sentry_app_column"),
        ("sentry", "0262_drop_sentry_app_from_integrationfeature"),
        ("sentry", "0263_remove_not_null_integrationfeature"),
        ("sentry", "0264_use_booleanfield_docintegration"),
        ("sentry", "0265_add_userrole"),
        ("sentry", "0266_add_dashboard_widget_detail_field"),
        ("sentry", "0267_sentry_release_version_btree"),
        ("sentry", "0268_rename_issue_widget_query_fields"),
        ("sentry", "0269_alertrule_remove_unique_name"),
        ("sentry", "0270_group_history_project_date_added_index"),
        ("sentry", "0271_add_codeowners_auto_sync_setting"),
        ("sentry", "0272_seq_scan_indexes"),
        ("sentry", "0273_fix_grouplink_seqscans"),
        ("sentry", "0274_add_dashboardwidgetquery_columns_aggregates"),
        ("sentry", "0275_rule_fire_history"),
        ("sentry", "0276_rulefirehistory_date_added_index"),
        ("sentry", "0277_backfill_dashboard_widget_query_columns_aggregates"),
        ("sentry", "0278_backfill_codeowners_auto_sync_setting"),
        ("sentry", "0279_add_limit_dashboard_widget"),
        ("sentry", "0280_extend_commit_author_email_length"),
        ("sentry", "0281_add_new_indexer_table"),
        ("sentry", "0282_add_field_aliases_dashboard_widget_query"),
        ("sentry", "0283_extend_externalissue_key"),
        ("sentry", "0284_metrics_indexer_alter_seq"),
        ("sentry", "0285_add_organization_member_team_role"),
        ("sentry", "0286_backfill_alertrule_organization"),
        ("sentry", "0287_backfill_snubaquery_environment"),
        ("sentry", "0288_fix_savedsearch_state"),
        ("sentry", "0289_dashboardwidgetquery_convert_orderby_to_field"),
        ("sentry", "0290_fix_project_has_releases"),
        ("sentry", "0291_add_new_perf_indexer"),
        ("sentry", "0292_migrate_sessions_subs_user_counts"),
        ("sentry", "0293_restore_metrics_based_alerts"),
        ("sentry", "0294_alertrule_type"),
        ("sentry", "0295_backfill_alertrule_type"),
        ("sentry", "0296_alertrule_type_not_null"),
        ("sentry", "0297_backfill_alert_owners"),
        ("sentry", "0298_add_dashboard_level_filter_fields"),
        ("sentry", "0299_update_commitfilechange_filename_type"),
        ("sentry", "0300_deploy_date_finished_index"),
        ("sentry", "0301_mep_move_type_to_snuba_query"),
        ("sentry", "0302_mep_backfill_and_not_null_snuba_query_type"),
        ("sentry", "0303_backfill_msteams_default_installation_type"),
        ("sentry", "0304_sentry_functions"),
        ("sentry", "0305_create_releaseactivity_table"),
        ("sentry", "0306_sentry_functions_code"),
        ("sentry", "0307_remove_alert_type_state"),
        ("sentry", "0308_remove_alert_type_column"),
        ("sentry", "0309_fix_many_to_many_field"),
        ("sentry", "0310_sentry_functions_add_webhooks"),
        ("sentry", "0311_backfill_slack_settings"),
        ("sentry", "0312_has_profiles_flag"),
        ("sentry", "0313_sentry_functions_env_variables"),
        ("sentry", "0314_bit_int_for_org_and_project_id"),
        ("sentry", "0315_add_type_to_group"),
        ("sentry", "0316_add_context_field_to_groupowner"),
        ("sentry", "0317_groupedmessage_type_index"),
        ("sentry", "0318_add_is_homepage_to_saved_query_model"),
        ("sentry", "0319_projectownership_fallthrough_false"),
        ("sentry", "0320_rule_history_event_id"),
        ("sentry", "0321_suspect_committer_auto_assignment"),
        ("sentry", "0322_projectownership_fallthrough_revert"),
        ("sentry", "0323_backfill_ownership_for_projects_with_codeowners"),
        ("sentry", "0324_set_auto_assignments_true_by_default"),
        ("sentry", "0325_turn_off_suspect_committer_auto_assignment_as_default"),
        ("sentry", "0326_add_first_transaction_to_release_project"),
        ("sentry", "0327_add_appid_str"),
        ("sentry", "0328_backfill_app_id_str"),
        ("sentry", "0329_make_app_id_nullable"),
        ("sentry", "0330_add_project_replay_sent_flag"),
        ("sentry", "0331_redirect_app_id"),
        ("sentry", "0332_release_user_agent"),
        ("sentry", "0333_remove_app_id"),
        ("sentry", "0334_repositorypath_automatically_generated"),
        ("sentry", "0335_cleanup_old_savedsearches"),
        ("sentry", "0336_mark_deprecated_savedsearch_is_default_nullable"),
        ("sentry", "0337_drop_deprecated_savedsearch_columns"),
        ("sentry", "0338_add_saved_search_visibility"),
        ("sentry", "0339_mark_old_pinned_savedsearches"),
        ("sentry", "0340_drop_deprecated_savedsearch_columns_db_op"),
        ("sentry", "0341_reconstrain_savedsearch_pinning_fields"),
        ("sentry", "0342_add_spike_protection_flags_to_project"),
        ("sentry", "0343_drop_savedsearch_userdefault_fk_constraints_and_remove_state"),
        ("sentry", "0344_add_idp_flags"),
        ("sentry", "0345_create_organizationmapping"),
        ("sentry", "0346_add_flags_field_to_team_model"),
        ("sentry", "0347_add_project_has_minified_stack_trace_flag"),
        ("sentry", "0348_add_outbox_and_tombstone_tables"),
        ("sentry", "0349_issue_alert_fallback"),
        ("sentry", "0350_add_codecov_access_flag"),
        ("sentry", "0351_project_has_checkins_monitors"),
        ("sentry", "0352_add_org_role_to_team_model"),
        ("sentry", "0353_add_missing_uuid_unique_indexes"),
        ("sentry", "0354_break_saved_search_foreign_key"),
        ("sentry", "0355_break_groupowner_user_foreign_key"),
        ("sentry", "0356_break_release_owner_foreign_key"),
        ("sentry", "0357_add_region_scheduled_deletions"),
        ("sentry", "0358_break_group_related_user_fks"),
        ("sentry", "0359_checkin_file_field"),
        ("sentry", "0360_authenticator_config_type_change"),
        ("sentry", "0361_monitor_environment"),
        ("sentry", "0362_break_project_integration_fk"),
        ("sentry", "0363_debug_id_artifact_bundle"),
        ("sentry", "0364_remove_project_id_from_environment"),
        ("sentry", "0365_breaking_more_fks"),
        ("sentry", "0366_add_slug_to_monitors"),
        ("sentry", "0367_migrate_monitor_guid_to_slug"),
        ("sentry", "0368_monitor_remove_slug_nullable"),
        ("sentry", "0369_break_useroption_org_fk"),
        ("sentry", "0370_integrate_monitor_environment"),
        ("sentry", "0371_monitor_make_org_slug_unique"),
        ("sentry", "0372_add_uniquetogether_monitorenvironment"),
        ("sentry", "0373_dist_id_to_name"),
        ("sentry", "0374_breaking_even_more_keys"),
        ("sentry", "0375_remove_nullable_from_field"),
        ("sentry", "0376_longer_option_names"),
        ("sentry", "0377_groupedmesssage_type_individual_index"),
        ("sentry", "0378_remove_dynamic_sampling_depricated_data"),
        ("sentry", "0379_create_notificationaction_model"),
        ("sentry", "0380_backfill_monitor_env_initial"),
        ("sentry", "0381_fix_org_slug_casing"),
        ("sentry", "0382_add_installation_id_to_service_hook"),
        ("sentry", "0383_mv_user_avatar"),
        ("sentry", "0384_backfill_installation_ids"),
        ("sentry", "0385_service_hook_hc_fk"),
        ("sentry", "0386_backfill_monitor_env_checkins"),
        ("sentry", "0387_add_until_escalating_column_to_groupsnooze"),
        ("sentry", "0388_remove_unique_constraint_artifact_bundle"),
        ("sentry", "0389_nullify_debug_id_artifact_bundle_field"),
        ("sentry", "0390_remove_field_in_bundle_model"),
        ("sentry", "0391_remove_field_in_bundle_model_from_db"),
        ("sentry", "0392_add_date_uploaded_field_to_bundle"),
        ("sentry", "0393_create_groupforecast_table"),
        ("sentry", "0394_set_none_date_uploaded_to_date_added"),
        ("sentry", "0395_add_index_to_date_added"),
        ("sentry", "0396_add_usecase_to_indexer"),
        ("sentry", "0397_break_some_more_fks"),
        ("sentry", "0398_actor_fk_inversion"),
        ("sentry", "0399_enable_indexes_for_actor_fks"),
        ("sentry", "0400_add_unique_constraint_indexer"),
        ("sentry", "0401_create_rulesnooze_table"),
        ("sentry", "0402_add_organizationmembermapping_table"),
        ("sentry", "0403_backfill_actors"),
        ("sentry", "0404_backfill_user_avatars"),
        ("sentry", "0405_rulesnooze_user_null"),
        ("sentry", "0406_monitor_cleanup"),
        ("sentry", "0407_recreate_perf_alert_subscriptions"),
        ("sentry", "0408_group_add_sub_status"),
        ("sentry", "0409_group_substatus_add_index"),
        ("sentry", "0410_alter_until_escalating_column_from_groupsnooze"),
        ("sentry", "0411_remove_until_escalating_column_from_groupsnooze"),
        ("sentry", "0412_org_integration_denormalization"),
        ("sentry", "0413_backfill_organization_integration_denormalization"),
        ("sentry", "0414_add_org_index_to_repo_and_pagerduty"),
        ("sentry", "0415_backfill_actor_team_and_user"),
        ("sentry", "0416_drop_until_escalating_in_groupsnooze"),
        ("sentry", "0417_backfill_groupedmessage_substatus"),
        ("sentry", "0418_add_actor_constraints"),
        ("sentry", "0419_add_null_constraint_for_org_integration_denorm"),
        ("sentry", "0420_backfill_groupedmessage_ignored_substatus"),
        ("sentry", "0421_rule_set_null_owner_deleted"),
        ("sentry", "0422_remove_group_forecast_fk_constraint"),
        ("sentry", "0423_remove_group_forecast_model"),
        ("sentry", "0424_drop_group_forecast_table"),
        ("sentry", "0425_add_user_team_to_notifications"),
        ("sentry", "0426_add_notification_user_team_index"),
        ("sentry", "0427_add_org_member_id_to_organizationmembermapping_table"),
        ("sentry", "0428_backfill_denormalize_notification_actor"),
        ("sentry", "0429_fix_broken_external_issues"),
        ("sentry", "0430_break_fks_on_alertruletriggeraction"),
        ("sentry", "0431_breaking_orgintegration_pieces_and_default_auth_team_fks"),
        ("sentry", "0432_backfill_org_member_id_organizationmembermapping"),
        ("sentry", "0433_set_monitor_status_to_object_status_only"),
        ("sentry", "0434_notification_setting_target_id"),
        ("sentry", "0435_add_alert_rule_source"),
        ("sentry", "0436_break_fks_on_external_actor_and_issue"),
        ("sentry", "0437_remove_fk_notifications_target"),
        ("sentry", "0438_break_inviter_fk_organizationmember"),
        ("sentry", "0439_backfill_notificationsetting"),
        ("sentry", "0440_add_control_option"),
        ("sentry", "0441_remove_unattached_notification_settings"),
        ("sentry", "0442_remove_use_case_id_default_perf_indexer"),
        ("sentry", "0443_check_notification_team_or_user"),
        ("sentry", "0444_remove_next_checkin_last_checkin_from_monitor"),
        ("sentry", "0445_drop_deprecated_monitor_next_last_checkin_db_op"),
        ("sentry", "0446_backfill_indexer_use_case_id"),
        ("sentry", "0447_backfill_groupedmessage_resolved_substatus"),
        ("sentry", "0448_add_expected_time_config_to_cron_checkin"),
        ("sentry", "0449_pickle_to_json_authenticator"),
        ("sentry", "0450_pickle_to_json_sentry_option"),
        ("sentry", "0451_pickle_to_json_sentry_controloption"),
        ("sentry", "0452_break_user_actor_fk"),
        ("sentry", "0453_pickle_to_json_sentry_organizationoptions"),
        ("sentry", "0454_pickle_to_json_sentry_projectoptions"),
        ("sentry", "0455_pickle_to_json_sentry_useroption"),
        ("sentry", "0456_add_organization_status_to_org_mapping"),
        ("sentry", "0457_sentry_monitorcheckin_date_added_index"),
        ("sentry", "0458_add_options_source_column"),
        ("sentry", "0459_remove_user_actorid"),
        ("sentry", "0460_pickle_to_json_sentry_auditlogentry"),
        ("sentry", "0461_pickle_to_json_sentry_groupedmessage"),
        ("sentry", "0462_pickle_to_json_sentry_grouptombstone"),
        ("sentry", "0463_pickle_to_json_sentry_processingissue"),
        ("sentry", "0464_pickle_to_json_sentry_rule"),
        ("sentry", "0465_pickle_to_json_sentry_activity"),
        ("sentry", "0466_gh_comment_index"),
        ("sentry", "0467_control_files"),
        ("sentry", "0468_pickle_to_json_sentry_rawevent"),
        ("sentry", "0469_backfill_orgmembermapping"),
        ("sentry", "0470_denormalize_user_is_active"),
        ("sentry", "0471_dashboard_widget_description"),
        ("sentry", "0472_delete_past_organization_mappings"),
        ("sentry", "0473_backfill_organization_member_is_active"),
        ("sentry", "0474_make_organization_mapping_org_id_unique"),
        ("sentry", "0475_backfill_groupedmessage_unresolved_none_status"),
        ("sentry", "0476_convert_unresolved_to_set_escalating_activitytype"),
        ("sentry", "0477_control_avatars"),
        ("sentry", "0478_backfill_organization_mappings_via_outbox"),
        ("sentry", "0479_add_timeout_at_checkin"),
        ("sentry", "0480_apiapplication_owner_optional"),
        ("sentry", "0481_add_pull_request_comment_table"),
        ("sentry", "0482_denormalize_user_email"),
        ("sentry", "0483_backfill_organization_member_user_email"),
        ("sentry", "0484_break_org_member_user_fk"),
    ]

    initial = True

    # This migration has initial schema and can do unsafe things.
    checked = False

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("password", models.CharField(max_length=128)),
                ("last_login", models.DateTimeField(blank=True, null=True)),
                ("username", models.CharField(max_length=128, unique=True)),
                ("name", models.CharField(blank=True, db_column="first_name", max_length=200)),
                ("email", models.EmailField(blank=True, max_length=75)),
                ("is_staff", models.BooleanField(default=False)),
                ("is_active", models.BooleanField(default=True)),
                ("is_superuser", models.BooleanField(default=False)),
                ("is_managed", models.BooleanField(default=False)),
                ("is_sentry_app", models.NullBooleanField(default=None)),
                ("is_password_expired", models.BooleanField(default=False)),
                ("last_password_change", models.DateTimeField(null=True)),
                (
                    "flags",
                    bitfield.models.BitField(
                        (
                            (
                                "newsletter_consent_prompt",
                                "Do we need to ask this user for newsletter consent?",
                            ),
                        ),
                        default=0,
                        null=True,
                    ),
                ),
                ("session_nonce", models.CharField(max_length=12, null=True)),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now)),
                ("last_active", models.DateTimeField(default=django.utils.timezone.now, null=True)),
            ],
            options={
                "db_table": "auth_user",
                "verbose_name": "user",
                "verbose_name_plural": "users",
            },
            managers=[
                ("objects", sentry.models.user.UserManager(cache_fields=["pk"])),
            ],
        ),
        migrations.CreateModel(
            name="ApiApplication",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "client_id",
                    models.CharField(
                        default=sentry.models.apiapplication.generate_token,
                        max_length=64,
                        unique=True,
                    ),
                ),
                (
                    "client_secret",
                    models.TextField(default=sentry.models.apiapplication.generate_token),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        default=sentry.models.apiapplication.generate_name,
                        max_length=64,
                    ),
                ),
                (
                    "status",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_index=True, default=0
                    ),
                ),
                ("allowed_origins", models.TextField(blank=True, null=True)),
                ("redirect_uris", models.TextField()),
                ("homepage_url", models.URLField(null=True)),
                ("privacy_url", models.URLField(null=True)),
                ("terms_url", models.URLField(null=True)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "owner",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "sentry_apiapplication",
            },
        ),
        migrations.CreateModel(
            name="ApiGrant",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "code",
                    models.CharField(
                        db_index=True, default=sentry.models.apigrant.generate_code, max_length=64
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        db_index=True, default=sentry.models.apigrant.default_expiration
                    ),
                ),
                ("redirect_uri", models.CharField(max_length=255)),
                (
                    "scopes",
                    bitfield.models.BitField(
                        (
                            ("project:read", "project:read"),
                            ("project:write", "project:write"),
                            ("project:admin", "project:admin"),
                            ("project:releases", "project:releases"),
                            ("team:read", "team:read"),
                            ("team:write", "team:write"),
                            ("team:admin", "team:admin"),
                            ("event:read", "event:read"),
                            ("event:write", "event:write"),
                            ("event:admin", "event:admin"),
                            ("org:read", "org:read"),
                            ("org:write", "org:write"),
                            ("org:admin", "org:admin"),
                            ("member:read", "member:read"),
                            ("member:write", "member:write"),
                            ("member:admin", "member:admin"),
                        ),
                        default=None,
                    ),
                ),
                ("scope_list", sentry.db.models.fields.array.ArrayField(null=True)),
                (
                    "application",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.ApiApplication"
                    ),
                ),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "sentry_apigrant",
            },
        ),
        migrations.CreateModel(
            name="ApiKey",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Organization", db_index=True, on_delete="CASCADE"
                    ),
                ),
                ("label", models.CharField(blank=True, default="Default", max_length=64)),
                ("key", models.CharField(max_length=32, unique=True)),
                (
                    "scopes",
                    bitfield.models.BitField(
                        (
                            ("project:read", "project:read"),
                            ("project:write", "project:write"),
                            ("project:admin", "project:admin"),
                            ("project:releases", "project:releases"),
                            ("team:read", "team:read"),
                            ("team:write", "team:write"),
                            ("team:admin", "team:admin"),
                            ("event:read", "event:read"),
                            ("event:write", "event:write"),
                            ("event:admin", "event:admin"),
                            ("org:read", "org:read"),
                            ("org:write", "org:write"),
                            ("org:admin", "org:admin"),
                            ("member:read", "member:read"),
                            ("member:write", "member:write"),
                            ("member:admin", "member:admin"),
                        ),
                        default=None,
                    ),
                ),
                ("scope_list", sentry.db.models.fields.array.ArrayField(null=True)),
                (
                    "status",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_index=True, default=0
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("allowed_origins", models.TextField(blank=True, null=True)),
            ],
            options={
                "db_table": "sentry_apikey",
            },
        ),
        migrations.CreateModel(
            name="ApiToken",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "scopes",
                    bitfield.models.BitField(
                        (
                            ("project:read", "project:read"),
                            ("project:write", "project:write"),
                            ("project:admin", "project:admin"),
                            ("project:releases", "project:releases"),
                            ("team:read", "team:read"),
                            ("team:write", "team:write"),
                            ("team:admin", "team:admin"),
                            ("event:read", "event:read"),
                            ("event:write", "event:write"),
                            ("event:admin", "event:admin"),
                            ("org:read", "org:read"),
                            ("org:write", "org:write"),
                            ("org:admin", "org:admin"),
                            ("member:read", "member:read"),
                            ("member:write", "member:write"),
                            ("member:admin", "member:admin"),
                        ),
                        default=None,
                    ),
                ),
                ("scope_list", sentry.db.models.fields.array.ArrayField(null=True)),
                (
                    "token",
                    models.CharField(
                        default=sentry.models.apitoken.generate_token, max_length=64, unique=True
                    ),
                ),
                (
                    "refresh_token",
                    models.CharField(
                        default=sentry.models.apitoken.generate_token,
                        max_length=64,
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        default=sentry.models.apitoken.default_expiration, null=True
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "application",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.ApiApplication",
                    ),
                ),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "sentry_apitoken",
            },
        ),
        migrations.CreateModel(
            name="Broadcast",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("upstream_id", models.CharField(blank=True, max_length=32, null=True)),
                ("title", models.CharField(max_length=32)),
                ("message", models.CharField(max_length=256)),
                ("link", models.URLField(blank=True, null=True)),
                ("is_active", models.BooleanField(db_index=True, default=True)),
                (
                    "date_expires",
                    models.DateTimeField(
                        blank=True, default=sentry.models.broadcast.default_expiration, null=True
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "db_table": "sentry_broadcast",
            },
        ),
        migrations.CreateModel(
            name="CommitAuthor",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True),
                ),
                ("name", models.CharField(max_length=128, null=True)),
                ("email", models.EmailField(max_length=75)),
                ("external_id", models.CharField(max_length=164, null=True)),
            ],
            options={
                "db_table": "sentry_commitauthor",
                "unique_together": {
                    ("organization_id", "email"),
                    ("organization_id", "external_id"),
                },
            },
        ),
        migrations.CreateModel(
            name="DeletedOrganization",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("actor_label", models.CharField(max_length=64, null=True)),
                ("actor_id", sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ("actor_key", models.CharField(max_length=32, null=True)),
                ("ip_address", models.GenericIPAddressField(null=True, unpack_ipv4=True)),
                ("date_deleted", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_created", models.DateTimeField(null=True)),
                ("reason", models.TextField(blank=True, null=True)),
                ("name", models.CharField(max_length=64, null=True)),
                ("slug", models.CharField(max_length=50, null=True)),
            ],
            options={
                "db_table": "sentry_deletedorganization",
            },
        ),
        migrations.CreateModel(
            name="DeletedProject",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("actor_label", models.CharField(max_length=64, null=True)),
                ("actor_id", sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ("actor_key", models.CharField(max_length=32, null=True)),
                ("ip_address", models.GenericIPAddressField(null=True, unpack_ipv4=True)),
                ("date_deleted", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_created", models.DateTimeField(null=True)),
                ("reason", models.TextField(blank=True, null=True)),
                ("slug", models.CharField(max_length=50, null=True)),
                ("name", models.CharField(max_length=200, null=True)),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
                ),
                ("organization_name", models.CharField(max_length=64, null=True)),
                ("organization_slug", models.CharField(max_length=50, null=True)),
                ("platform", models.CharField(max_length=64, null=True)),
            ],
            options={
                "db_table": "sentry_deletedproject",
            },
        ),
        migrations.CreateModel(
            name="DeletedTeam",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("actor_label", models.CharField(max_length=64, null=True)),
                ("actor_id", sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ("actor_key", models.CharField(max_length=32, null=True)),
                ("ip_address", models.GenericIPAddressField(null=True, unpack_ipv4=True)),
                ("date_deleted", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_created", models.DateTimeField(null=True)),
                ("reason", models.TextField(blank=True, null=True)),
                ("name", models.CharField(max_length=64, null=True)),
                ("slug", models.CharField(max_length=50, null=True)),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
                ),
                ("organization_name", models.CharField(max_length=64, null=True)),
                ("organization_slug", models.CharField(max_length=50, null=True)),
            ],
            options={
                "db_table": "sentry_deletedteam",
            },
        ),
        migrations.CreateModel(
            name="DiscoverSavedQuery",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("query", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                ("date_updated", models.DateTimeField(auto_now=True)),
                (
                    "created_by_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, null=True, on_delete="SET_NULL"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_discoversavedquery",
            },
        ),
        migrations.CreateModel(
            name="Email",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("email", sentry.db.models.fields.citext.CIEmailField(max_length=75, unique=True)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "db_table": "sentry_email",
            },
        ),
        migrations.CreateModel(
            name="Environment",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("organization_id", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                (
                    "project_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
                ),
                ("name", models.CharField(max_length=64)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "db_table": "sentry_environment",
            },
        ),
        migrations.CreateModel(
            name="File",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("name", models.TextField()),
                ("type", models.CharField(max_length=64)),
                (
                    "timestamp",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("headers", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ("size", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ("checksum", models.CharField(db_index=True, max_length=40, null=True)),
                ("path", models.TextField(null=True)),
            ],
            options={
                "db_table": "sentry_file",
            },
        ),
        migrations.CreateModel(
            name="FileBlob",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("path", models.TextField(null=True)),
                ("size", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ("checksum", models.CharField(max_length=40, unique=True)),
                (
                    "timestamp",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
            ],
            options={
                "db_table": "sentry_fileblob",
            },
        ),
        migrations.CreateModel(
            name="FileBlobIndex",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("offset", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                (
                    "blob",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.FileBlob"
                    ),
                ),
                (
                    "file",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.File"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_fileblobindex",
                "unique_together": {("file", "blob", "offset")},
            },
        ),
        migrations.CreateModel(
            name="Group",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("logger", models.CharField(blank=True, db_index=True, default="", max_length=64)),
                (
                    "level",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        blank=True, db_index=True, default=40
                    ),
                ),
                ("message", models.TextField()),
                (
                    "culprit",
                    models.CharField(blank=True, db_column="view", max_length=200, null=True),
                ),
                (
                    "num_comments",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        default=0, null=True
                    ),
                ),
                ("platform", models.CharField(max_length=64, null=True)),
                (
                    "status",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_index=True, default=0
                    ),
                ),
                (
                    "times_seen",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_index=True, default=1
                    ),
                ),
                (
                    "last_seen",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                (
                    "first_seen",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("resolved_at", models.DateTimeField(db_index=True, null=True)),
                ("active_at", models.DateTimeField(db_index=True, null=True)),
                (
                    "time_spent_total",
                    sentry.db.models.fields.bounded.BoundedIntegerField(default=0),
                ),
                (
                    "time_spent_count",
                    sentry.db.models.fields.bounded.BoundedIntegerField(default=0),
                ),
                ("score", sentry.db.models.fields.bounded.BoundedIntegerField(default=0)),
                ("is_public", models.NullBooleanField(default=False)),
                (
                    "data",
                    sentry.db.models.fields.gzippeddict.GzippedDictField(blank=True, null=True),
                ),
                ("short_id", sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
            ],
            options={
                "verbose_name_plural": "grouped messages",
                "db_table": "sentry_groupedmessage",
                "verbose_name": "grouped message",
                "permissions": (("can_view", "Can view"),),
            },
        ),
        migrations.CreateModel(
            name="GroupRedirect",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("group_id", sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                (
                    "previous_group_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(unique=True),
                ),
            ],
            options={
                "db_table": "sentry_groupredirect",
            },
        ),
        migrations.CreateModel(
            name="GroupSnooze",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("until", models.DateTimeField(null=True)),
                ("count", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ("window", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                (
                    "user_count",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
                ),
                (
                    "user_window",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
                ),
                ("state", sentry.db.models.fields.jsonfield.JSONField(null=True)),
                (
                    "actor_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
                ),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Group", unique=True
                    ),
                ),
            ],
            options={
                "db_table": "sentry_groupsnooze",
            },
        ),
        migrations.CreateModel(
            name="Integration",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("provider", models.CharField(max_length=64)),
                ("external_id", models.CharField(max_length=64)),
                ("name", models.CharField(max_length=200)),
                ("metadata", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                (
                    "status",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        default=0, null=True
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
            ],
            options={
                "db_table": "sentry_integration",
            },
        ),
        migrations.CreateModel(
            name="LostPasswordHash",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("hash", models.CharField(max_length=32)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        unique=True,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_lostpasswordhash",
            },
        ),
        migrations.CreateModel(
            name="Monitor",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "guid",
                    sentry.db.models.fields.uuid.UUIDField(
                        editable=False, max_length=32, unique=True
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True),
                ),
                (
                    "project_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                ("name", models.CharField(max_length=128)),
                ("slug", models.SlugField()),
                ("status", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ("type", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ("config", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "db_table": "sentry_monitor",
                "unique_together": {("organization_id", "slug")},
            },
        ),
        migrations.CreateModel(
            name="MonitorLocation",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "guid",
                    sentry.db.models.fields.uuid.UUIDField(
                        editable=False, max_length=32, unique=True
                    ),
                ),
                ("name", models.CharField(max_length=128)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "db_table": "sentry_monitorlocation",
            },
        ),
        migrations.CreateModel(
            name="Option",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("key", models.CharField(max_length=64, unique=True)),
                ("value", sentry.db.models.fields.picklefield.PickledObjectField(editable=False)),
                ("last_updated", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "db_table": "sentry_option",
            },
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=64)),
                ("slug", models.SlugField(unique=True)),
                ("status", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("default_role", models.CharField(default="member", max_length=32)),
                (
                    "flags",
                    bitfield.models.BitField(
                        (
                            (
                                "allow_joinleave",
                                "Allow members to join and leave teams without requiring approval.",
                            ),
                            (
                                "enhanced_privacy",
                                "Enable enhanced privacy controls to limit personally identifiable information (PII) as well as source code in things like notifications.",
                            ),
                            (
                                "disable_shared_issues",
                                "Disable sharing of limited details on issues to anonymous users.",
                            ),
                            (
                                "early_adopter",
                                "Enable early adopter status, gaining access to features prior to public release.",
                            ),
                            (
                                "require_2fa",
                                "Require and enforce two-factor authentication for all members.",
                            ),
                            (
                                "disable_new_visibility_features",
                                "Temporarily opt out of new visibility features and ui",
                            ),
                        ),
                        default=1,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_organization",
            },
        ),
        migrations.CreateModel(
            name="OrganizationAvatar",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("ident", models.CharField(db_index=True, max_length=32, unique=True)),
                ("avatar_type", models.PositiveSmallIntegerField(default=0)),
                (
                    "file",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="sentry.File",
                        unique=True,
                    ),
                ),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="avatar",
                        to="sentry.Organization",
                        unique=True,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_organizationavatar",
            },
        ),
        migrations.CreateModel(
            name="OrganizationIntegration",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("config", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                (
                    "default_auth_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_index=True, null=True
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ("status", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                (
                    "integration",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Integration"
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Organization", on_delete="CASCADE"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_organizationintegration",
                "unique_together": {("organization_id", "integration")},
            },
        ),
        migrations.CreateModel(
            name="OrganizationMember",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("email", models.EmailField(blank=True, max_length=75, null=True)),
                ("role", models.CharField(default="member", max_length=32)),
                (
                    "flags",
                    bitfield.models.BitField(
                        (("sso:linked", "sso:linked"), ("sso:invalid", "sso:invalid")), default=0
                    ),
                ),
                ("token", models.CharField(blank=True, max_length=64, null=True, unique=True)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("token_expires_at", models.DateTimeField(default=None, null=True)),
                ("has_global_access", models.BooleanField(default=True)),
                (
                    "type",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        blank=True, default=50
                    ),
                ),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="member_set",
                        to="sentry.Organization",
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User",
                        on_delete="CASCADE",
                        null=True,
                        blank=True,
                    ),
                ),
                (
                    "inviter_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        settings.AUTH_USER_MODEL,
                        on_delete="SET_NULL",
                        null=True,
                        blank=True,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_organizationmember",
                "unique_together": {("organization", "user_id"), ("organization", "email")},
            },
        ),
        migrations.CreateModel(
            name="Project",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("slug", models.SlugField(null=True)),
                ("name", models.CharField(max_length=200)),
                ("forced_color", models.CharField(blank=True, max_length=6, null=True)),
                ("public", models.BooleanField(default=False)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "status",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_index=True, default=0
                    ),
                ),
                ("first_event", models.DateTimeField(null=True)),
                (
                    "flags",
                    bitfield.models.BitField(
                        (("has_releases", "This Project has sent release data"),),
                        default=0,
                        null=True,
                    ),
                ),
                ("platform", models.CharField(max_length=64, null=True)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Organization"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_project",
            },
            bases=(models.Model, sentry.db.mixin.PendingDeletionMixin),  # type: ignore
        ),
        migrations.CreateModel(
            name="ProjectAvatar",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("ident", models.CharField(db_index=True, max_length=32, unique=True)),
                ("avatar_type", models.PositiveSmallIntegerField(default=0)),
                (
                    "file",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="sentry.File",
                        unique=True,
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="avatar",
                        to="sentry.Project",
                        unique=True,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_projectavatar",
            },
        ),
        migrations.CreateModel(
            name="ProjectIntegration",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("config", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                (
                    "integration_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Integration", on_delete="CASCADE"
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Project"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_projectintegration",
                "unique_together": {("project", "integration_id")},
            },
        ),
        migrations.CreateModel(
            name="ProjectKey",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("label", models.CharField(blank=True, max_length=64, null=True)),
                ("public_key", models.CharField(max_length=32, null=True, unique=True)),
                ("secret_key", models.CharField(max_length=32, null=True, unique=True)),
                (
                    "roles",
                    bitfield.models.BitField(
                        (("store", "Event API access"), ("api", "Web API access")), default=1
                    ),
                ),
                (
                    "status",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_index=True, default=0
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                (
                    "rate_limit_count",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
                ),
                (
                    "rate_limit_window",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
                ),
                ("data", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="key_set",
                        to="sentry.Project",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_projectkey",
            },
        ),
        migrations.CreateModel(
            name="ProjectOwnership",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("raw", models.TextField(null=True)),
                ("schema", sentry.db.models.fields.jsonfield.JSONField(null=True)),
                ("fallthrough", models.BooleanField(default=True)),
                ("date_created", models.DateTimeField(default=django.utils.timezone.now)),
                ("last_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Project",
                        unique=True,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_projectownership",
            },
        ),
        migrations.CreateModel(
            name="PullRequest",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True),
                ),
                ("repository_id", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("key", models.CharField(max_length=64)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("title", models.TextField(null=True)),
                ("message", models.TextField(null=True)),
                ("merge_commit_sha", models.CharField(max_length=64, null=True)),
                (
                    "author",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.CommitAuthor",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_pull_request",
                "unique_together": {("repository_id", "key")},
                "index_together": {
                    ("repository_id", "date_added"),
                    ("organization_id", "merge_commit_sha"),
                },
            },
        ),
        migrations.CreateModel(
            name="RawEvent",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("event_id", models.CharField(max_length=32, null=True)),
                ("datetime", models.DateTimeField(default=django.utils.timezone.now)),
                ("data", sentry.db.models.fields.node.NodeField(blank=True, null=True)),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Project"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_rawevent",
                "unique_together": {("project", "event_id")},
            },
        ),
        migrations.CreateModel(
            name="Relay",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("relay_id", models.CharField(max_length=64, unique=True)),
                ("public_key", models.CharField(max_length=200)),
                ("first_seen", models.DateTimeField(default=django.utils.timezone.now)),
                ("last_seen", models.DateTimeField(default=django.utils.timezone.now)),
                ("is_internal", models.BooleanField(default=False)),
            ],
            options={
                "db_table": "sentry_relay",
            },
        ),
        migrations.CreateModel(
            name="Release",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("project_id", sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ("version", models.CharField(max_length=250)),
                ("ref", models.CharField(blank=True, max_length=250, null=True)),
                ("url", models.URLField(blank=True, null=True)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_started", models.DateTimeField(blank=True, null=True)),
                ("date_released", models.DateTimeField(blank=True, null=True)),
                ("data", sentry.db.models.fields.jsonfield.JSONField(default={})),
                (
                    "new_groups",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0),
                ),
                (
                    "commit_count",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        default=0, null=True
                    ),
                ),
                (
                    "last_commit_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
                ),
                ("authors", sentry.db.models.fields.array.ArrayField(null=True)),
                (
                    "total_deploys",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        default=0, null=True
                    ),
                ),
                (
                    "last_deploy_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
                ),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Organization"
                    ),
                ),
                (
                    "owner_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User",
                        blank=True,
                        null=True,
                        db_index=True,
                        on_delete="SET_NULL",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_release",
            },
        ),
        migrations.CreateModel(
            name="ReleaseProject",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "new_groups",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        default=0, null=True
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Project"
                    ),
                ),
                (
                    "release",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Release"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_release_project",
                "unique_together": {("project", "release")},
            },
        ),
        migrations.CreateModel(
            name="Rule",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "environment_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
                ),
                ("label", models.CharField(max_length=64)),
                ("data", sentry.db.models.fields.gzippeddict.GzippedDictField()),
                (
                    "status",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_index=True, default=0
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Project"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_rule",
            },
        ),
        migrations.CreateModel(
            name="SavedSearch",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("type", models.PositiveSmallIntegerField(default=0, null=True)),
                ("name", models.CharField(max_length=128)),
                ("query", models.TextField()),
                (
                    "sort",
                    sentry.db.models.fields.text.CharField(
                        default="date", max_length=16, null=True
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("is_global", models.NullBooleanField(db_index=True, default=False)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Organization",
                    ),
                ),
                (
                    "owner_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, null=True, on_delete="CASCADE"
                    ),
                ),
                (
                    "visibility",
                    models.CharField(default="owner", max_length=16),
                ),
            ],
            options={
                "db_table": "sentry_savedsearch",
            },
        ),
        migrations.CreateModel(
            name="ScheduledJob",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=128)),
                ("payload", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_scheduled", models.DateTimeField()),
            ],
            options={
                "db_table": "sentry_scheduledjob",
            },
        ),
        migrations.CreateModel(
            name="SentryApp",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_deleted", models.DateTimeField(blank=True, null=True)),
                (
                    "scopes",
                    bitfield.models.BitField(
                        (
                            ("project:read", "project:read"),
                            ("project:write", "project:write"),
                            ("project:admin", "project:admin"),
                            ("project:releases", "project:releases"),
                            ("team:read", "team:read"),
                            ("team:write", "team:write"),
                            ("team:admin", "team:admin"),
                            ("event:read", "event:read"),
                            ("event:write", "event:write"),
                            ("event:admin", "event:admin"),
                            ("org:read", "org:read"),
                            ("org:write", "org:write"),
                            ("org:admin", "org:admin"),
                            ("member:read", "member:read"),
                            ("member:write", "member:write"),
                            ("member:admin", "member:admin"),
                        ),
                        default=None,
                    ),
                ),
                ("scope_list", sentry.db.models.fields.array.ArrayField(null=True)),
                ("name", models.TextField()),
                ("slug", models.CharField(max_length=64, unique=True)),
                ("author", models.TextField(null=True)),
                (
                    "status",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_index=True, default=0
                    ),
                ),
                (
                    "uuid",
                    models.CharField(
                        default=sentry.models.integrations.sentry_app.default_uuid, max_length=64
                    ),
                ),
                ("redirect_url", models.URLField(null=True)),
                ("webhook_url", models.URLField()),
                ("is_alertable", models.BooleanField(default=False)),
                ("events", sentry.db.models.fields.array.ArrayField(null=True)),
                ("overview", models.TextField(null=True)),
                ("schema", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "application",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sentry_app",
                        to="sentry.ApiApplication",
                    ),
                ),
                (
                    "owner_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Organization",
                        on_delete="CASCADE",
                    ),
                ),
                (
                    "proxy_user",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sentry_app",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_sentryapp",
            },
        ),
        migrations.CreateModel(
            name="SentryAppAvatar",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("ident", models.CharField(db_index=True, max_length=32, unique=True)),
                ("avatar_type", models.PositiveSmallIntegerField(default=0)),
                (
                    "file",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="sentry.File",
                        unique=True,
                    ),
                ),
                (
                    "sentry_app",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="avatar",
                        to="sentry.SentryApp",
                        unique=True,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_sentryappavatar",
            },
        ),
        migrations.CreateModel(
            name="SentryAppComponent",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "uuid",
                    sentry.db.models.fields.uuid.UUIDField(
                        editable=False, max_length=32, unique=True
                    ),
                ),
                ("type", models.CharField(max_length=64)),
                ("schema", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                (
                    "sentry_app",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="components",
                        to="sentry.SentryApp",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_sentryappcomponent",
            },
        ),
        migrations.CreateModel(
            name="SentryAppInstallation",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_deleted", models.DateTimeField(blank=True, null=True)),
                (
                    "uuid",
                    models.CharField(
                        default=sentry.models.integrations.sentry_app_installation.default_uuid,
                        max_length=64,
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "api_grant",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sentry_app_installation",
                        to="sentry.ApiGrant",
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Organization",
                        on_delete="CASCADE",
                    ),
                ),
                (
                    "sentry_app",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="installations",
                        to="sentry.SentryApp",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_sentryappinstallation",
            },
        ),
        migrations.CreateModel(
            name="ServiceHook",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("guid", models.CharField(max_length=32, null=True, unique=True)),
                (
                    "actor_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True),
                ),
                (
                    "installation_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.SentryAppInstallation",
                        null=True,
                        on_delete="CASCADE",
                    ),
                ),
                (
                    "project_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_index=True, null=True
                    ),
                ),
                ("url", models.URLField(max_length=512)),
                ("secret", models.TextField(default=sentry.models.servicehook.generate_secret)),
                ("events", sentry.db.models.fields.array.ArrayField(null=True)),
                (
                    "status",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_index=True, default=0
                    ),
                ),
                ("version", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "application_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.ApiApplication",
                        null=True,
                        on_delete="CASCADE",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_servicehook",
            },
        ),
        migrations.CreateModel(
            name="Team",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("slug", models.SlugField()),
                ("name", models.CharField(max_length=64)),
                ("status", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Organization"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_team",
                "unique_together": {("organization", "slug")},
            },
        ),
        migrations.CreateModel(
            name="TeamAvatar",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("ident", models.CharField(db_index=True, max_length=32, unique=True)),
                ("avatar_type", models.PositiveSmallIntegerField(default=0)),
                (
                    "file",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="sentry.File",
                        unique=True,
                    ),
                ),
                (
                    "team",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="avatar",
                        to="sentry.Team",
                        unique=True,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_teamavatar",
            },
        ),
        migrations.CreateModel(
            name="UserAvatar",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("ident", models.CharField(db_index=True, max_length=32, unique=True)),
                ("avatar_type", models.PositiveSmallIntegerField(default=0)),
                (
                    "file",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="sentry.File",
                        unique=True,
                    ),
                ),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="avatar",
                        to=settings.AUTH_USER_MODEL,
                        unique=True,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_useravatar",
            },
        ),
        migrations.CreateModel(
            name="ScheduledDeletion",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "guid",
                    models.CharField(
                        default=sentry.models.scheduledeletion.default_guid,
                        max_length=32,
                        unique=True,
                    ),
                ),
                ("app_label", models.CharField(max_length=64)),
                ("model_name", models.CharField(max_length=64)),
                ("object_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "date_scheduled",
                    models.DateTimeField(
                        default=sentry.models.scheduledeletion.default_date_schedule
                    ),
                ),
                ("actor_id", sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ("data", sentry.db.models.fields.jsonfield.JSONField(default={})),
                ("in_progress", models.BooleanField(default=False)),
                ("aborted", models.BooleanField(default=False)),
            ],
            options={
                "db_table": "sentry_scheduleddeletion",
                "unique_together": {("app_label", "model_name", "object_id")},
            },
        ),
        migrations.CreateModel(
            name="Repository",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True),
                ),
                ("name", models.CharField(max_length=200)),
                ("url", models.URLField(null=True)),
                ("provider", models.CharField(max_length=64, null=True)),
                ("external_id", models.CharField(max_length=64, null=True)),
                ("config", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                (
                    "status",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_index=True, default=0
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "integration_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_index=True, null=True
                    ),
                ),
            ],
            options={
                "db_table": "sentry_repository",
                "unique_together": {
                    ("organization_id", "name"),
                    ("organization_id", "provider", "external_id"),
                },
            },
            bases=(models.Model, sentry.db.mixin.PendingDeletionMixin),  # type: ignore
        ),
        migrations.AddField(
            model_name="release",
            name="projects",
            field=models.ManyToManyField(
                related_name="releases", through="sentry.ReleaseProject", to="sentry.Project"
            ),
        ),
        migrations.CreateModel(
            name="ProjectTeam",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Project"
                    ),
                ),
                (
                    "team",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Team"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_projectteam",
                "unique_together": {("project", "team")},
            },
        ),
        migrations.CreateModel(
            name="ProjectPlatform",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("project_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("platform", models.CharField(max_length=64)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("last_seen", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "db_table": "sentry_projectplatform",
                "unique_together": {("project_id", "platform")},
            },
        ),
        migrations.AddField(
            model_name="project",
            name="teams",
            field=models.ManyToManyField(
                related_name="teams", through="sentry.ProjectTeam", to="sentry.Team"
            ),
        ),
        migrations.CreateModel(
            name="ProcessingIssue",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("checksum", models.CharField(db_index=True, max_length=40)),
                ("type", models.CharField(max_length=30)),
                ("data", sentry.db.models.fields.gzippeddict.GzippedDictField()),
                ("datetime", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Project"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_processingissue",
                "unique_together": {("project", "checksum", "type")},
            },
        ),
        migrations.CreateModel(
            name="PlatformExternalIssue",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("group_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("service_type", models.CharField(max_length=64)),
                ("display_name", models.TextField()),
                ("web_url", models.URLField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "db_table": "sentry_platformexternalissue",
                "unique_together": {("group_id", "service_type")},
            },
        ),
        migrations.CreateModel(
            name="OrganizationMemberTeam",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "organizationmember",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.OrganizationMember"
                    ),
                ),
                (
                    "team",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Team"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_organizationmember_teams",
                "unique_together": {("team", "organizationmember")},
            },
        ),
        migrations.AddField(
            model_name="organizationmember",
            name="teams",
            field=models.ManyToManyField(
                blank=True, through="sentry.OrganizationMemberTeam", to="sentry.Team"
            ),
        ),
        migrations.CreateModel(
            name="MonitorCheckIn",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "guid",
                    sentry.db.models.fields.uuid.UUIDField(
                        editable=False, max_length=32, unique=True
                    ),
                ),
                (
                    "project_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                ("status", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ("config", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                (
                    "duration",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "location",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.MonitorLocation",
                    ),
                ),
                (
                    "monitor",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Monitor"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_monitorcheckin",
            },
        ),
        migrations.CreateModel(
            name="LatestRelease",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("repository_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("environment_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("release_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("deploy_id", sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ("commit_id", sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
            ],
            options={
                "db_table": "sentry_latestrelease",
                "unique_together": {("repository_id", "environment_id")},
            },
        ),
        migrations.CreateModel(
            name="IntegrationExternalProject",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_integration_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("name", models.CharField(max_length=128)),
                ("external_id", models.CharField(max_length=64)),
                ("resolved_status", models.CharField(max_length=64)),
                ("unresolved_status", models.CharField(max_length=64)),
            ],
            options={
                "db_table": "sentry_integrationexternalproject",
                "unique_together": {("organization_integration_id", "external_id")},
            },
        ),
        migrations.CreateModel(
            name="IdentityProvider",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("type", models.CharField(max_length=64)),
                ("config", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ("external_id", models.CharField(max_length=64, null=True)),
            ],
            options={
                "db_table": "sentry_identityprovider",
                "unique_together": {("type", "external_id")},
            },
        ),
        migrations.CreateModel(
            name="GroupTombstone",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "previous_group_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(unique=True),
                ),
                (
                    "level",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        blank=True, default=40
                    ),
                ),
                ("message", models.TextField()),
                ("culprit", models.CharField(blank=True, max_length=200, null=True)),
                (
                    "data",
                    sentry.db.models.fields.gzippeddict.GzippedDictField(blank=True, null=True),
                ),
                (
                    "actor_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Project"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_grouptombstone",
            },
        ),
        migrations.CreateModel(
            name="GroupShare",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "uuid",
                    models.CharField(
                        default=sentry.models.groupshare.default_uuid, max_length=32, unique=True
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Group", unique=True
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Project"
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        settings.AUTH_USER_MODEL,
                        null=True,
                        on_delete="CASCADE",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_groupshare",
            },
        ),
        migrations.CreateModel(
            name="GroupResolution",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("type", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                (
                    "actor_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
                ),
                (
                    "datetime",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("status", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Group", unique=True
                    ),
                ),
                (
                    "release",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Release"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_groupresolution",
            },
        ),
        migrations.CreateModel(
            name="GroupRelease",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "project_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                ("group_id", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                (
                    "release_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True),
                ),
                ("environment", models.CharField(default="", max_length=64)),
                ("first_seen", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "last_seen",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
            ],
            options={
                "db_table": "sentry_grouprelease",
                "unique_together": {("group_id", "release_id", "environment")},
            },
        ),
        migrations.CreateModel(
            name="GroupLink",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("group_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                (
                    "project_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                (
                    "linked_type",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=1),
                ),
                ("linked_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                (
                    "relationship",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=2),
                ),
                ("data", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                (
                    "datetime",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
            ],
            options={
                "db_table": "sentry_grouplink",
                "unique_together": {("group_id", "linked_type", "linked_id")},
            },
        ),
        migrations.CreateModel(
            name="GroupCommitResolution",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("group_id", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                (
                    "commit_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True),
                ),
                (
                    "datetime",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
            ],
            options={
                "db_table": "sentry_groupcommitresolution",
                "unique_together": {("group_id", "commit_id")},
            },
        ),
        migrations.CreateModel(
            name="GroupAssignee",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assignee_set",
                        to="sentry.Group",
                        unique=True,
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assignee_set",
                        to="sentry.Project",
                    ),
                ),
                (
                    "team",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sentry_assignee_set",
                        to="sentry.Team",
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        settings.AUTH_USER_MODEL,
                        null=True,
                        on_delete="CASCADE",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_groupasignee",
            },
        ),
        migrations.AddField(
            model_name="group",
            name="first_release",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                null=True, on_delete=django.db.models.deletion.PROTECT, to="sentry.Release"
            ),
        ),
        migrations.AddField(
            model_name="group",
            name="project",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE, to="sentry.Project"
            ),
        ),
        migrations.AddField(
            model_name="file",
            name="blob",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="legacy_blob",
                to="sentry.FileBlob",
            ),
        ),
        migrations.AddField(
            model_name="file",
            name="blobs",
            field=models.ManyToManyField(through="sentry.FileBlobIndex", to="sentry.FileBlob"),
        ),
        migrations.CreateModel(
            name="ExternalIssue",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        "sentry.Organization", db_constraint=False
                    ),
                ),
                (
                    "integration_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Integration",
                        on_delete="CASCADE",
                    ),
                ),
                ("key", models.CharField(max_length=128)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("title", models.TextField(null=True)),
                ("description", models.TextField(null=True)),
                ("metadata", sentry.db.models.fields.jsonfield.JSONField(null=True)),
            ],
            options={
                "db_table": "sentry_externalissue",
                "unique_together": {("organization", "integration_id", "key")},
            },
        ),
        migrations.CreateModel(
            name="EventUser",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "project_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                ("hash", models.CharField(max_length=32)),
                ("ident", models.CharField(max_length=128, null=True)),
                ("email", models.EmailField(max_length=75, null=True)),
                ("username", models.CharField(max_length=128, null=True)),
                ("name", models.CharField(max_length=128, null=True)),
                ("ip_address", models.GenericIPAddressField(null=True)),
                (
                    "date_added",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
            ],
            options={
                "db_table": "sentry_eventuser",
                "unique_together": {("project_id", "ident"), ("project_id", "hash")},
                "index_together": {
                    ("project_id", "username"),
                    ("project_id", "ip_address"),
                    ("project_id", "email"),
                },
            },
        ),
        migrations.CreateModel(
            name="EnvironmentProject",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("is_hidden", models.NullBooleanField()),
                (
                    "environment",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Environment"
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Project"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_environmentproject",
                "unique_together": {("project", "environment")},
            },
        ),
        migrations.AddField(
            model_name="environment",
            name="projects",
            field=models.ManyToManyField(through="sentry.EnvironmentProject", to="sentry.Project"),
        ),
        migrations.CreateModel(
            name="Distribution",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True),
                ),
                ("name", models.CharField(max_length=64)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "release",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Release"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_distribution",
                "unique_together": {("release", "name")},
            },
        ),
        migrations.CreateModel(
            name="DiscoverSavedQueryProject",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "discover_saved_query",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.DiscoverSavedQuery"
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Project"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_discoversavedqueryproject",
                "unique_together": {("project", "discover_saved_query")},
            },
        ),
        migrations.AddField(
            model_name="discoversavedquery",
            name="organization",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="sentry.Organization"
            ),
        ),
        migrations.AddField(
            model_name="discoversavedquery",
            name="projects",
            field=models.ManyToManyField(
                through="sentry.DiscoverSavedQueryProject", to="sentry.Project"
            ),
        ),
        migrations.CreateModel(
            name="Deploy",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True),
                ),
                (
                    "environment_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True),
                ),
                ("date_finished", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_started", models.DateTimeField(blank=True, null=True)),
                ("name", models.CharField(blank=True, max_length=64, null=True)),
                ("url", models.URLField(blank=True, null=True)),
                ("notified", models.NullBooleanField(db_index=True, default=False)),
                (
                    "release",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Release"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_deploy",
            },
        ),
        migrations.CreateModel(
            name="Counter",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("value", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Project",
                        unique=True,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_projectcounter",
            },
        ),
        migrations.CreateModel(
            name="Commit",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True),
                ),
                ("repository_id", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("key", models.CharField(max_length=64)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("message", models.TextField(null=True)),
                (
                    "author",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.CommitAuthor",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_commit",
                "unique_together": {("repository_id", "key")},
                "index_together": {("repository_id", "date_added")},
            },
        ),
        migrations.CreateModel(
            name="AuthProvider",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("provider", models.CharField(max_length=128)),
                ("config", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "sync_time",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
                ),
                ("last_sync", models.DateTimeField(null=True)),
                (
                    "default_role",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=50),
                ),
                ("default_global_access", models.BooleanField(default=True)),
                (
                    "flags",
                    bitfield.models.BitField(
                        (
                            (
                                "allow_unlinked",
                                "Grant access to members who have not linked SSO accounts.",
                            ),
                        ),
                        default=0,
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Organization",
                        on_delete="CASCADE",
                        unique=True,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_authprovider",
            },
        ),
        migrations.CreateModel(
            name="AuditLogEntry",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("actor_label", models.CharField(blank=True, max_length=64, null=True)),
                (
                    "target_object",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
                ),
                ("event", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("ip_address", models.GenericIPAddressField(null=True, unpack_ipv4=True)),
                ("data", sentry.db.models.fields.gzippeddict.GzippedDictField()),
                ("datetime", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "actor",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="audit_actors",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "actor_key",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.ApiKey",
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Organization",
                        on_delete="CASCADE",
                    ),
                ),
                (
                    "target_user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="audit_targets",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_auditlogentry",
            },
        ),
        migrations.CreateModel(
            name="Activity",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("type", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("ident", models.CharField(max_length=64, null=True)),
                ("datetime", models.DateTimeField(default=django.utils.timezone.now)),
                ("data", sentry.db.models.fields.gzippeddict.GzippedDictField(null=True)),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="sentry.Group"
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Project"
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        settings.AUTH_USER_MODEL,
                        null=True,
                        on_delete="SET_NULL",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_activity",
            },
        ),
        migrations.CreateModel(
            name="UserReport",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "event_user_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
                ),
                ("event_id", models.CharField(max_length=32)),
                ("name", models.CharField(max_length=128)),
                ("email", models.EmailField(max_length=75)),
                ("comments", models.TextField()),
                (
                    "date_added",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                (
                    "environment",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Environment",
                    ),
                ),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="sentry.Group"
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Project"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_userreport",
                "unique_together": {("project", "event_id")},
                "index_together": {("project", "date_added"), ("project", "event_id")},
            },
        ),
        migrations.CreateModel(
            name="UserPermission",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("permission", models.CharField(max_length=32)),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "sentry_userpermission",
                "unique_together": {("user", "permission")},
            },
        ),
        migrations.CreateModel(
            name="UserOption",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("key", models.CharField(max_length=64)),
                ("value", sentry.db.models.fields.picklefield.PickledObjectField(editable=False)),
                (
                    "organization_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Organization",
                        null=True,
                        on_delete="CASCADE",
                    ),
                ),
                (
                    "project_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Project",
                        null=True,
                        on_delete="CASCADE",
                    ),
                ),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "sentry_useroption",
                "unique_together": {
                    ("user", "organization_id", "key"),
                    ("user", "project_id", "key"),
                },
            },
        ),
        migrations.CreateModel(
            name="UserIP",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("ip_address", models.GenericIPAddressField()),
                ("country_code", models.CharField(max_length=16, null=True)),
                ("region_code", models.CharField(max_length=16, null=True)),
                ("first_seen", models.DateTimeField(default=django.utils.timezone.now)),
                ("last_seen", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "sentry_userip",
                "unique_together": {("user", "ip_address")},
            },
        ),
        migrations.CreateModel(
            name="UserEmail",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("email", models.EmailField(max_length=75)),
                (
                    "validation_hash",
                    models.CharField(
                        default=sentry.utils.security.hash.get_secure_token, max_length=32
                    ),
                ),
                ("date_hash_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("is_verified", models.BooleanField(default=False)),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="emails",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_useremail",
                "unique_together": {("user", "email")},
            },
        ),
        migrations.CreateModel(
            name="ServiceHookProject",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "project_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                (
                    "service_hook",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.ServiceHook"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_servicehookproject",
                "unique_together": {("service_hook", "project_id")},
            },
        ),
        migrations.CreateModel(
            name="ReprocessingReport",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("event_id", models.CharField(max_length=32, null=True)),
                ("datetime", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Project"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_reprocessingreport",
                "unique_together": {("project", "event_id")},
            },
        ),
        migrations.CreateModel(
            name="ReleaseProjectEnvironment",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "new_issues_count",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0),
                ),
                ("first_seen", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "last_seen",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                (
                    "last_deploy_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_index=True, null=True
                    ),
                ),
                (
                    "environment",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Environment"
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Project"
                    ),
                ),
                (
                    "release",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Release"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_releaseprojectenvironment",
                "unique_together": {("project", "release", "environment")},
            },
        ),
        migrations.CreateModel(
            name="ReleaseHeadCommit",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True),
                ),
                ("repository_id", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                (
                    "commit",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Commit"
                    ),
                ),
                (
                    "release",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Release"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_releaseheadcommit",
                "unique_together": {("repository_id", "release")},
            },
        ),
        migrations.CreateModel(
            name="ReleaseFile",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("project_id", sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ("ident", models.CharField(max_length=40)),
                ("name", models.TextField()),
                (
                    "dist",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Distribution",
                    ),
                ),
                (
                    "file",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.File"
                    ),
                ),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Organization",
                    ),
                ),
                (
                    "release",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Release",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_releasefile",
                "unique_together": {("release", "ident")},
                "index_together": {("release", "name")},
            },
        ),
        migrations.CreateModel(
            name="ReleaseEnvironment",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "project_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
                ),
                ("first_seen", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "last_seen",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                (
                    "environment",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Environment",
                    ),
                ),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Organization",
                    ),
                ),
                (
                    "release",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Release",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_environmentrelease",
                "unique_together": {("organization", "release", "environment")},
            },
        ),
        migrations.CreateModel(
            name="ReleaseCommit",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True),
                ),
                (
                    "project_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
                ),
                ("order", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                (
                    "commit",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Commit"
                    ),
                ),
                (
                    "release",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Release"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_releasecommit",
                "unique_together": {("release", "order"), ("release", "commit")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="release",
            unique_together={("organization", "version")},
        ),
        migrations.CreateModel(
            name="RecentSearch",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("type", models.PositiveSmallIntegerField()),
                ("query", models.TextField()),
                ("query_hash", models.CharField(max_length=32)),
                ("last_seen", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Organization"
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        settings.AUTH_USER_MODEL,
                        db_index=False,
                        on_delete="CASCADE",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_recentsearch",
                "unique_together": {("user_id", "organization", "type", "query_hash")},
            },
        ),
        migrations.CreateModel(
            name="PullRequestCommit",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "commit",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Commit"
                    ),
                ),
                (
                    "pull_request",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.PullRequest"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_pullrequest_commit",
                "unique_together": {("pull_request", "commit")},
            },
        ),
        migrations.CreateModel(
            name="PromptsActivity",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True),
                ),
                (
                    "project_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                ("feature", models.CharField(max_length=64)),
                ("data", sentry.db.models.fields.jsonfield.JSONField(default={})),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        settings.AUTH_USER_MODEL, on_delete="CASCADE"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_promptsactivity",
                "unique_together": {("user_id", "feature", "organization_id", "project_id")},
            },
        ),
        migrations.CreateModel(
            name="ProjectRedirect",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("redirect_slug", models.SlugField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Organization"
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Project"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_projectredirect",
                "unique_together": {("organization", "redirect_slug")},
            },
        ),
        migrations.CreateModel(
            name="ProjectOption",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("key", models.CharField(max_length=64)),
                ("value", sentry.db.models.fields.picklefield.PickledObjectField(editable=False)),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Project"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_projectoptions",
                "unique_together": {("project", "key")},
            },
        ),
        migrations.CreateModel(
            name="ProjectDebugFile",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("object_name", models.TextField()),
                ("cpu_name", models.CharField(max_length=40)),
                ("debug_id", models.CharField(db_column="uuid", max_length=64)),
                ("code_id", models.CharField(max_length=64, null=True)),
                ("data", sentry.db.models.fields.jsonfield.JSONField(null=True)),
                (
                    "file",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.File"
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Project",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_projectdsymfile",
                "index_together": {("project", "debug_id"), ("project", "code_id")},
            },
        ),
        migrations.CreateModel(
            name="ProjectBookmark",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Project",
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        settings.AUTH_USER_MODEL,
                        on_delete="CASCADE",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_projectbookmark",
                "unique_together": {("project", "user_id")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="project",
            unique_together={("organization", "slug")},
        ),
        migrations.CreateModel(
            name="OrganizationOption",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("key", models.CharField(max_length=64)),
                ("value", sentry.db.models.fields.picklefield.PickledObjectField(editable=False)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Organization"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_organizationoptions",
                "unique_together": {("organization", "key")},
            },
        ),
        migrations.CreateModel(
            name="OrganizationOnboardingTask",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("task", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("status", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("date_completed", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "project_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(blank=True, null=True),
                ),
                ("data", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Organization"
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        settings.AUTH_USER_MODEL,
                        null=True,
                        on_delete="SET_NULL",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_organizationonboardingtask",
                "unique_together": {("organization", "task")},
            },
        ),
        migrations.CreateModel(
            name="OrganizationAccessRequest",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "member",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.OrganizationMember"
                    ),
                ),
                (
                    "team",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Team"
                    ),
                ),
                (
                    "requester_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        settings.AUTH_USER_MODEL, null=True, on_delete="CASCADE"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_organizationaccessrequest",
                "unique_together": {("team", "member")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="integration",
            unique_together={("provider", "external_id")},
        ),
        migrations.CreateModel(
            name="Identity",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("external_id", models.CharField(max_length=64)),
                ("data", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ("status", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ("scopes", sentry.db.models.fields.array.ArrayField(null=True)),
                ("date_verified", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "idp",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.IdentityProvider"
                    ),
                ),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "sentry_identity",
                "unique_together": {("idp", "user"), ("idp", "external_id")},
            },
        ),
        migrations.CreateModel(
            name="GroupSubscription",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("reason", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscription_set",
                        to="sentry.Group",
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscription_set",
                        to="sentry.Project",
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        settings.AUTH_USER_MODEL, on_delete="CASCADE"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_groupsubscription",
                "unique_together": {("group", "user_id")},
            },
        ),
        migrations.CreateModel(
            name="GroupSeen",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("last_seen", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Group"
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Project"
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        settings.AUTH_USER_MODEL,
                        on_delete="CASCADE",
                        db_index=False,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_groupseen",
                "unique_together": {("user_id", "group")},
            },
        ),
        migrations.CreateModel(
            name="GroupRuleStatus",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("status", models.PositiveSmallIntegerField(default=0)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("last_active", models.DateTimeField(null=True)),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Group"
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Project"
                    ),
                ),
                (
                    "rule",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Rule"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_grouprulestatus",
                "unique_together": {("rule", "group")},
            },
        ),
        migrations.CreateModel(
            name="GroupMeta",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("key", models.CharField(max_length=64)),
                ("value", models.TextField()),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Group"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_groupmeta",
                "unique_together": {("group", "key")},
            },
        ),
        migrations.CreateModel(
            name="GroupHash",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("hash", models.CharField(max_length=32)),
                (
                    "group_tombstone_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        db_index=True, null=True
                    ),
                ),
                ("state", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="sentry.Group"
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="sentry.Project"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_grouphash",
                "unique_together": {("project", "hash")},
            },
        ),
        migrations.CreateModel(
            name="GroupEnvironment",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "first_seen",
                    models.DateTimeField(
                        db_index=True, default=django.utils.timezone.now, null=True
                    ),
                ),
                (
                    "environment",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Environment",
                    ),
                ),
                (
                    "first_release",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="sentry.Release",
                    ),
                ),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Group",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_groupenvironment",
                "unique_together": {("group", "environment")},
                "index_together": {("environment", "first_release")},
            },
        ),
        migrations.CreateModel(
            name="GroupEmailThread",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("email", models.EmailField(max_length=75)),
                ("msgid", models.CharField(max_length=100)),
                ("date", models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="groupemail_set",
                        to="sentry.Group",
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="groupemail_set",
                        to="sentry.Project",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_groupemailthread",
                "unique_together": {("email", "msgid"), ("email", "group")},
            },
        ),
        migrations.CreateModel(
            name="GroupBookmark",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bookmark_set",
                        to="sentry.Group",
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bookmark_set",
                        to="sentry.Project",
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        settings.AUTH_USER_MODEL,
                        on_delete="CASCADE",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_groupbookmark",
                "unique_together": {("project", "user_id", "group")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="group",
            unique_together={("project", "short_id")},
        ),
        migrations.AlterIndexTogether(
            name="group",
            index_together={("project", "first_release")},
        ),
        migrations.CreateModel(
            name="FileBlobOwner",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "blob",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.FileBlob"
                    ),
                ),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Organization",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_fileblobowner",
                "unique_together": {("blob", "organization")},
            },
        ),
        migrations.CreateModel(
            name="FeatureAdoption",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("feature_id", models.PositiveIntegerField()),
                ("date_completed", models.DateTimeField(default=django.utils.timezone.now)),
                ("complete", models.BooleanField(default=False)),
                ("applicable", models.BooleanField(default=True)),
                ("data", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Organization"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_featureadoption",
                "unique_together": {("organization", "feature_id")},
            },
        ),
        migrations.CreateModel(
            name="EventProcessingIssue",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "processing_issue",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.ProcessingIssue"
                    ),
                ),
                (
                    "raw_event",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.RawEvent"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_eventprocessingissue",
                "unique_together": {("raw_event", "processing_issue")},
            },
        ),
        migrations.CreateModel(
            name="EventAttachment",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("project_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                (
                    "group_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(
                        db_index=True, null=True
                    ),
                ),
                ("event_id", models.CharField(db_index=True, max_length=32)),
                ("name", models.TextField()),
                (
                    "date_added",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                (
                    "file",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.File",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_eventattachment",
                "unique_together": {("project_id", "event_id", "file")},
                "index_together": {("project_id", "date_added")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="environment",
            unique_together={("organization_id", "name")},
        ),
        migrations.CreateModel(
            name="Dashboard",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("status", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                (
                    "created_by_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, on_delete="CASCADE"
                    ),
                ),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Organization"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_dashboard",
                "unique_together": {("organization", "title")},
            },
        ),
        migrations.CreateModel(
            name="CommitFileChange",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True),
                ),
                ("filename", models.TextField()),
                ("type", models.CharField(max_length=1)),
                (
                    "commit",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Commit"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_commitfilechange",
                "unique_together": {("commit", "filename")},
            },
        ),
        migrations.CreateModel(
            name="BroadcastSeen",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_seen", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "broadcast",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Broadcast"
                    ),
                ),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "sentry_broadcastseen",
                "unique_together": {("broadcast", "user")},
            },
        ),
        migrations.CreateModel(
            name="AuthIdentity",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("ident", models.CharField(max_length=128)),
                ("data", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ("last_verified", models.DateTimeField(default=django.utils.timezone.now)),
                ("last_synced", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "auth_provider",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.AuthProvider"
                    ),
                ),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "sentry_authidentity",
                "unique_together": {("auth_provider", "user"), ("auth_provider", "ident")},
            },
        ),
        migrations.CreateModel(
            name="Authenticator",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("last_used_at", models.DateTimeField(null=True)),
                ("type", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("config", sentry.db.models.fields.picklefield.PickledObjectField(editable=False)),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "auth_authenticator",
                "verbose_name": "authenticator",
                "verbose_name_plural": "authenticators",
                "unique_together": {("user", "type")},
            },
        ),
        migrations.CreateModel(
            name="AssistantActivity",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("guide_id", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("viewed_ts", models.DateTimeField(null=True)),
                ("dismissed_ts", models.DateTimeField(null=True)),
                ("useful", models.NullBooleanField()),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "sentry_assistant_activity",
                "unique_together": {("user", "guide_id")},
            },
        ),
        migrations.CreateModel(
            name="ApiAuthorization",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "scopes",
                    bitfield.models.BitField(
                        (
                            ("project:read", "project:read"),
                            ("project:write", "project:write"),
                            ("project:admin", "project:admin"),
                            ("project:releases", "project:releases"),
                            ("team:read", "team:read"),
                            ("team:write", "team:write"),
                            ("team:admin", "team:admin"),
                            ("event:read", "event:read"),
                            ("event:write", "event:write"),
                            ("event:admin", "event:admin"),
                            ("org:read", "org:read"),
                            ("org:write", "org:write"),
                            ("org:admin", "org:admin"),
                            ("member:read", "member:read"),
                            ("member:write", "member:write"),
                            ("member:admin", "member:admin"),
                        ),
                        default=None,
                    ),
                ),
                ("scope_list", sentry.db.models.fields.array.ArrayField(null=True)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "application",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.ApiApplication",
                    ),
                ),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "sentry_apiauthorization",
                "unique_together": {("user", "application")},
            },
        ),
        migrations.RunSQL(
            sql="\n        create or replace function sentry_increment_project_counter(\n                project bigint, delta int) returns int as $$\n            declare\n            new_val int;\n            begin\n            loop\n                update sentry_projectcounter set value = value + delta\n                where project_id = project\n                returning value into new_val;\n                if found then\n                return new_val;\n                end if;\n                begin\n                insert into sentry_projectcounter(project_id, value)\n                    values (project, delta)\n                    returning value into new_val;\n                return new_val;\n                exception when unique_violation then\n                end;\n            end loop;\n            end\n            $$ language plpgsql;\n        ",
            hints={"tables": ["sentry_projectcounter"]},
        ),
        migrations.CreateModel(
            name="AlertRule",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("name", models.TextField()),
                ("status", models.SmallIntegerField(default=0)),
                ("include_all_projects", models.BooleanField(default=False)),
                ("threshold_period", models.IntegerField()),
                ("date_modified", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "db_table": "sentry_alertrule",
            },
        ),
        migrations.CreateModel(
            name="AlertRuleExcludedProjects",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "alert_rule",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_index=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.AlertRule",
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Project",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_alertruleexcludedprojects",
                "unique_together": {("alert_rule", "project")},
            },
        ),
        migrations.CreateModel(
            name="AlertRuleTrigger",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("label", models.TextField()),
                ("threshold_type", models.SmallIntegerField()),
                ("alert_threshold", models.IntegerField()),
                ("resolve_threshold", models.IntegerField(null=True)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "alert_rule",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.AlertRule"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_alertruletrigger",
            },
        ),
        migrations.CreateModel(
            name="Incident",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("identifier", models.IntegerField()),
                (
                    "detection_uuid",
                    sentry.db.models.fields.uuid.UUIDField(db_index=True, max_length=32, null=True),
                ),
                ("status", models.PositiveSmallIntegerField(default=1)),
                ("type", models.PositiveSmallIntegerField(default=1)),
                ("title", models.TextField()),
                ("date_started", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_detected", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_closed", models.DateTimeField(null=True)),
                (
                    "alert_rule",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="sentry.AlertRule",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_incident",
            },
        ),
        migrations.CreateModel(
            name="IncidentProject",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "incident",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Incident"
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        db_index=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Project",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_incidentproject",
                "unique_together": {("project", "incident")},
            },
        ),
        migrations.CreateModel(
            name="IncidentTrigger",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("status", models.SmallIntegerField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "alert_rule_trigger",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.AlertRuleTrigger"
                    ),
                ),
                (
                    "incident",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_index=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Incident",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_incidenttrigger",
                "unique_together": {("incident", "alert_rule_trigger")},
            },
        ),
        migrations.CreateModel(
            name="PagerDutyService",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("integration_key", models.CharField(max_length=255)),
                ("service_name", models.CharField(max_length=255)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "organization_integration_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.OrganizationIntegration",
                        on_delete="CASCADE",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_pagerdutyservice",
            },
        ),
        migrations.CreateModel(
            name="QuerySubscription",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("type", models.TextField()),
                ("subscription_id", models.TextField(unique=True)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Project",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_querysubscription",
            },
        ),
        migrations.CreateModel(
            name="TimeSeriesSnapshot",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("start", models.DateTimeField()),
                ("end", models.DateTimeField()),
                ("values", sentry.db.models.fields.array.ArrayField(null=True)),
                ("period", models.IntegerField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "db_table": "sentry_timeseriessnapshot",
            },
        ),
        migrations.AddField(
            model_name="broadcast",
            name="cta",
            field=models.CharField(blank=True, max_length=256, null=True),
        ),
        migrations.AddField(
            model_name="groupredirect",
            name="organization_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
        ),
        migrations.AddField(
            model_name="groupredirect",
            name="previous_project_slug",
            field=models.SlugField(null=True),
        ),
        migrations.AddField(
            model_name="groupredirect",
            name="previous_short_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
        ),
        migrations.AddField(
            model_name="organizationmember",
            name="invite_status",
            field=models.PositiveSmallIntegerField(default=0, null=True),
        ),
        migrations.AddField(
            model_name="projectownership",
            name="auto_assignment",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="sentryapp",
            name="verify_install",
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name="sentryappinstallation",
            name="api_token",
            field=models.OneToOneField(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="sentry_app_installation",
                to="sentry.ApiToken",
            ),
        ),
        migrations.AddField(
            model_name="sentryappinstallation",
            name="status",
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                db_index=True, default=0
            ),
        ),
        migrations.AlterField(
            model_name="auditlogentry",
            name="event",
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(),
        ),
        migrations.AlterField(
            model_name="commitfilechange",
            name="filename",
            field=models.CharField(max_length=255),
        ),
        migrations.AlterField(
            model_name="discoversavedquery",
            name="query",
            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name="externalissue",
            name="metadata",
            field=sentry.db.models.fields.jsonfield.JSONField(null=True),
        ),
        migrations.AlterField(
            model_name="featureadoption",
            name="data",
            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name="file",
            name="headers",
            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name="group",
            name="project",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="sentry.Project"
            ),
        ),
        migrations.AlterField(
            model_name="grouplink",
            name="data",
            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name="groupsnooze",
            name="state",
            field=sentry.db.models.fields.jsonfield.JSONField(null=True),
        ),
        migrations.AlterField(
            model_name="organization",
            name="default_role",
            field=models.CharField(default="member", max_length=32),
        ),
        migrations.AlterField(
            model_name="organizationmember",
            name="role",
            field=models.CharField(default="member", max_length=32),
        ),
        migrations.AlterField(
            model_name="organizationonboardingtask",
            name="data",
            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name="projectdebugfile",
            name="data",
            field=sentry.db.models.fields.jsonfield.JSONField(null=True),
        ),
        migrations.AlterField(
            model_name="projectkey",
            name="data",
            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name="projectownership",
            name="schema",
            field=sentry.db.models.fields.jsonfield.JSONField(null=True),
        ),
        migrations.AlterField(
            model_name="promptsactivity",
            name="data",
            field=sentry.db.models.fields.jsonfield.JSONField(default={}),
        ),
        migrations.AlterField(
            model_name="release",
            name="data",
            field=sentry.db.models.fields.jsonfield.JSONField(default={}),
        ),
        migrations.AlterField(
            model_name="release",
            name="project_id",
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name="releasefile",
            name="project_id",
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name="repository",
            name="config",
            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name="scheduleddeletion",
            name="data",
            field=sentry.db.models.fields.jsonfield.JSONField(default={}),
        ),
        migrations.AlterField(
            model_name="scheduledjob",
            name="payload",
            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name="sentryapp",
            name="status",
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                db_index=True, default=0
            ),
        ),
        migrations.AlterField(
            model_name="sentryapp",
            name="webhook_url",
            field=models.URLField(null=True),
        ),
        migrations.AlterUniqueTogether(
            name="groupassignee",
            unique_together={("project", "group")},
        ),
        migrations.AlterUniqueTogether(
            name="groupredirect",
            unique_together={("organization_id", "previous_short_id", "previous_project_slug")},
        ),
        migrations.AlterIndexTogether(
            name="group",
            index_together={("project", "first_release"), ("project", "id")},
        ),
        migrations.CreateModel(
            name="IncidentSnapshot",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("unique_users", models.IntegerField()),
                ("total_events", models.IntegerField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "event_stats_snapshot",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.TimeSeriesSnapshot"
                    ),
                ),
                (
                    "incident",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Incident"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_incidentsnapshot",
            },
        ),
        migrations.CreateModel(
            name="IncidentActivity",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("type", models.IntegerField()),
                ("value", models.TextField(null=True)),
                ("previous_value", models.TextField(null=True)),
                ("comment", models.TextField(null=True)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "incident",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Incident"
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        settings.AUTH_USER_MODEL,
                        null=True,
                        on_delete="CASCADE",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_incidentactivity",
            },
        ),
        migrations.AddField(
            model_name="incident",
            name="organization",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="sentry.Organization"
            ),
        ),
        migrations.AddField(
            model_name="incident",
            name="projects",
            field=models.ManyToManyField(
                related_name="incidents", through="sentry.IncidentProject", to="sentry.Project"
            ),
        ),
        migrations.AddField(
            model_name="alertruletrigger",
            name="triggered_incidents",
            field=models.ManyToManyField(
                related_name="triggers", through="sentry.IncidentTrigger", to="sentry.Incident"
            ),
        ),
        migrations.AddField(
            model_name="alertrule",
            name="excluded_projects",
            field=models.ManyToManyField(
                related_name="alert_rule_exclusions",
                through="sentry.AlertRuleExcludedProjects",
                to="sentry.Project",
            ),
        ),
        migrations.AddField(
            model_name="alertrule",
            name="organization",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                db_index=False,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="sentry.Organization",
            ),
        ),
        migrations.CreateModel(
            name="SentryAppInstallationToken",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "api_token",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.ApiToken"
                    ),
                ),
                (
                    "sentry_app_installation",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.SentryAppInstallation",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_sentryappinstallationtoken",
                "unique_together": {("sentry_app_installation", "api_token")},
            },
        ),
        migrations.CreateModel(
            name="IntegrationFeature",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "target_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(),
                ),
                (
                    "target_type",
                    sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0),
                ),
                ("user_description", models.TextField(null=True)),
                ("feature", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "db_table": "sentry_integrationfeature",
                "unique_together": {("target_id", "target_type", "feature")},
            },
        ),
        migrations.CreateModel(
            name="IncidentSubscription",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "incident",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_index=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Incident",
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        settings.AUTH_USER_MODEL, on_delete="CASCADE"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_incidentsubscription",
                "unique_together": {("incident", "user_id")},
            },
        ),
        migrations.CreateModel(
            name="IncidentSeen",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("last_seen", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "incident",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Incident"
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        settings.AUTH_USER_MODEL,
                        db_index=False,
                        on_delete="CASCADE",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_incidentseen",
                "unique_together": {("user_id", "incident")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="incident",
            unique_together={("organization", "identifier")},
        ),
        migrations.AlterIndexTogether(
            name="incident",
            index_together={("alert_rule", "type", "status")},
        ),
        migrations.CreateModel(
            name="AlertRuleTriggerExclusion",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "alert_rule_trigger",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="exclusions",
                        to="sentry.AlertRuleTrigger",
                    ),
                ),
                (
                    "query_subscription",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.QuerySubscription"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_alertruletriggerexclusion",
                "unique_together": {("alert_rule_trigger", "query_subscription")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="alertruletrigger",
            unique_together={("alert_rule", "label")},
        ),
        migrations.CreateModel(
            name="AlertRuleTriggerAction",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("type", models.SmallIntegerField()),
                ("target_type", models.SmallIntegerField()),
                ("target_identifier", models.TextField(null=True)),
                ("target_display", models.TextField(null=True)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "alert_rule_trigger",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.AlertRuleTrigger"
                    ),
                ),
                (
                    "integration_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Integration",
                        blank=True,
                        null=True,
                        on_delete="CASCADE",
                    ),
                ),
                (
                    "sentry_app_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.SentryApp",
                        blank=True,
                        null=True,
                        on_delete="CASCADE",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_alertruletriggeraction",
            },
        ),
        migrations.AlterField(
            model_name="auditlogentry",
            name="event",
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(),
        ),
        migrations.AddField(
            model_name="sentryapp",
            name="date_published",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="organization",
            name="default_role",
            field=models.CharField(default="member", max_length=32),
        ),
        migrations.AlterField(
            model_name="organizationmember",
            name="role",
            field=models.CharField(default="member", max_length=32),
        ),
        migrations.AddField(
            model_name="discoversavedquery",
            name="version",
            field=models.IntegerField(null=True),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterField(
                    model_name="incidentsnapshot",
                    name="incident",
                    field=sentry.db.models.fields.onetoone.OneToOneCascadeDeletes(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Incident"
                    ),
                ),
            ],
        ),
        migrations.RenameModel(
            old_name="LatestRelease",
            new_name="LatestRepoReleaseEnvironment",
        ),
        migrations.AlterField(
            model_name="project",
            name="flags",
            field=bitfield.models.BitField(
                (
                    ("has_releases", "This Project has sent release data"),
                    ("has_sourcemaps", "This Project has processed source maps"),
                ),
                default=0,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="incidenttrigger",
            name="date_modified",
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AlterField(
            model_name="incident",
            name="type",
            field=models.PositiveSmallIntegerField(),
        ),
        migrations.CreateModel(
            name="ExportedData",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_finished", models.DateTimeField(null=True)),
                ("date_expired", models.DateTimeField(db_index=True, null=True)),
                ("query_type", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("query_info", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Organization"
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        settings.AUTH_USER_MODEL,
                        null=True,
                        on_delete="SET_NULL",
                    ),
                ),
                (
                    "file",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="sentry.File",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_exporteddata",
            },
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name="organizationonboardingtask",
                    name="project_id",
                ),
                migrations.AddField(
                    model_name="organizationonboardingtask",
                    name="project",
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Project",
                    ),
                ),
                migrations.AlterField(
                    model_name="organizationonboardingtask",
                    name="status",
                    field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(),
                ),
                migrations.AlterField(
                    model_name="organizationonboardingtask",
                    name="task",
                    field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="exporteddata",
            name="query_type",
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(),
        ),
        migrations.AddField(
            model_name="organizationonboardingtask",
            name="completion_seen",
            field=models.DateTimeField(null=True),
        ),
        migrations.AddField(
            model_name="querysubscription",
            name="status",
            field=models.SmallIntegerField(default=0),
        ),
        migrations.AlterField(
            model_name="querysubscription",
            name="subscription_id",
            field=models.TextField(null=True, unique=True),
        ),
        migrations.AlterField(
            model_name="project",
            name="flags",
            field=bitfield.models.BitField(
                (("has_releases", "This Project has sent release data"),), default=0, null=True
            ),
        ),
        migrations.AlterField(
            model_name="project",
            name="flags",
            field=bitfield.models.BitField(
                (
                    ("has_releases", "This Project has sent release data"),
                    ("has_issue_alerts_targeting", "This Project has issue alerts targeting"),
                ),
                default=0,
                null=True,
            ),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX CONCURRENTLY "sentry_eventattachment_project_id_date_added_fi_f3b0597f_idx" ON "sentry_eventattachment" ("project_id", "date_added", "file_id");\n                    ',
                    reverse_sql='\n                        DROP INDEX CONCURRENTLY "sentry_eventattachment_project_id_date_added_fi_f3b0597f_idx";\n                        ',
                    hints={"tables": ["sentry_eventattachment"]},
                ),
            ],
            state_operations=[
                migrations.AlterIndexTogether(
                    name="eventattachment",
                    index_together={
                        ("project_id", "date_added", "file"),
                        ("project_id", "date_added"),
                    },
                ),
            ],
        ),
        migrations.AlterField(
            model_name="alertrule",
            name="organization",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE, to="sentry.Organization"
            ),
        ),
        migrations.AlterField(
            model_name="project",
            name="flags",
            field=bitfield.models.BitField(
                (
                    ("has_releases", "This Project has sent release data"),
                    ("has_issue_alerts_targeting", "This Project has issue alerts targeting"),
                    ("has_transactions", "This Project has sent transactions"),
                ),
                default=0,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="incident",
            name="status_method",
            field=models.PositiveSmallIntegerField(default=3),
        ),
        migrations.AlterModelOptions(
            name="alertrule",
            options={
                "base_manager_name": "objects_with_snapshots",
                "default_manager_name": "objects_with_snapshots",
            },
        ),
        migrations.AlterModelManagers(
            name="alertrule",
            managers=[
                ("objects_with_snapshots", django.db.models.manager.Manager()),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterField(
                    model_name="project",
                    name="flags",
                    field=bitfield.models.BitField(
                        (
                            ("has_releases", "This Project has sent release data"),
                            (
                                "has_issue_alerts_targeting",
                                "This Project has issue alerts targeting",
                            ),
                            ("has_transactions", "This Project has sent transactions"),
                        ),
                        default=2,
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PendingIncidentSnapshot",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "target_run_date",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "incident",
                    sentry.db.models.fields.onetoone.OneToOneCascadeDeletes(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Incident"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_pendingincidentsnapshot",
            },
        ),
        migrations.AddField(
            model_name="integration",
            name="date_updated",
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name="integrationexternalproject",
            name="date_updated",
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name="organizationintegration",
            name="date_updated",
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name="pagerdutyservice",
            name="date_updated",
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.CreateModel(
            name="SnubaQuery",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("dataset", models.TextField()),
                ("query", models.TextField()),
                ("aggregate", models.TextField()),
                ("time_window", models.IntegerField()),
                ("resolution", models.IntegerField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "environment",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Environment",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_snubaquery",
            },
        ),
        migrations.AddField(
            model_name="alertrule",
            name="snuba_query",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="sentry.SnubaQuery",
                unique=True,
            ),
        ),
        migrations.AddField(
            model_name="querysubscription",
            name="snuba_query",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="subscriptions",
                to="sentry.SnubaQuery",
            ),
        ),
        migrations.AlterField(
            model_name="featureadoption",
            name="feature_id",
            field=models.PositiveIntegerField(),
        ),
        migrations.AlterField(
            model_name="incident",
            name="alert_rule",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to="sentry.AlertRule"
            ),
        ),
        migrations.AlterField(
            model_name="auditlogentry",
            name="event",
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(),
        ),
        migrations.AlterField(
            model_name="alertruletrigger",
            name="alert_threshold",
            field=models.FloatField(),
        ),
        migrations.AlterField(
            model_name="alertruletrigger",
            name="resolve_threshold",
            field=models.FloatField(null=True),
        ),
        migrations.AlterField(
            model_name="sentryapp",
            name="webhook_url",
            field=models.URLField(max_length=512, null=True),
        ),
        migrations.CreateModel(
            name="ExportedDataBlob",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("offset", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                (
                    "blob",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.FileBlob",
                    ),
                ),
                (
                    "data_export",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.ExportedData"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_exporteddatablob",
                "unique_together": {("data_export", "blob", "offset")},
            },
        ),
        migrations.CreateModel(
            name="SentryAppInstallationForProvider",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ("provider", models.CharField(max_length=64)),
                (
                    "organization_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Organization",
                        on_delete="CASCADE",
                    ),
                ),
                (
                    "sentry_app_installation",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.SentryAppInstallation",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_sentryappinstallationforprovider",
                "unique_together": {("provider", "organization_id")},
            },
        ),
        migrations.RunSQL(
            sql="ALTER TABLE sentry_timeseriessnapshot ALTER COLUMN values SET DATA TYPE float[] USING values::float[]",
            hints={"tables": ["sentry_timeseriessnapshot"]},
        ),
        migrations.AddField(
            model_name="alertrule",
            name="resolve_threshold",
            field=models.FloatField(null=True),
        ),
        migrations.AddField(
            model_name="alertrule",
            name="threshold_type",
            field=models.SmallIntegerField(null=True),
        ),
        migrations.CreateModel(
            name="AlertRuleActivity",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("type", models.IntegerField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "alert_rule",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.AlertRule"
                    ),
                ),
                (
                    "previous_alert_rule",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="previous_alert_rule",
                        to="sentry.AlertRule",
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        settings.AUTH_USER_MODEL,
                        null=True,
                        on_delete="SET_NULL",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_alertruleactivity",
            },
        ),
        migrations.AlterField(
            model_name="alertruletrigger",
            name="threshold_type",
            field=models.SmallIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name="identity",
            name="external_id",
            field=models.TextField(),
        ),
        migrations.CreateModel(
            name="RuleActivity",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("type", models.IntegerField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "rule",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Rule"
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        settings.AUTH_USER_MODEL,
                        null=True,
                        on_delete="SET_NULL",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_ruleactivity",
            },
        ),
        migrations.AlterField(
            model_name="organizationonboardingtask",
            name="task",
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(),
        ),
        migrations.AddField(
            model_name="eventattachment",
            name="type",
            field=models.CharField(db_index=True, max_length=64, null=True),
        ),
        migrations.AlterField(
            model_name="relay",
            name="first_seen",
            field=models.DateTimeField(default=None, null=True),
        ),
        migrations.AlterField(
            model_name="relay",
            name="is_internal",
            field=models.NullBooleanField(default=None),
        ),
        migrations.AlterField(
            model_name="relay",
            name="last_seen",
            field=models.DateTimeField(default=None, null=True),
        ),
        migrations.CreateModel(
            name="RelayUsage",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("relay_id", models.CharField(max_length=64)),
                ("version", models.CharField(default="0.0.1", max_length=32)),
                ("first_seen", models.DateTimeField(default=django.utils.timezone.now)),
                ("last_seen", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "db_table": "sentry_relayusage",
                "unique_together": {("relay_id", "version")},
            },
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterField(
                    model_name="project",
                    name="flags",
                    field=bitfield.models.BitField(
                        (
                            ("has_releases", "This Project has sent release data"),
                            (
                                "has_issue_alerts_targeting",
                                "This Project has issue alerts targeting",
                            ),
                            ("has_transactions", "This Project has sent transactions"),
                            ("has_alert_filters", "This Project has filters"),
                        ),
                        default=10,
                        null=True,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="relayusage",
            name="public_key",
            field=models.CharField(db_index=True, max_length=200, null=True),
        ),
        migrations.AlterField(
            model_name="eventattachment",
            name="type",
            field=models.CharField(db_index=True, max_length=64),
        ),
        migrations.AlterField(
            model_name="servicehook",
            name="project_id",
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                db_index=True, null=True
            ),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterField(
                    model_name="fileblobindex",
                    name="blob",
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="sentry.FileBlob"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="sentryapp",
            name="creator_label",
            field=models.TextField(null=True),
        ),
        migrations.AddField(
            model_name="sentryapp",
            name="creator_user",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="SnubaQueryEventType",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("type", models.SmallIntegerField()),
                (
                    "snuba_query",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.SnubaQuery"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_snubaqueryeventtype",
                "unique_together": {("snuba_query", "type")},
            },
        ),
        migrations.CreateModel(
            name="GroupInbox",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("reason", models.PositiveSmallIntegerField(default=0)),
                ("reason_details", sentry.db.models.fields.jsonfield.JSONField(null=True)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Group",
                        unique=True,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_groupinbox",
            },
        ),
        migrations.CreateModel(
            name="RepositoryProjectPathConfig",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ("stack_root", models.TextField()),
                ("source_root", models.TextField()),
                ("default_branch", models.TextField(null=True)),
                (
                    "organization_integration_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.OrganizationIntegration",
                        on_delete="CASCADE",
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Project",
                    ),
                ),
                (
                    "repository",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Repository"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_repositoryprojectpathconfig",
                "unique_together": {("project", "stack_root")},
            },
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_projectdsymfile" ADD COLUMN "checksum" varchar(40) NULL;\n                    ',
                    reverse_sql='\n                        ALTER TABLE "sentry_projectdsymfile" DROP COLUMN "checksum";\n                        ',
                    hints={"tables": ["sentry_projectdsymfile"]},
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX CONCURRENTLY "sentry_projectdsymfile_checksum_8fb028a8_idx" ON "sentry_projectdsymfile" ("checksum");\n                    ',
                    reverse_sql='\n                        DROP INDEX CONCURRENTLY "sentry_projectdsymfile_checksum_8fb028a8_idx";\n                        ',
                    hints={"tables": ["sentry_projectdsymfile"]},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="projectdebugfile",
                    name="checksum",
                    field=models.CharField(db_index=True, max_length=40, null=True),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="activity",
            name="type",
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterField(
                    model_name="auditlogentry",
                    name="actor",
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="audit_actors",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                migrations.AlterField(
                    model_name="auditlogentry",
                    name="target_user",
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="audit_targets",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="commitauthor",
            name="email",
            field=models.CharField(max_length=75),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_release" ADD COLUMN "status" integer NULL;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_release" DROP COLUMN "status";\n                    ',
                    hints={"tables": ["sentry_release"]},
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_groupinbox" ADD COLUMN "organization_id" bigint NULL;\n                    ALTER TABLE "sentry_groupinbox" ADD COLUMN "project_id" bigint NULL;\n                    ',
                    reverse_sql='\n                        ALTER TABLE "sentry_groupinbox" DROP COLUMN "organization_id";\n                        ALTER TABLE "sentry_groupinbox" DROP COLUMN "project_id";\n                        ',
                    hints={"tables": ["sentry_groupinbox"]},
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX CONCURRENTLY "sentry_groupinbox_organization_id_7b67769a" ON "sentry_groupinbox" ("organization_id");\n                    ',
                    reverse_sql='\n                        DROP INDEX CONCURRENTLY "sentry_groupinbox_organization_id_7b67769a";\n                        ',
                    hints={"tables": ["sentry_groupinbox"]},
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX CONCURRENTLY "sentry_groupinbox_project_id_ef8f034d" ON "sentry_groupinbox" ("project_id");\n                    ',
                    reverse_sql='\n                        DROP INDEX CONCURRENTLY "sentry_groupinbox_project_id_ef8f034d";\n                        ',
                    hints={"tables": ["sentry_groupinbox"]},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="groupinbox",
                    name="organization",
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Organization",
                    ),
                ),
                migrations.AddField(
                    model_name="groupinbox",
                    name="project",
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Project",
                    ),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AddField(
                    model_name="release",
                    name="status",
                    field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        default=0, null=True
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="platformexternalissue",
            name="project",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="sentry.Project",
            ),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AddField(
                    model_name="platformexternalissue",
                    name="group",
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        db_index=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Group",
                    ),
                ),
                migrations.RemoveField(
                    model_name="platformexternalissue",
                    name="group_id",
                ),
                migrations.AlterUniqueTogether(
                    name="platformexternalissue",
                    unique_together={("group", "service_type")},
                ),
            ],
        ),
        migrations.CreateModel(
            name="DashboardWidget",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("order", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("title", models.CharField(max_length=255)),
                ("display_type", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "dashboard",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Dashboard"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_dashboardwidget",
                "unique_together": {("dashboard", "order")},
            },
        ),
        migrations.CreateModel(
            name="DashboardWidgetQuery",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("fields", sentry.db.models.fields.array.ArrayField(null=True)),
                ("conditions", models.TextField()),
                ("order", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "widget",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.DashboardWidget"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_dashboardwidgetquery",
                "unique_together": {("widget", "order")},
            },
        ),
        migrations.CreateModel(
            name="GroupOwner",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("type", models.PositiveSmallIntegerField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Group",
                        unique=True,
                    ),
                ),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Organization",
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Project",
                    ),
                ),
                (
                    "team",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="sentry.Team"
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", null=True, on_delete="CASCADE"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_groupowner",
            },
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name="dashboard",
                    name="status",
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                        ALTER TABLE "sentry_dashboard" DROP COLUMN "status";\n                        ',
                    reverse_sql='\n                        ALTER TABLE "sentry_dashboard" ADD COLUMN "status" int NOT NULL;\n                        ',
                    hints={"tables": ["sentry_dashboard"]},
                ),
            ],
        ),
        migrations.AlterField(
            model_name="groupowner",
            name="group",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to="sentry.Group"
            ),
        ),
        migrations.AddField(
            model_name="dashboardwidget",
            name="interval",
            field=models.CharField(max_length=10, null=True),
        ),
        migrations.AddField(
            model_name="querysubscription",
            name="date_updated",
            field=models.DateTimeField(default=django.utils.timezone.now, null=True),
        ),
        migrations.AlterField(
            model_name="querysubscription",
            name="status",
            field=models.SmallIntegerField(db_index=True, default=0),
        ),
        migrations.CreateModel(
            name="DashboardTombstone",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("slug", models.CharField(max_length=255)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Organization"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_dashboardtombstone",
                "unique_together": {("organization", "slug")},
            },
        ),
        migrations.AlterField(
            model_name="sentryapp",
            name="status",
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                db_index=True, default=0
            ),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql="\n                    CREATE INDEX CONCURRENTLY IF NOT EXISTS sentry_groupinbox_date_added_f113c11b\n                    ON sentry_groupinbox (date_added);\n                    ",
                    reverse_sql="\n                    DROP INDEX CONCURRENTLY IF EXISTS sentry_groupinbox_date_added_f113c11b;\n                    ",
                    hints={"tables": ["sentry_groupinbox"]},
                ),
            ],
            state_operations=[
                migrations.AlterField(
                    model_name="groupinbox",
                    name="date_added",
                    field=models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="groupcommitresolution",
            name="group_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(),
        ),
        migrations.AlterField(
            model_name="grouprelease",
            name="group_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(),
        ),
        migrations.AlterField(
            model_name="groupcommitresolution",
            name="commit_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name="grouptombstone",
            name="previous_group_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(unique=True),
        ),
        migrations.AlterField(
            model_name="release",
            name="last_commit_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.AlterField(
                    model_name="eventattachment",
                    name="file",
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.File",
                    ),
                ),
                migrations.AlterField(
                    model_name="userreport",
                    name="environment",
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Environment",
                    ),
                ),
                migrations.AlterField(
                    model_name="userreport",
                    name="group",
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Group",
                    ),
                ),
                migrations.AlterField(
                    model_name="userreport",
                    name="project",
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Project",
                    ),
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="eventattachment",
                    name="file_id",
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(
                        db_index=True, default=1
                    ),
                    preserve_default=False,
                ),
                migrations.AddField(
                    model_name="userreport",
                    name="environment_id",
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(
                        db_index=True, null=True
                    ),
                ),
                migrations.AddField(
                    model_name="userreport",
                    name="group_id",
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(
                        db_index=True, null=True
                    ),
                ),
                migrations.AddField(
                    model_name="userreport",
                    name="project_id",
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(
                        db_index=True, default=1
                    ),
                    preserve_default=False,
                ),
                migrations.RemoveField(
                    model_name="eventattachment",
                    name="file",
                ),
                migrations.AlterUniqueTogether(
                    name="eventattachment",
                    unique_together={("project_id", "event_id", "file_id")},
                ),
                migrations.RemoveField(
                    model_name="userreport",
                    name="environment",
                ),
                migrations.RemoveField(
                    model_name="userreport",
                    name="group",
                ),
                migrations.RemoveField(
                    model_name="userreport",
                    name="project",
                ),
                migrations.AlterUniqueTogether(
                    name="userreport",
                    unique_together={("project_id", "event_id")},
                ),
                migrations.AlterIndexTogether(
                    name="eventattachment",
                    index_together={
                        ("project_id", "date_added", "file_id"),
                        ("project_id", "date_added"),
                    },
                ),
                migrations.AlterIndexTogether(
                    name="userreport",
                    index_together={("project_id", "event_id"), ("project_id", "date_added")},
                ),
            ],
        ),
        migrations.AlterField(
            model_name="dashboardwidget",
            name="display_type",
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(),
        ),
        migrations.AlterField(
            model_name="dashboardwidget",
            name="display_type",
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(),
        ),
        migrations.AlterIndexTogether(
            name="groupinbox",
            index_together={("project", "date_added")},
        ),
        migrations.AddField(
            model_name="dashboardwidgetquery",
            name="orderby",
            field=models.TextField(default=""),
        ),
        migrations.AlterField(
            model_name="activity",
            name="type",
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(),
        ),
        migrations.CreateModel(
            name="ProjectCodeOwners",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("raw", models.TextField(null=True)),
                ("schema", sentry.db.models.fields.jsonfield.JSONField(null=True)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Project",
                    ),
                ),
                (
                    "repository_project_path_config",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.RepositoryProjectPathConfig",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_projectcodeowners",
            },
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterField(
                    model_name="projectcodeowners",
                    name="repository_project_path_config",
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="sentry.RepositoryProjectPathConfig",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="NotificationSetting",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("scope_type", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("scope_identifier", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                (
                    "team_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Team", db_index=True, null=True, on_delete="CASCADE"
                    ),
                ),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "target_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Actor", db_index=True, on_delete="CASCADE"
                    ),
                ),
                ("provider", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("type", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("value", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
            ],
            options={
                "db_table": "sentry_notificationsetting",
                "unique_together": {
                    (
                        "scope_type",
                        "scope_identifier",
                        "target_id",
                        "provider",
                        "type",
                    )
                },
            },
        ),
        migrations.AlterField(
            model_name="organization",
            name="flags",
            field=bitfield.models.BitField(
                (
                    (
                        "allow_joinleave",
                        "Allow members to join and leave teams without requiring approval.",
                    ),
                    (
                        "enhanced_privacy",
                        "Enable enhanced privacy controls to limit personally identifiable information (PII) as well as source code in things like notifications.",
                    ),
                    (
                        "disable_shared_issues",
                        "Disable sharing of limited details on issues to anonymous users.",
                    ),
                    (
                        "early_adopter",
                        "Enable early adopter status, gaining access to features prior to public release.",
                    ),
                    (
                        "require_2fa",
                        "Require and enforce two-factor authentication for all members.",
                    ),
                    (
                        "disable_new_visibility_features",
                        "Temporarily opt out of new visibility features and ui",
                    ),
                    ("demo_mode", "Mark an organization as a demo org."),
                ),
                default=1,
            ),
        ),
        migrations.AlterField(
            model_name="user",
            name="flags",
            field=bitfield.models.BitField(
                (
                    (
                        "newsletter_consent_prompt",
                        "Do we need to ask this user for newsletter consent?",
                    ),
                    ("demo_mode", "Mark an user as a demo user."),
                ),
                default=0,
                null=True,
            ),
        ),
        migrations.CreateModel(
            name="Actor",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("type", models.PositiveSmallIntegerField()),
            ],
            options={
                "db_table": "sentry_actor",
            },
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='ALTER TABLE sentry_team ADD COLUMN "actor_id" bigint NULL;',
                    reverse_sql='ALTER TABLE sentry_team DROP COLUMN "actor_id";',
                    hints={"tables": ["sentry_team"]},
                ),
                migrations.RunSQL(
                    sql="CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS sentry_team_actor_idx ON sentry_team (actor_id);",
                    reverse_sql="DROP INDEX CONCURRENTLY IF EXISTS sentry_team_actor_idx;",
                    hints={"tables": ["sentry_team"]},
                ),
                migrations.RunSQL(
                    sql='ALTER TABLE sentry_team ADD CONSTRAINT "sentry_team_actor_idx_fk_sentry_actor_id" FOREIGN KEY ("actor_id") REFERENCES "sentry_actor" ("id") DEFERRABLE INITIALLY DEFERRED;',
                    reverse_sql="ALTER TABLE sentry_team DROP CONSTRAINT IF EXISTS sentry_team_actor_idx_fk_sentry_actor_id;",
                    hints={"tables": ["sentry_team"]},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="team",
                    name="actor",
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="sentry.Actor",
                        unique=True,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="alertrule",
            name="owner",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE, to="sentry.Actor"
            ),
        ),
        migrations.AddField(
            model_name="rule",
            name="owner",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE, to="sentry.Actor"
            ),
        ),
        migrations.AlterField(
            model_name="organization",
            name="flags",
            field=bitfield.models.BitField(
                (
                    (
                        "allow_joinleave",
                        "Allow members to join and leave teams without requiring approval.",
                    ),
                    (
                        "enhanced_privacy",
                        "Enable enhanced privacy controls to limit personally identifiable information (PII) as well as source code in things like notifications.",
                    ),
                    (
                        "disable_shared_issues",
                        "Disable sharing of limited details on issues to anonymous users.",
                    ),
                    (
                        "early_adopter",
                        "Enable early adopter status, gaining access to features prior to public release.",
                    ),
                    (
                        "require_2fa",
                        "Require and enforce two-factor authentication for all members.",
                    ),
                    (
                        "disable_new_visibility_features",
                        "Temporarily opt out of new visibility features and ui",
                    ),
                ),
                default=1,
            ),
        ),
        migrations.AlterField(
            model_name="user",
            name="flags",
            field=bitfield.models.BitField(
                (
                    (
                        "newsletter_consent_prompt",
                        "Do we need to ask this user for newsletter consent?",
                    ),
                ),
                default=0,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="savedsearch",
            name="sort",
            field=sentry.db.models.fields.text.CharField(default="date", max_length=16, null=True),
        ),
        migrations.AlterField(
            model_name="projectcodeowners",
            name="repository_project_path_config",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                to="sentry.RepositoryProjectPathConfig",
                unique=True,
            ),
        ),
        migrations.CreateModel(
            name="ExternalActor",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ("provider", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("external_name", models.TextField()),
                ("external_id", models.TextField(null=True)),
                (
                    "actor",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Actor"
                    ),
                ),
                (
                    "integration_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Integration",
                        on_delete="CASCADE",
                    ),
                ),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Organization"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_externalactor",
                "unique_together": {("organization", "provider", "external_name", "actor")},
            },
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_externalactor" ALTER COLUMN "integration_id" SET DEFAULT 1;\n                    UPDATE "sentry_externalactor" SET "integration_id" = 1 where "integration_id" is NULL;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_externalactor" ALTER COLUMN "integration_id" DROP DEFAULT;\n                    ',
                    hints={"tables": ["sentry_externalactor"]},
                ),
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_externalactor" ALTER COLUMN "integration_id" SET NOT NULL;\n                    ALTER TABLE "sentry_externalactor" ALTER COLUMN "integration_id" DROP DEFAULT;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_externalactor" ALTER COLUMN "integration_id" DROP NOT NULL;\n                    ',
                    hints={"tables": ["sentry_externalactor"]},
                ),
            ],
            state_operations=[],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.AlterField(
                    model_name="fileblobowner",
                    name="organization",
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Organization",
                    ),
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="fileblobowner",
                    name="organization_id",
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                    preserve_default=False,
                ),
                migrations.RemoveField(
                    model_name="fileblobowner",
                    name="organization",
                ),
                migrations.AlterUniqueTogether(
                    name="fileblobowner",
                    unique_together={("blob", "organization_id")},
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql="\n                    CREATE INDEX CONCURRENTLY IF NOT EXISTS sentry_grouprelease_group_id_first_seen_53fc35ds\n                    ON sentry_grouprelease USING btree (group_id, first_seen);\n                    ",
                    reverse_sql="\n                    DROP INDEX CONCURRENTLY IF EXISTS sentry_grouprelease_group_id_first_seen_53fc35ds;\n                    ",
                    hints={"tables": ["sentry_grouprelease"]},
                ),
                migrations.RunSQL(
                    sql="\n                    CREATE INDEX CONCURRENTLY IF NOT EXISTS sentry_grouprelease_group_id_last_seen_g8v2sk7c\n                    ON sentry_grouprelease USING btree (group_id, last_seen DESC);\n                    ",
                    reverse_sql="\n                    DROP INDEX CONCURRENTLY IF EXISTS sentry_grouprelease_group_id_last_seen_g8v2sk7c;\n                    ",
                    hints={"tables": ["sentry_grouprelease"]},
                ),
            ],
            state_operations=[
                migrations.AlterIndexTogether(
                    name="grouprelease",
                    index_together={("group_id", "first_seen"), ("group_id", "last_seen")},
                ),
            ],
        ),
        migrations.AlterField(
            model_name="externalactor",
            name="provider",
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(),
        ),
        migrations.CreateModel(
            name="TeamKeyTransaction",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("transaction", models.CharField(max_length=200)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Organization"
                    ),
                ),
                (
                    "project_team",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.ProjectTeam",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_performanceteamkeytransaction",
                "unique_together": {("project_team", "transaction")},
            },
        ),
        migrations.AlterField(
            model_name="organizationmember",
            name="flags",
            field=bitfield.models.BitField(
                (
                    ("sso:linked", "sso:linked"),
                    ("sso:invalid", "sso:invalid"),
                    ("member-limit:restricted", "member-limit:restricted"),
                ),
                default=0,
            ),
        ),
        migrations.AlterField(
            model_name="authprovider",
            name="flags",
            field=bitfield.models.BitField(
                (
                    ("allow_unlinked", "Grant access to members who have not linked SSO accounts."),
                    ("scim_enabled", "Enable SCIM for member and team provisioning and syncing"),
                ),
                default=0,
            ),
        ),
        migrations.CreateModel(
            name="ProjectTransactionThreshold",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ("threshold", models.IntegerField()),
                ("metric", models.PositiveSmallIntegerField(default=1)),
                (
                    "edited_by_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        settings.AUTH_USER_MODEL,
                        null=True,
                        on_delete="SET_NULL",
                    ),
                ),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Organization"
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Project",
                        unique=True,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_projecttransactionthreshold",
            },
        ),
        migrations.CreateModel(
            name="ProjectTransactionThresholdOverride",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ("transaction", models.CharField(max_length=200)),
                ("threshold", models.IntegerField()),
                ("metric", models.PositiveSmallIntegerField(default=1)),
                (
                    "edited_by_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        settings.AUTH_USER_MODEL,
                        null=True,
                        on_delete="SET_NULL",
                    ),
                ),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Organization"
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Project",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_projecttransactionthresholdoverride",
                "unique_together": {("project", "transaction")},
            },
        ),
        migrations.AddField(
            model_name="release",
            name="build_code",
            field=models.TextField(null=True),
        ),
        migrations.AddField(
            model_name="release",
            name="build_number",
            field=models.BigIntegerField(null=True),
        ),
        migrations.AddField(
            model_name="release",
            name="major",
            field=models.BigIntegerField(null=True),
        ),
        migrations.AddField(
            model_name="release",
            name="minor",
            field=models.BigIntegerField(null=True),
        ),
        migrations.AddField(
            model_name="release",
            name="patch",
            field=models.BigIntegerField(null=True),
        ),
        migrations.AddField(
            model_name="release",
            name="prerelease",
            field=models.TextField(null=True),
        ),
        migrations.AddField(
            model_name="release",
            name="revision",
            field=models.BigIntegerField(null=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX CONCURRENTLY IF NOT EXISTS "sentry_release_organization_id_major_mi_38715957_idx"\n                    ON "sentry_release" ("organization_id", "major" DESC, "minor" DESC, "patch" DESC, "revision" DESC);\n                    ',
                    reverse_sql="DROP INDEX CONCURRENTLY IF EXISTS sentry_release_organization_id_major_mi_38715957_idx",
                    hints={"tables": ["sentry_release"]},
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX CONCURRENTLY IF NOT EXISTS "sentry_release_organization_id_build_code_f93815e5_idx" ON "sentry_release" ("organization_id", "build_code");\n                    ',
                    reverse_sql="DROP INDEX CONCURRENTLY IF EXISTS sentry_release_organization_id_build_code_f93815e5_idx",
                    hints={"tables": ["sentry_release"]},
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX CONCURRENTLY IF NOT EXISTS "sentry_release_organization_id_build_number_e1646551_idx" ON "sentry_release" ("organization_id", "build_number");\n                    ',
                    reverse_sql="DROP INDEX CONCURRENTLY IF EXISTS sentry_release_organization_id_build_number_e1646551_idx",
                    hints={"tables": ["sentry_release"]},
                ),
            ],
            state_operations=[
                migrations.AlterIndexTogether(
                    name="release",
                    index_together={
                        ("organization", "major", "minor", "patch", "revision"),
                        ("organization", "build_number"),
                        ("organization", "build_code"),
                    },
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX CONCURRENTLY IF NOT EXISTS "sentry_release_organization_id_status_3c637259_idx" ON "sentry_release" ("organization_id", "status");\n                    ',
                    reverse_sql="DROP INDEX CONCURRENTLY IF EXISTS sentry_release_organization_id_status_3c637259_idx",
                    hints={"tables": ["sentry_release"]},
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX CONCURRENTLY IF NOT EXISTS "sentry_release_organization_id_date_added_8ebd273a_idx" ON "sentry_release" ("organization_id", "date_added");\n                    ',
                    reverse_sql="DROP INDEX CONCURRENTLY IF EXISTS sentry_release_organization_id_date_added_8ebd273a_idx",
                    hints={"tables": ["sentry_release"]},
                ),
            ],
            state_operations=[
                migrations.AlterIndexTogether(
                    name="release",
                    index_together={
                        ("organization", "build_number"),
                        ("organization", "date_added"),
                        ("organization", "major", "minor", "patch", "revision"),
                        ("organization", "build_code"),
                        ("organization", "status"),
                    },
                ),
            ],
        ),
        migrations.AddField(
            model_name="release",
            name="package",
            field=models.TextField(null=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    DROP INDEX CONCURRENTLY IF EXISTS "sentry_release_organization_id_major_mi_38715957_idx";\n                    ',
                    reverse_sql='\n                    CREATE INDEX CONCURRENTLY IF NOT EXISTS "sentry_release_organization_id_major_mi_38715957_idx"\n                    ON "sentry_release" ("organization_id", "major" DESC, "minor" DESC, "patch" DESC, "revision" DESC);\n                    ',
                    hints={"tables": ["sentry_release"]},
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX CONCURRENTLY IF NOT EXISTS "sentry_release_semver_idx"\n                    ON "sentry_release" (\n                    "organization_id",\n                    "major" DESC,\n                    "minor" DESC,\n                    "patch" DESC,\n                    "revision" DESC,\n                    (CASE\n                        WHEN prerelease = \'\'::text THEN 1\n                        ELSE 0\n                    END) DESC,\n                    prerelease DESC);\n                    ',
                    reverse_sql="DROP INDEX CONCURRENTLY IF EXISTS sentry_release_semver_idx",
                    hints={"tables": ["sentry_release"]},
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX CONCURRENTLY IF NOT EXISTS "sentry_release_semver_by_package_idx"\n                    ON "sentry_release" (\n                    "organization_id",\n                    "package",\n                    "major" DESC,\n                    "minor" DESC,\n                    "patch" DESC,\n                    "revision" DESC,\n                    (CASE\n                        WHEN prerelease = \'\'::text THEN 1\n                        ELSE 0\n                    END) DESC,\n                    prerelease DESC);\n                    ',
                    reverse_sql="DROP INDEX CONCURRENTLY IF EXISTS sentry_release_semver_by_package_idx",
                    hints={"tables": ["sentry_release"]},
                ),
            ],
            state_operations=[
                migrations.AlterIndexTogether(
                    name="release",
                    index_together={
                        ("organization", "build_number"),
                        ("organization", "date_added"),
                        ("organization", "major", "minor", "patch", "revision", "prerelease"),
                        ("organization", "build_code"),
                        (
                            "organization",
                            "package",
                            "major",
                            "minor",
                            "patch",
                            "revision",
                            "prerelease",
                        ),
                        ("organization", "status"),
                    },
                ),
            ],
        ),
        migrations.RunSQL(
            sql='\n            CREATE INDEX CONCURRENTLY IF NOT EXISTS "sentry_organization_slug_upper_idx"\n            ON "sentry_organization" (UPPER(("slug"::text)));\n            ',
            reverse_sql="DROP INDEX CONCURRENTLY IF EXISTS sentry_organization_slug_upper_idx",
            hints={"tables": ["sentry_organization"]},
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX CONCURRENTLY IF NOT EXISTS "sentry_groupedmessage_project_id_status_last_s_6b8195a7_idx" ON "sentry_groupedmessage" ("project_id", "status", "last_seen", "id");\n                    ',
                    reverse_sql="DROP INDEX CONCURRENTLY IF EXISTS sentry_groupedmessage_project_id_status_last_s_6b8195a7_idx",
                    hints={"tables": ["sentry_groupedmessage"]},
                ),
            ],
            state_operations=[
                migrations.AlterIndexTogether(
                    name="group",
                    index_together={
                        ("project", "first_release"),
                        ("project", "id"),
                        ("project", "status", "last_seen", "id"),
                    },
                ),
            ],
        ),
        migrations.AlterField(
            model_name="organization",
            name="flags",
            field=bitfield.models.BitField(
                (
                    (
                        "allow_joinleave",
                        "Allow members to join and leave teams without requiring approval.",
                    ),
                    (
                        "enhanced_privacy",
                        "Enable enhanced privacy controls to limit personally identifiable information (PII) as well as source code in things like notifications.",
                    ),
                    (
                        "disable_shared_issues",
                        "Disable sharing of limited details on issues to anonymous users.",
                    ),
                    (
                        "early_adopter",
                        "Enable early adopter status, gaining access to features prior to public release.",
                    ),
                    (
                        "require_2fa",
                        "Require and enforce two-factor authentication for all members.",
                    ),
                    (
                        "disable_new_visibility_features",
                        "Temporarily opt out of new visibility features and ui",
                    ),
                    (
                        "require_email_verification",
                        "Require and enforce email verification for all members.",
                    ),
                ),
                default=1,
            ),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_release_project" ADD COLUMN "adopted" timestamp with time zone NULL;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_release_project" DROP COLUMN "adopted";\n                    ',
                    hints={"tables": ["sentry_release_project"]},
                ),
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_release_project" ADD COLUMN "unadopted" timestamp with time zone NULL;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_release_project" DROP COLUMN "unadopted";\n                    ',
                    hints={"tables": ["sentry_release_project"]},
                ),
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_releaseprojectenvironment" ADD COLUMN "adopted" timestamp with time zone NULL;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_releaseprojectenvironment" DROP COLUMN "adopted";\n                    ',
                    hints={"tables": ["sentry_releaseprojectenvironment"]},
                ),
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_releaseprojectenvironment" ADD COLUMN "unadopted" timestamp with time zone NULL;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_releaseprojectenvironment" DROP COLUMN "unadopted";\n                    ',
                    hints={"tables": ["sentry_releaseprojectenvironment"]},
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX CONCURRENTLY IF NOT EXISTS "sentry_release_project_proj_id_adopted_4ce765fa" ON "sentry_release_project" ("project_id", "adopted");\n                    ',
                    reverse_sql="DROP INDEX CONCURRENTLY IF EXISTS sentry_release_project_proj_id_adopted_4ce765fa",
                    hints={"tables": ["sentry_release_project"]},
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX CONCURRENTLY IF NOT EXISTS "sentry_release_project_proj_id_unadopted_8h5g84ee" ON "sentry_release_project" ("project_id", "unadopted");\n                    ',
                    reverse_sql="DROP INDEX CONCURRENTLY IF EXISTS sentry_release_project_proj_id_unadopted_8h5g84ee",
                    hints={"tables": ["sentry_release_project"]},
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX CONCURRENTLY IF NOT EXISTS "sentry_releaseprojectenvironment_proj_id_env_id_adopted_j6h89s3" ON "sentry_releaseprojectenvironment" ("project_id", "adopted", "environment_id");\n                    ',
                    reverse_sql="DROP INDEX CONCURRENTLY IF EXISTS sentry_releaseprojectenvironment_proj_id_env_id_adopted_j6h89s3",
                    hints={"tables": ["sentry_releaseprojectenvironment"]},
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX CONCURRENTLY IF NOT EXISTS "sentry_releaseprojectenvironment_proj_id_env_id_unadopted_kyh5m" ON "sentry_releaseprojectenvironment" ("project_id", "unadopted", "environment_id");\n                    ',
                    reverse_sql="DROP INDEX CONCURRENTLY IF EXISTS sentry_releaseprojectenvironment_proj_id_env_id_unadopted_kyh5m",
                    hints={"tables": ["sentry_releaseprojectenvironment"]},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="releaseproject",
                    name="adopted",
                    field=models.DateTimeField(blank=True, null=True),
                ),
                migrations.AddField(
                    model_name="releaseproject",
                    name="unadopted",
                    field=models.DateTimeField(blank=True, null=True),
                ),
                migrations.AddField(
                    model_name="releaseprojectenvironment",
                    name="adopted",
                    field=models.DateTimeField(blank=True, null=True),
                ),
                migrations.AddField(
                    model_name="releaseprojectenvironment",
                    name="unadopted",
                    field=models.DateTimeField(blank=True, null=True),
                ),
                migrations.AlterIndexTogether(
                    name="releaseproject",
                    index_together={("project", "adopted"), ("project", "unadopted")},
                ),
                migrations.AlterIndexTogether(
                    name="releaseprojectenvironment",
                    index_together={
                        ("project", "adopted", "environment"),
                        ("project", "unadopted", "environment"),
                    },
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.AlterField(
                    model_name="organizationavatar",
                    name="file",
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="sentry.File",
                        unique=True,
                    ),
                ),
                migrations.AlterField(
                    model_name="projectavatar",
                    name="file",
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="sentry.File",
                        unique=True,
                    ),
                ),
                migrations.AlterField(
                    model_name="sentryappavatar",
                    name="file",
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="sentry.File",
                        unique=True,
                    ),
                ),
                migrations.AlterField(
                    model_name="useravatar",
                    name="file",
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="sentry.File",
                        unique=True,
                    ),
                ),
                migrations.AlterField(
                    model_name="teamavatar",
                    name="file",
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="sentry.File",
                        unique=True,
                    ),
                ),
            ],
            state_operations=[
                migrations.RemoveField(
                    model_name="organizationavatar",
                    name="file",
                ),
                migrations.RemoveField(
                    model_name="projectavatar",
                    name="file",
                ),
                migrations.RemoveField(
                    model_name="sentryappavatar",
                    name="file",
                ),
                migrations.RemoveField(
                    model_name="useravatar",
                    name="file",
                ),
                migrations.RemoveField(
                    model_name="teamavatar",
                    name="file",
                ),
                migrations.AddField(
                    model_name="organizationavatar",
                    name="file_id",
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(
                        null=True, unique=True
                    ),
                ),
                migrations.AddField(
                    model_name="projectavatar",
                    name="file_id",
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(
                        null=True, unique=True
                    ),
                ),
                migrations.AddField(
                    model_name="sentryappavatar",
                    name="file_id",
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(
                        null=True, unique=True
                    ),
                ),
                migrations.AddField(
                    model_name="useravatar",
                    name="file_id",
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(
                        null=True, unique=True
                    ),
                ),
                migrations.AddField(
                    model_name="teamavatar",
                    name="file_id",
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(
                        null=True, unique=True
                    ),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.AddField(
                    model_name="releasefile",
                    name="artifact_count",
                    field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="releasefile",
                    name="artifact_count",
                    field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                        default=1, null=True
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AppConnectBuild",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("app_id", models.IntegerField()),
                ("bundle_id", models.CharField(max_length=256)),
                ("platform", models.CharField(max_length=256)),
                ("bundle_short_version", models.CharField(max_length=256)),
                ("bundle_version", models.CharField(max_length=256)),
                ("fetched", models.BooleanField(default=False)),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Project",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_appconnectbuild",
            },
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX CONCURRENTLY  "sentry_rule_project_id_status_owner_id_82f20db5_idx" ON "sentry_rule" ("project_id", "status", "owner_id");\n                    ',
                    reverse_sql="\n                    DROP INDEX CONCURRENTLY IF EXISTS sentry_rule_project_id_status_owner_id_82f20db5_idx;\n                    ",
                    hints={"tables": ["sentry_rule"]},
                ),
            ],
            state_operations=[
                migrations.AlterIndexTogether(
                    name="rule",
                    index_together={("project", "status", "owner")},
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX CONCURRENTLY "sentry_activity_project_id_datetime_c00585e4_idx" ON "sentry_activity" ("project_id", "datetime");\n                    ',
                    reverse_sql="\n                DROP INDEX CONCURRENTLY IF EXISTS sentry_activity_project_id_datetime_c00585e4_idx;\n                ",
                    hints={"tables": ["sentry_activity"]},
                ),
            ],
            state_operations=[
                migrations.AlterIndexTogether(
                    name="activity",
                    index_together={("project", "type", "datetime")},
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterIndexTogether(
                    name="activity",
                    index_together={("project", "datetime")},
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[],
            state_operations=[
                migrations.AlterUniqueTogether(
                    name="groupassignee",
                    unique_together={("project", "group")},
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[],
            state_operations=[
                migrations.AlterUniqueTogether(
                    name="group",
                    unique_together={("project", "id"), ("project", "short_id")},
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.AlterField(
                    model_name="projectdebugfile",
                    name="project",
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Project",
                    ),
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="projectdebugfile",
                    name="project_id",
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
                ),
                migrations.RemoveField(
                    model_name="projectdebugfile",
                    name="project",
                ),
                migrations.AlterIndexTogether(
                    name="projectdebugfile",
                    index_together={("project_id", "debug_id"), ("project_id", "code_id")},
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.AlterField(
                    model_name="releasefile",
                    name="dist",
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Distribution",
                    ),
                ),
                migrations.AlterField(
                    model_name="releasefile",
                    name="organization",
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Organization",
                    ),
                ),
                migrations.AlterField(
                    model_name="releasefile",
                    name="release",
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Release",
                    ),
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="releasefile",
                    name="dist_id",
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
                ),
                migrations.AddField(
                    model_name="releasefile",
                    name="organization_id",
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(),
                ),
                migrations.AddField(
                    model_name="releasefile",
                    name="release_id",
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(),
                ),
                migrations.RemoveField(
                    model_name="releasefile",
                    name="dist",
                ),
                migrations.RemoveField(
                    model_name="releasefile",
                    name="organization",
                ),
                migrations.RemoveField(
                    model_name="releasefile",
                    name="release",
                ),
                migrations.AlterUniqueTogether(
                    name="releasefile",
                    unique_together={("release_id", "ident")},
                ),
                migrations.AlterIndexTogether(
                    name="releasefile",
                    index_together={("release_id", "name")},
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name="exporteddata",
                    name="file",
                ),
                migrations.AddField(
                    model_name="exporteddata",
                    name="file_id",
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
                ),
                migrations.AddField(
                    model_name="exporteddatablob",
                    name="blob_id",
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(default=0),
                    preserve_default=False,
                ),
                migrations.RemoveField(
                    model_name="exporteddatablob",
                    name="blob",
                ),
                migrations.AlterUniqueTogether(
                    name="exporteddatablob",
                    unique_together={("data_export", "blob_id", "offset")},
                ),
            ],
        ),
        migrations.AddField(
            model_name="groupresolution",
            name="current_release_version",
            field=models.CharField(blank=True, max_length=250, null=True),
        ),
        migrations.AddField(
            model_name="appconnectbuild",
            name="first_seen",
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name="appconnectbuild",
            name="uploaded_to_appstore",
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX CONCURRENTLY "sentry_audi_organiz_c8bd18_idx" ON "sentry_auditlogentry" ("organization_id", "datetime");\n                    ',
                    reverse_sql="\n                    DROP INDEX CONCURRENTLY IF EXISTS sentry_audi_organiz_c8bd18_idx;\n                    ",
                    hints={"tables": ["sentry_auditlogentry"]},
                ),
            ],
            state_operations=[
                migrations.AlterIndexTogether(
                    name="auditlogentry",
                    index_together=set(),
                ),
                migrations.AddIndex(
                    model_name="auditlogentry",
                    index=models.Index(
                        fields=["organization_id", "datetime"],
                        name="sentry_audi_organiz_c8bd18_idx",
                    ),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="project",
            name="flags",
            field=bitfield.models.BitField(
                (
                    ("has_releases", "This Project has sent release data"),
                    ("has_issue_alerts_targeting", "This Project has issue alerts targeting"),
                    ("has_transactions", "This Project has sent transactions"),
                    ("has_alert_filters", "This Project has filters"),
                    ("has_sessions", "This Project has sessions"),
                ),
                default=10,
                null=True,
            ),
        ),
        migrations.CreateModel(
            name="LatestAppConnectBuildsCheck",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ("source_id", models.CharField(max_length=200)),
                ("last_checked", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Project",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_latestappconnectbuildscheck",
                "unique_together": {("project", "source_id")},
            },
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.AddField(
                    model_name="dashboard",
                    name="last_visited",
                    field=models.DateTimeField(null=True),
                ),
                migrations.AddField(
                    model_name="dashboard",
                    name="visits",
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
                ),
                migrations.AddField(
                    model_name="discoversavedquery",
                    name="last_visited",
                    field=models.DateTimeField(null=True),
                ),
                migrations.AddField(
                    model_name="discoversavedquery",
                    name="visits",
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="dashboard",
                    name="last_visited",
                    field=models.DateTimeField(default=django.utils.timezone.now, null=True),
                ),
                migrations.AddField(
                    model_name="dashboard",
                    name="visits",
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(
                        default=1, null=True
                    ),
                ),
                migrations.AddField(
                    model_name="discoversavedquery",
                    name="last_visited",
                    field=models.DateTimeField(default=django.utils.timezone.now, null=True),
                ),
                migrations.AddField(
                    model_name="discoversavedquery",
                    name="visits",
                    field=sentry.db.models.fields.bounded.BoundedBigIntegerField(
                        default=1, null=True
                    ),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX CONCURRENTLY "sentry_audi_organiz_588b1e_idx" ON "sentry_auditlogentry" ("organization_id", "event", "datetime");\n                    ',
                    reverse_sql="\n                    DROP INDEX CONCURRENTLY IF EXISTS sentry_audi_organiz_588b1e_idx;\n                    ",
                    hints={"tables": ["sentry_auditlogentry"]},
                ),
            ],
            state_operations=[
                migrations.AddIndex(
                    model_name="auditlogentry",
                    index=models.Index(
                        fields=["organization_id", "event", "datetime"],
                        name="sentry_audi_organiz_588b1e_idx",
                    ),
                ),
            ],
        ),
        migrations.RunSQL(
            sql='\n                DROP TABLE IF EXISTS "jira_ac_tenant";\n                ',
            reverse_sql="CREATE TABLE jira_ac_tenant (fake_col int)",
            hints={"tables": ["jira_ac_tenant"]},
        ),
        migrations.AddField(
            model_name="alertruletriggeraction",
            name="sentry_app_config",
            field=sentry.db.models.fields.jsonfield.JSONField(null=True),
        ),
        migrations.AddField(
            model_name="alertrule",
            name="comparison_delta",
            field=models.IntegerField(null=True),
        ),
        migrations.CreateModel(
            name="GroupHistory",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("status", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ("prev_history_date", models.DateTimeField(null=True)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "actor",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="sentry.Actor"
                    ),
                ),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Group",
                    ),
                ),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Organization",
                    ),
                ),
                (
                    "prev_history",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.GroupHistory",
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Project",
                    ),
                ),
                (
                    "release",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Release",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_grouphistory",
                "index_together": {("project", "status", "release")},
            },
        ),
        migrations.CreateModel(
            name="MetricsKeyIndexer",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("string", models.CharField(max_length=200)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "db_table": "sentry_metricskeyindexer",
            },
        ),
        migrations.AddConstraint(
            model_name="metricskeyindexer",
            constraint=models.UniqueConstraint(fields=("string",), name="unique_string"),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql="ALTER TABLE sentry_scheduleddeletion ALTER COLUMN aborted DROP NOT NULL",
                    reverse_sql="ALTER TABLE sentry_scheduleddeletion ALTER COLUMN aborted SET NOT NULL",
                    hints={"tables": ["sentry_scheduleddeletion"]},
                ),
            ],
            state_operations=[
                migrations.RemoveField(
                    model_name="scheduleddeletion",
                    name="aborted",
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql="ALTER TABLE sentry_scheduleddeletion DROP COLUMN aborted",
                    reverse_sql="ALTER TABLE sentry_scheduleddeletion ADD COLUMN aborted BOOLEAN",
                    hints={"tables": ["sentry_scheduleddeletion"]},
                ),
            ],
        ),
        migrations.AlterIndexTogether(
            name="grouphistory",
            index_together={("project", "status", "release"), ("group", "status")},
        ),
        migrations.AlterField(
            model_name="grouphistory",
            name="actor",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, to="sentry.Actor"
            ),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AddField(
                    model_name="grouplink",
                    name="group",
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Group",
                    ),
                ),
                migrations.AddField(
                    model_name="grouplink",
                    name="project",
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Project",
                    ),
                ),
                migrations.AlterUniqueTogether(
                    name="grouplink",
                    unique_together={("group", "linked_type", "linked_id")},
                ),
                migrations.RemoveField(
                    model_name="grouplink",
                    name="group_id",
                ),
                migrations.RemoveField(
                    model_name="grouplink",
                    name="project_id",
                ),
            ],
        ),
        migrations.AlterField(
            model_name="incidentsnapshot",
            name="event_stats_snapshot",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                db_constraint=False,
                on_delete=django.db.models.deletion.CASCADE,
                to="sentry.TimeSeriesSnapshot",
            ),
        ),
        migrations.AlterField(
            model_name="incidentsnapshot",
            name="incident",
            field=sentry.db.models.fields.onetoone.OneToOneCascadeDeletes(
                db_constraint=False,
                on_delete=django.db.models.deletion.CASCADE,
                to="sentry.Incident",
            ),
        ),
        migrations.AlterField(
            model_name="pendingincidentsnapshot",
            name="incident",
            field=sentry.db.models.fields.onetoone.OneToOneCascadeDeletes(
                db_constraint=False,
                on_delete=django.db.models.deletion.CASCADE,
                to="sentry.Incident",
            ),
        ),
        migrations.RemoveField(
            model_name="sentryappavatar",
            name="avatar_type",
        ),
        migrations.AddField(
            model_name="sentryappavatar",
            name="color",
            field=models.BooleanField(default=False),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.AddField(
                    model_name="sentryapp",
                    name="popularity",
                    field=models.PositiveSmallIntegerField(null=True),
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="sentryapp",
                    name="popularity",
                    field=models.PositiveSmallIntegerField(default=1, null=True),
                ),
            ],
        ),
        migrations.AddField(
            model_name="sentryappavatar",
            name="avatar_type",
            field=models.PositiveSmallIntegerField(default=0),
        ),
        migrations.AlterField(
            model_name="sentryappavatar",
            name="sentry_app",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="avatar",
                to="sentry.SentryApp",
            ),
        ),
        migrations.AddField(
            model_name="dashboardwidget",
            name="widget_type",
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
        ),
        migrations.AddField(
            model_name="organizationintegration",
            name="grace_period_end",
            field=models.DateTimeField(blank=True, db_index=True, null=True),
        ),
        migrations.CreateModel(
            name="DocIntegration",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("slug", models.CharField(max_length=64, unique=True)),
                ("author", models.CharField(max_length=255)),
                ("description", models.TextField()),
                ("url", models.URLField()),
                ("popularity", models.PositiveSmallIntegerField(default=1, null=True)),
                ("is_draft", models.NullBooleanField(default=True)),
                ("metadata", sentry.db.models.fields.jsonfield.JSONField(null=True)),
            ],
            options={
                "db_table": "sentry_docintegration",
            },
        ),
        migrations.CreateModel(
            name="DocIntegrationAvatar",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "file_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True, unique=True),
                ),
                ("ident", models.CharField(db_index=True, max_length=32, unique=True)),
                ("avatar_type", models.PositiveSmallIntegerField(default=0)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "doc_integration",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="avatar",
                        to="sentry.DocIntegration",
                    ),
                ),
            ],
            options={
                "db_table": "sentry_docintegrationavatar",
            },
        ),
        migrations.AlterField(
            model_name="docintegration",
            name="is_draft",
            field=models.BooleanField(default=True),
        ),
        migrations.AlterField(
            model_name="docintegration",
            name="name",
            field=models.CharField(max_length=64),
        ),
        migrations.CreateModel(
            name="UserRole",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ("name", models.CharField(max_length=32, unique=True)),
                ("permissions", sentry.db.models.fields.array.ArrayField(null=True)),
            ],
            options={
                "db_table": "sentry_userrole",
            },
        ),
        migrations.CreateModel(
            name="UserRoleUser",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                (
                    "role",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.UserRole"
                    ),
                ),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "db_table": "sentry_userrole_users",
            },
        ),
        migrations.AddField(
            model_name="userrole",
            name="users",
            field=models.ManyToManyField(
                through="sentry.UserRoleUser", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="dashboardwidget",
            name="detail",
            field=sentry.db.models.fields.jsonfield.JSONField(null=True),
        ),
        migrations.AddIndex(
            model_name="release",
            index=models.Index(
                fields=["organization", "version"],
                name="sentry_release_version_btree",
                opclasses=["", "text_pattern_ops"],
            ),
        ),
        migrations.AlterIndexTogether(
            name="grouphistory",
            index_together={
                ("project", "status", "release"),
                ("group", "status"),
                ("project", "date_added"),
            },
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.AddField(
                    model_name="projectownership",
                    name="codeowners_auto_sync",
                    field=models.BooleanField(null=True),
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="projectownership",
                    name="codeowners_auto_sync",
                    field=models.BooleanField(default=True, null=True),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="monitorcheckin",
            name="status",
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                db_index=True, default=0
            ),
        ),
        migrations.AddIndex(
            model_name="groupemailthread",
            index=models.Index(
                fields=["date", "project", "id"], name="sentry_grou_date_d4eb5a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="monitorcheckin",
            index=models.Index(
                fields=["monitor", "date_added", "status"], name="sentry_moni_monitor_0a49ce_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="grouplink",
            index=models.Index(
                fields=["project", "linked_id", "linked_type", "group"],
                name="sentry_grou_project_dd3e95_idx",
            ),
        ),
        migrations.AddField(
            model_name="dashboardwidgetquery",
            name="aggregates",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.TextField(), null=True, size=None
            ),
        ),
        migrations.AddField(
            model_name="dashboardwidgetquery",
            name="columns",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.TextField(), null=True, size=None
            ),
        ),
        migrations.CreateModel(
            name="RuleFireHistory",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Group",
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.Project",
                    ),
                ),
                (
                    "rule",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Rule"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_rulefirehistory",
            },
        ),
        migrations.AddIndex(
            model_name="rulefirehistory",
            index=models.Index(
                fields=["rule", "date_added"], name="sentry_rule_rule_id_015b9e_idx"
            ),
        ),
        migrations.AlterField(
            model_name="rulefirehistory",
            name="date_added",
            field=models.DateTimeField(db_index=True, default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name="dashboardwidget",
            name="limit",
            field=models.IntegerField(null=True),
        ),
        migrations.AlterField(
            model_name="commitauthor",
            name="email",
            field=models.CharField(max_length=200),
        ),
        migrations.CreateModel(
            name="StringIndexer",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("string", models.CharField(max_length=200)),
                ("organization_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "last_seen",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("retention_days", models.IntegerField(default=90)),
            ],
            options={
                "db_table": "sentry_stringindexer",
            },
        ),
        migrations.AddConstraint(
            model_name="stringindexer",
            constraint=models.UniqueConstraint(
                fields=("string", "organization_id"), name="unique_org_string"
            ),
        ),
        migrations.AddField(
            model_name="dashboardwidgetquery",
            name="field_aliases",
            field=django.contrib.postgres.fields.ArrayField(
                base_field=models.TextField(), null=True, size=None
            ),
        ),
        migrations.AlterField(
            model_name="externalissue",
            name="key",
            field=models.CharField(max_length=256),
        ),
        migrations.RunSQL(
            sql="\n            ALTER SEQUENCE sentry_stringindexer_id_seq START WITH 65536;\n            ALTER SEQUENCE sentry_stringindexer_id_seq RESTART;\n            ",
            reverse_sql="\n            ALTER SEQUENCE sentry_stringindexer_id_seq START WITH 1;\n            ALTER SEQUENCE sentry_stringindexer_id_seq RESTART;\n            ",
            hints={"tables": ["sentry_stringindexer"]},
        ),
        migrations.AddField(
            model_name="organizationmemberteam",
            name="role",
            field=models.CharField(blank=True, max_length=32, null=True),
        ),
        migrations.AddConstraint(
            model_name="savedsearch",
            constraint=models.UniqueConstraint(
                condition=models.Q(is_global=True),
                fields=("is_global", "name"),
                name="sentry_savedsearch_organization_id_313a24e907cdef99",
            ),
        ),
        migrations.AddConstraint(
            model_name="savedsearch",
            constraint=models.UniqueConstraint(
                condition=models.Q(visibility="owner_pinned"),
                fields=("organization", "owner_id", "type"),
                name="sentry_savedsearch_pinning_constraint",
            ),
        ),
        migrations.CreateModel(
            name="PerfStringIndexer",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("string", models.CharField(max_length=200)),
                ("organization_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "last_seen",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("retention_days", models.IntegerField(default=90)),
            ],
            options={
                "db_table": "sentry_perfstringindexer",
            },
        ),
        migrations.AddConstraint(
            model_name="perfstringindexer",
            constraint=models.UniqueConstraint(
                fields=("string", "organization_id"), name="perf_unique_org_string"
            ),
        ),
        migrations.RunSQL(
            sql="\n            ALTER SEQUENCE sentry_perfstringindexer_id_seq START WITH 65536;\n            ALTER SEQUENCE sentry_perfstringindexer_id_seq RESTART;\n            ",
            reverse_sql="\n            ALTER SEQUENCE sentry_perfstringindexer_id_seq START WITH 1;\n            ALTER SEQUENCE sentry_perfstringindexer_id_seq RESTART;\n             ",
            hints={"tables": ["sentry_perfstringindexer"]},
        ),
        migrations.AddField(
            model_name="dashboard",
            name="filters",
            field=sentry.db.models.fields.jsonfield.JSONField(null=True),
        ),
        migrations.AddField(
            model_name="dashboard",
            name="projects",
            field=models.ManyToManyField(db_table="sentry_dashboardproject", to="sentry.Project"),
        ),
        migrations.AlterField(
            model_name="commitfilechange",
            name="filename",
            field=models.TextField(),
        ),
        migrations.AlterField(
            model_name="deploy",
            name="date_finished",
            field=models.DateTimeField(db_index=True, default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name="snubaquery",
            name="type",
            field=models.SmallIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name="snubaquery",
            name="type",
            field=models.SmallIntegerField(),
        ),
        migrations.CreateModel(
            name="ReleaseActivity",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("type", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("data", django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "release",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Release"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_releaseactivity",
            },
        ),
        migrations.CreateModel(
            name="SentryFunction",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ("name", models.TextField()),
                ("slug", models.CharField(max_length=64, unique=True)),
                ("author", models.TextField()),
                ("external_id", models.CharField(max_length=128, unique=True)),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Organization"
                    ),
                ),
                ("code", models.TextField(null=True)),
                ("overview", models.TextField(null=True)),
            ],
            options={
                "db_table": "sentry_sentryfunction",
                "unique_together": {("organization", "slug")},
            },
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.CreateModel(
                    name="DashboardProject",
                    fields=[
                        (
                            "id",
                            sentry.db.models.fields.bounded.BoundedBigAutoField(
                                primary_key=True, serialize=False
                            ),
                        ),
                    ],
                    options={
                        "db_table": "sentry_dashboardproject",
                    },
                ),
                migrations.AlterField(
                    model_name="dashboard",
                    name="projects",
                    field=models.ManyToManyField(
                        through="sentry.DashboardProject", to="sentry.Project"
                    ),
                ),
                migrations.AddField(
                    model_name="dashboardproject",
                    name="dashboard",
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Dashboard"
                    ),
                ),
                migrations.AddField(
                    model_name="dashboardproject",
                    name="project",
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Project"
                    ),
                ),
                migrations.AlterUniqueTogether(
                    name="dashboardproject",
                    unique_together={("project", "dashboard")},
                ),
            ],
        ),
        migrations.CreateModel(
            name="AuthProviderDefaultTeams",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "team_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(),
                ),
                (
                    "authprovider_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(),
                ),
            ],
            options={
                "db_table": "sentry_authprovider_default_teams",
            },
        ),
        migrations.RunSQL(
            sql="ALTER TABLE sentry_dashboardproject ALTER COLUMN id TYPE bigint",
            reverse_sql="ALTER TABLE sentry_dashboardproject ALTER COLUMN id TYPE int",
            hints={"tables": ["sentry_dashboardproject"]},
        ),
        migrations.RunSQL(
            sql="ALTER TABLE sentry_dashboardproject ALTER COLUMN id TYPE bigint",
            reverse_sql="ALTER TABLE sentry_dashboardproject ALTER COLUMN dashboard_id TYPE int",
            hints={"tables": ["sentry_dashboardproject"]},
        ),
        migrations.RunSQL(
            sql="ALTER TABLE sentry_dashboardproject ALTER COLUMN id TYPE bigint",
            reverse_sql="ALTER TABLE sentry_dashboardproject ALTER COLUMN project_id TYPE int",
            hints={"tables": ["sentry_dashboardproject"]},
        ),
        migrations.AddField(
            model_name="sentryfunction",
            name="events",
            field=sentry.db.models.fields.array.ArrayField(null=True),
        ),
        migrations.AlterField(
            model_name="project",
            name="flags",
            field=bitfield.models.BitField(
                (
                    ("has_releases", "This Project has sent release data"),
                    ("has_issue_alerts_targeting", "This Project has issue alerts targeting"),
                    ("has_transactions", "This Project has sent transactions"),
                    ("has_alert_filters", "This Project has filters"),
                    ("has_sessions", "This Project has sessions"),
                    ("has_profiles", "This Project has sent profiles"),
                ),
                default=10,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="sentryfunction",
            name="env_variables",
            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name="auditlogentry",
            name="target_object",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name="commit",
            name="organization_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name="commitauthor",
            name="organization_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name="commitfilechange",
            name="organization_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name="deploy",
            name="organization_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name="distribution",
            name="organization_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name="environment",
            name="organization_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(),
        ),
        migrations.AlterField(
            model_name="environment",
            name="project_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name="eventuser",
            name="project_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name="grouprelease",
            name="project_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name="monitor",
            name="organization_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name="monitor",
            name="project_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name="promptsactivity",
            name="organization_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name="promptsactivity",
            name="project_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name="pullrequest",
            name="organization_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name="release",
            name="project_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name="releasecommit",
            name="organization_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name="releasecommit",
            name="project_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name="releaseenvironment",
            name="project_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name="releasefile",
            name="project_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name="releaseheadcommit",
            name="organization_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name="repository",
            name="organization_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name="servicehook",
            name="actor_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name="servicehook",
            name="organization_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True, null=True),
        ),
        migrations.AlterField(
            model_name="servicehook",
            name="project_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True, null=True),
        ),
        migrations.AlterField(
            model_name="servicehookproject",
            name="project_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.RunSQL(
            sql="ALTER TABLE sentry_externalissue ALTER COLUMN organization_id TYPE bigint",
            reverse_sql="ALTER TABLE sentry_externalissue ALTER COLUMN organization_id TYPE int",
            hints={"tables": ["sentry_externalissue"]},
        ),
        migrations.RunSQL(
            sql="ALTER TABLE sentry_externalissue ALTER COLUMN integration_id TYPE bigint",
            reverse_sql="ALTER TABLE sentry_externalissue ALTER COLUMN integration_id TYPE int",
            hints={"tables": ["sentry_externalissue"]},
        ),
        migrations.RunSQL(
            sql="ALTER TABLE sentry_dashboardproject ALTER COLUMN project_id TYPE bigint",
            reverse_sql="ALTER TABLE sentry_dashboardproject ALTER COLUMN project_id TYPE int",
            hints={"tables": ["sentry_dashboardproject"]},
        ),
        migrations.RunSQL(
            sql="ALTER TABLE sentry_dashboardproject ALTER COLUMN dashboard_id TYPE bigint",
            reverse_sql="ALTER TABLE sentry_dashboardproject ALTER COLUMN dashboard_id TYPE int",
            hints={"tables": ["sentry_dashboardproject"]},
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_groupedmessage" ADD COLUMN "type" integer NOT NULL DEFAULT 1;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_groupedmessage" DROP COLUMN "type";\n                    ',
                    hints={"tables": ["sentry_groupedmessage"]},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="group",
                    name="type",
                    field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=1),
                ),
            ],
        ),
        migrations.AddField(
            model_name="groupowner",
            name="context",
            field=sentry.db.models.fields.jsonfield.JSONField(null=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX CONCURRENTLY IF NOT EXISTS "sentry_groupedmessage_project_id_type_status_l_074196b6_idx" ON "sentry_groupedmessage" ("project_id", "status", "type", "last_seen", "id");\n                    ',
                    reverse_sql="DROP INDEX CONCURRENTLY IF EXISTS sentry_groupedmessage_project_id_type_status_l_074196b6_idx",
                    hints={"tables": ["sentry_groupedmessage"]},
                ),
            ],
            state_operations=[
                migrations.AlterIndexTogether(
                    name="group",
                    index_together={
                        ("project", "first_release"),
                        ("project", "id"),
                        ("project", "status", "type", "last_seen", "id"),
                        ("project", "status", "last_seen", "id"),
                    },
                ),
            ],
        ),
        migrations.AddField(
            model_name="discoversavedquery",
            name="is_homepage",
            field=models.BooleanField(blank=True, null=True),
        ),
        migrations.AddConstraint(
            model_name="discoversavedquery",
            constraint=models.UniqueConstraint(
                condition=models.Q(is_homepage=True),
                fields=("organization", "created_by_id", "is_homepage"),
                name="unique_user_homepage_query",
            ),
        ),
        migrations.AlterField(
            model_name="projectownership",
            name="fallthrough",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="rulefirehistory",
            name="event_id",
            field=sentry.db.models.fields.text.CharField(max_length=32, null=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_projectownership" ADD COLUMN "suspect_committer_auto_assignment" BOOLEAN NOT NULL DEFAULT false;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_projectownership" DROP COLUMN "suspect_committer_auto_assignment";\n                    ',
                    hints={"tables": ["sentry_projectownership"]},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="projectownership",
                    name="suspect_committer_auto_assignment",
                    field=models.BooleanField(default=False),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="projectownership",
            name="fallthrough",
            field=models.BooleanField(default=True),
        ),
        migrations.AlterField(
            model_name="projectownership",
            name="auto_assignment",
            field=models.BooleanField(default=True),
        ),
        migrations.AlterField(
            model_name="projectownership",
            name="suspect_committer_auto_assignment",
            field=models.BooleanField(default=True),
        ),
        migrations.AlterField(
            model_name="projectownership",
            name="suspect_committer_auto_assignment",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="releaseproject",
            name="first_seen_transaction",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterIndexTogether(
            name="releaseproject",
            index_together={
                ("project", "adopted"),
                ("project", "first_seen_transaction"),
                ("project", "unadopted"),
            },
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_appconnectbuild" ADD COLUMN "app_id_str" varchar(256) NOT NULL DEFAULT \'0\';\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_appconnectbuild" DROP COLUMN "app_id_str";\n                    ',
                    hints={"tables": ["sentry_appconnectbuild"]},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="appconnectbuild",
                    name="app_id_str",
                    field=models.CharField(default="0", max_length=256),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="appconnectbuild",
            name="app_id",
            field=models.IntegerField(null=True),
        ),
        migrations.AlterField(
            model_name="project",
            name="flags",
            field=bitfield.models.BitField(
                (
                    ("has_releases", "This Project has sent release data"),
                    ("has_issue_alerts_targeting", "This Project has issue alerts targeting"),
                    ("has_transactions", "This Project has sent transactions"),
                    ("has_alert_filters", "This Project has filters"),
                    ("has_sessions", "This Project has sessions"),
                    ("has_profiles", "This Project has sent profiles"),
                    ("has_replays", "This Project has sent replays"),
                ),
                default=10,
                null=True,
            ),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name="appconnectbuild",
                    name="app_id_str",
                ),
                migrations.AlterField(
                    model_name="appconnectbuild",
                    name="app_id",
                    field=models.CharField(db_column="app_id_str", default="0", max_length=256),
                ),
            ],
        ),
        migrations.AddField(
            model_name="release",
            name="user_agent",
            field=models.TextField(null=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_appconnectbuild" DROP COLUMN "app_id";\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_appconnectbuild" ADD COLUMN "app_id" int NULL;\n                    ',
                    hints={"tables": ["sentry_appconnectbuild"]},
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_repositoryprojectpathconfig" ADD COLUMN "automatically_generated" BOOLEAN NOT NULL DEFAULT false;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_repositoryprojectpathconfig" DROP COLUMN "automatically_generated";\n                    ',
                    hints={"tables": ["sentry_repositoryprojectpathconfig"]},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="repositoryprojectpathconfig",
                    name="automatically_generated",
                    field=models.BooleanField(default=False),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="project",
            name="flags",
            field=bitfield.models.BitField(
                (
                    ("has_releases", "This Project has sent release data"),
                    ("has_issue_alerts_targeting", "This Project has issue alerts targeting"),
                    ("has_transactions", "This Project has sent transactions"),
                    ("has_alert_filters", "This Project has filters"),
                    ("has_sessions", "This Project has sessions"),
                    ("has_profiles", "This Project has sent profiles"),
                    ("has_replays", "This Project has sent replays"),
                    (
                        "spike_protection_error_currently_active",
                        "spike_protection_error_currently_active",
                    ),
                    (
                        "spike_protection_transaction_currently_active",
                        "spike_protection_transaction_currently_active",
                    ),
                    (
                        "spike_protection_attachment_currently_active",
                        "spike_protection_attachment_currently_active",
                    ),
                ),
                default=10,
                null=True,
            ),
        ),
        migrations.AlterField(
            model_name="organizationmember",
            name="flags",
            field=bitfield.models.BitField(
                (
                    ("sso:linked", "sso:linked"),
                    ("sso:invalid", "sso:invalid"),
                    ("member-limit:restricted", "member-limit:restricted"),
                    ("idp:provisioned", "idp:provisioned"),
                    ("idp:role-restricted", "idp:role-restricted"),
                ),
                default=0,
            ),
        ),
        migrations.CreateModel(
            name="OrganizationMapping",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                ("slug", models.SlugField(unique=True)),
                ("name", models.CharField(max_length=64)),
                ("date_created", models.DateTimeField(default=django.utils.timezone.now)),
                ("customer_id", models.CharField(db_index=True, max_length=255, null=True)),
                ("verified", models.BooleanField(default=False)),
                ("idempotency_key", models.CharField(max_length=48)),
                ("region_name", models.CharField(max_length=48)),
            ],
            options={
                "db_table": "sentry_organizationmapping",
            },
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_team" ADD COLUMN "idp_provisioned" BOOLEAN NOT NULL DEFAULT false;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_team" DROP COLUMN "idp_provisioned";\n                    ',
                    hints={"tables": ["sentry_team"]},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="team",
                    name="idp_provisioned",
                    field=models.BooleanField(default=False),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="project",
            name="flags",
            field=bitfield.models.BitField(
                (
                    ("has_releases", "This Project has sent release data"),
                    ("has_issue_alerts_targeting", "This Project has issue alerts targeting"),
                    ("has_transactions", "This Project has sent transactions"),
                    ("has_alert_filters", "This Project has filters"),
                    ("has_sessions", "This Project has sessions"),
                    ("has_profiles", "This Project has sent profiles"),
                    ("has_replays", "This Project has sent replays"),
                    (
                        "spike_protection_error_currently_active",
                        "spike_protection_error_currently_active",
                    ),
                    (
                        "spike_protection_transaction_currently_active",
                        "spike_protection_transaction_currently_active",
                    ),
                    (
                        "spike_protection_attachment_currently_active",
                        "spike_protection_attachment_currently_active",
                    ),
                    (
                        "has_minified_stack_trace",
                        "This Project has event with minified stack trace",
                    ),
                ),
                default=10,
                null=True,
            ),
        ),
        migrations.CreateModel(
            name="ControlTombstone",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("table_name", models.CharField(max_length=48)),
                ("object_identifier", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "db_table": "sentry_controltombstone",
            },
        ),
        migrations.CreateModel(
            name="RegionTombstone",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("table_name", models.CharField(max_length=48)),
                ("object_identifier", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "db_table": "sentry_regiontombstone",
            },
        ),
        migrations.CreateModel(
            name="RegionOutbox",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("shard_scope", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("shard_identifier", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("category", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("object_identifier", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("payload", sentry.db.models.fields.jsonfield.JSONField(null=True)),
                ("scheduled_from", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "scheduled_for",
                    models.DateTimeField(default=datetime.datetime(2016, 8, 1, 0, 0, tzinfo=utc)),
                ),
            ],
            options={
                "db_table": "sentry_regionoutbox",
                "index_together": {
                    ("shard_scope", "shard_identifier", "id"),
                    ("shard_scope", "shard_identifier", "scheduled_for"),
                    ("shard_scope", "shard_identifier", "category", "object_identifier"),
                },
            },
        ),
        migrations.CreateModel(
            name="ControlOutbox",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("shard_scope", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("shard_identifier", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("category", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ("object_identifier", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("payload", sentry.db.models.fields.jsonfield.JSONField(null=True)),
                ("scheduled_from", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "scheduled_for",
                    models.DateTimeField(default=datetime.datetime(2016, 8, 1, 0, 0, tzinfo=utc)),
                ),
                ("region_name", models.CharField(max_length=48)),
            ],
            options={
                "db_table": "sentry_controloutbox",
                "index_together": {
                    ("region_name", "shard_scope", "shard_identifier", "scheduled_for"),
                    (
                        "region_name",
                        "shard_scope",
                        "shard_identifier",
                        "category",
                        "object_identifier",
                    ),
                    ("region_name", "shard_scope", "shard_identifier", "id"),
                },
            },
        ),
        migrations.AlterField(
            model_name="organization",
            name="flags",
            field=bitfield.models.BitField(
                (
                    (
                        "allow_joinleave",
                        "Allow members to join and leave teams without requiring approval.",
                    ),
                    (
                        "enhanced_privacy",
                        "Enable enhanced privacy controls to limit personally identifiable information (PII) as well as source code in things like notifications.",
                    ),
                    (
                        "disable_shared_issues",
                        "Disable sharing of limited details on issues to anonymous users.",
                    ),
                    (
                        "early_adopter",
                        "Enable early adopter status, gaining access to features prior to public release.",
                    ),
                    (
                        "require_2fa",
                        "Require and enforce two-factor authentication for all members.",
                    ),
                    (
                        "disable_new_visibility_features",
                        "Temporarily opt out of new visibility features and ui",
                    ),
                    (
                        "require_email_verification",
                        "Require and enforce email verification for all members.",
                    ),
                    ("codecov_access", "Enable codecov integration."),
                ),
                default=1,
            ),
        ),
        migrations.AlterField(
            model_name="project",
            name="flags",
            field=bitfield.models.BitField(
                (
                    ("has_releases", "This Project has sent release data"),
                    ("has_issue_alerts_targeting", "This Project has issue alerts targeting"),
                    ("has_transactions", "This Project has sent transactions"),
                    ("has_alert_filters", "This Project has filters"),
                    ("has_sessions", "This Project has sessions"),
                    ("has_profiles", "This Project has sent profiles"),
                    ("has_replays", "This Project has sent replays"),
                    (
                        "spike_protection_error_currently_active",
                        "spike_protection_error_currently_active",
                    ),
                    (
                        "spike_protection_transaction_currently_active",
                        "spike_protection_transaction_currently_active",
                    ),
                    (
                        "spike_protection_attachment_currently_active",
                        "spike_protection_attachment_currently_active",
                    ),
                    (
                        "has_minified_stack_trace",
                        "This Project has event with minified stack trace",
                    ),
                    ("has_cron_monitors", "This Project has cron monitors"),
                    ("has_cron_checkins", "This Project has sent check-ins"),
                ),
                default=10,
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="team",
            name="org_role",
            field=models.CharField(max_length=32, null=True),
        ),
        migrations.CreateModel(
            name="RegionScheduledDeletion",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "guid",
                    models.CharField(
                        default=sentry.models.scheduledeletion.default_guid,
                        max_length=32,
                        unique=True,
                    ),
                ),
                ("app_label", models.CharField(max_length=64)),
                ("model_name", models.CharField(max_length=64)),
                ("object_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "date_scheduled",
                    models.DateTimeField(
                        default=sentry.models.scheduledeletion.default_date_schedule
                    ),
                ),
                ("actor_id", sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ("data", sentry.db.models.fields.jsonfield.JSONField(default={})),
                ("in_progress", models.BooleanField(default=False)),
            ],
            options={
                "db_table": "sentry_regionscheduleddeletion",
                "unique_together": {("app_label", "model_name", "object_id")},
            },
        ),
        migrations.AddField(
            model_name="monitorcheckin",
            name="attachment_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name="authenticator",
            name="config",
            field=sentry.models.authenticator.AuthenticatorConfig(editable=False),
        ),
        migrations.CreateModel(
            name="MonitorEnvironment",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("status", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ("next_checkin", models.DateTimeField(null=True)),
                ("last_checkin", models.DateTimeField(null=True)),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "environment",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Environment"
                    ),
                ),
                (
                    "monitor",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Monitor"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_monitorenvironment",
            },
        ),
        migrations.AddIndex(
            model_name="monitorenvironment",
            index=models.Index(
                fields=["monitor", "environment"], name="sentry_moni_monitor_3d7eb9_idx"
            ),
        ),
        migrations.CreateModel(
            name="ArtifactBundle",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                (
                    "bundle_id",
                    models.UUIDField(default="00000000-00000000-00000000-00000000", db_index=True),
                ),
                ("artifact_count", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                (
                    "date_added",
                    models.DateTimeField(default=django.utils.timezone.now, db_index=True),
                ),
                (
                    "date_uploaded",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "file",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.File"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_artifactbundle",
            },
        ),
        migrations.CreateModel(
            name="ReleaseArtifactBundle",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                ("release_name", models.CharField(max_length=250, db_index=True)),
                ("dist_name", models.CharField(max_length=64, default="")),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "artifact_bundle",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.ArtifactBundle"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_releaseartifactbundle",
                "unique_together": {
                    ("organization_id", "release_name", "dist_name", "artifact_bundle")
                },
            },
        ),
        migrations.CreateModel(
            name="ProjectArtifactBundle",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                (
                    "project_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "artifact_bundle",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.ArtifactBundle"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_projectartifactbundle",
                "unique_together": {("project_id", "artifact_bundle")},
            },
        ),
        migrations.CreateModel(
            name="DebugIdArtifactBundle",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                ("debug_id", models.UUIDField()),
                ("source_file_type", models.IntegerField()),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("date_last_accessed", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "artifact_bundle",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.ArtifactBundle"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_debugidartifactbundle",
                "unique_together": {("debug_id", "artifact_bundle", "source_file_type")},
            },
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name="environment",
                    name="project_id",
                ),
            ],
        ),
        migrations.AddField(
            model_name="monitorcheckin",
            name="monitor_environment",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="sentry.MonitorEnvironment",
            ),
        ),
        migrations.RemoveIndex(
            model_name="monitorenvironment",
            name="sentry_moni_monitor_3d7eb9_idx",
        ),
        migrations.AlterUniqueTogether(
            name="monitorenvironment",
            unique_together={("monitor", "environment")},
        ),
        migrations.AlterField(
            model_name="option",
            name="key",
            field=models.CharField(max_length=128, unique=True),
        ),
        migrations.AlterField(
            model_name="group",
            name="type",
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(
                db_index=True, default=1
            ),
        ),
        migrations.CreateModel(
            name="NotificationAction",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("type", models.SmallIntegerField()),
                ("target_type", models.SmallIntegerField()),
                ("target_identifier", models.TextField(null=True)),
                ("target_display", models.TextField(null=True)),
                (
                    "integration_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Integration",
                        blank=True,
                        db_index=True,
                        null=True,
                        on_delete="CASCADE",
                    ),
                ),
                (
                    "sentry_app_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.SentryApp",
                        blank=True,
                        db_index=True,
                        null=True,
                        on_delete="CASCADE",
                    ),
                ),
                ("trigger_type", models.SmallIntegerField()),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Organization"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_notificationaction",
            },
        ),
        migrations.CreateModel(
            name="NotificationActionProject",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "action",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.NotificationAction"
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.Project"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_notificationactionproject",
            },
        ),
        migrations.AddField(
            model_name="notificationaction",
            name="projects",
            field=models.ManyToManyField(
                through="sentry.NotificationActionProject", to="sentry.Project"
            ),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "auth_user" ADD COLUMN "avatar_type" smallint NOT NULL DEFAULT 0;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "auth_user" DROP COLUMN "avatar_type";\n                    ',
                    hints={"tables": ["auth_user"]},
                ),
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "auth_user" ADD COLUMN "avatar_url" varchar(120) DEFAULT NULL;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "auth_user" DROP COLUMN "avatar_url";\n                    ',
                    hints={"tables": ["auth_user"]},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="user",
                    name="avatar_type",
                    field=models.PositiveSmallIntegerField(default=0),
                ),
                migrations.AddField(
                    model_name="user",
                    name="avatar_url",
                    field=models.CharField(max_length=120, null=True),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_groupsnooze" ADD COLUMN "until_escalating" BOOLEAN NOT NULL DEFAULT false;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_groupsnooze" DROP COLUMN "until_escalating";\n                    ',
                    hints={"tables": ["sentry_groupsnooze"]},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="groupsnooze",
                    name="until_escalating",
                    field=models.BooleanField(default=False),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="debugidartifactbundle",
            name="date_last_accessed",
            field=models.DateTimeField(default=None, null=True),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name="debugidartifactbundle",
                    name="date_last_accessed",
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_debugidartifactbundle" DROP COLUMN "date_last_accessed";\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_debugidartifactbundle" ADD COLUMN "date_last_accessed" timestamp with time zone NULL;\n                    ',
                    hints={"tables": ["sentry_debugidartifactbundle"]},
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql="\n                    ALTER TABLE sentry_perfstringindexer ADD COLUMN use_case_id varchar(120) NOT NULL DEFAULT 'performance';\n                    ",
                    reverse_sql="\n                    ALTER TABLE sentry_perfstringindexer DROP COLUMN use_case_id;\n                    ",
                    hints={"tables": ["sentry_perfstringindexer"]},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="perfstringindexer",
                    name="use_case_id",
                    field=models.CharField(default="performance", max_length=120),
                ),
            ],
        ),
        migrations.AddField(
            model_name="actor",
            name="team",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                db_constraint=False,
                db_index=False,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="actor_from_team",
                to="sentry.Team",
            ),
        ),
        migrations.AddField(
            model_name="actor",
            name="user_id",
            field=sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                "sentry.User", db_index=False, null=True, on_delete="CASCADE"
            ),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterField(
                    model_name="team",
                    name="actor",
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="team_from_actor",
                        to="sentry.Actor",
                        unique=True,
                    ),
                ),
                migrations.AlterField(
                    model_name="alertrule",
                    name="owner",
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True, on_delete=django.db.models.deletion.SET_NULL, to="sentry.Actor"
                    ),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="actor",
            name="team",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="actor_from_team",
                to="sentry.Team",
            ),
        ),
        migrations.AlterField(
            model_name="actor",
            name="user_id",
            field=sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                "sentry.User", db_index=True, null=True, on_delete="CASCADE"
            ),
        ),
        migrations.AddConstraint(
            model_name="perfstringindexer",
            constraint=models.UniqueConstraint(
                fields=("string", "organization_id", "use_case_id"),
                name="perf_unique_org_string_usecase",
            ),
        ),
        migrations.RemoveConstraint(
            model_name="perfstringindexer",
            name="perf_unique_org_string",
        ),
        migrations.CreateModel(
            name="RuleSnooze",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", null=True, on_delete="CASCADE"
                    ),
                ),
                (
                    "owner_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", null=True, on_delete="SET_NULL"
                    ),
                ),
                ("until", models.DateTimeField(db_index=True, null=True)),
                (
                    "alert_rule",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.AlertRule",
                    ),
                ),
                (
                    "rule",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="sentry.Rule"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_rulesnooze",
            },
        ),
        migrations.AddConstraint(
            model_name="rulesnooze",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("alert_rule__isnull", True), ("rule__isnull", False)),
                    models.Q(("alert_rule__isnull", False), ("rule__isnull", True)),
                    _connector="OR",
                ),
                name="rule_or_alert_rule",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="rulesnooze",
            unique_together={("user_id", "alert_rule"), ("user_id", "rule")},
        ),
        migrations.CreateModel(
            name="OrganizationMemberMapping",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Organization", db_index=True, on_delete="CASCADE"
                    ),
                ),
                ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                ("role", models.CharField(default="member", max_length=32)),
                ("email", models.EmailField(blank=True, max_length=75, null=True)),
                ("invite_status", models.PositiveSmallIntegerField(default=0, null=True)),
                (
                    "inviter",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="inviter_orgmembermapping_set",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="orgmembermapping_set",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_organizationmembermapping",
                "unique_together": {("organization_id", "user"), ("organization_id", "email")},
            },
        ),
        migrations.AlterField(
            model_name="actor",
            name="team",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="actor_from_team",
                to="sentry.Team",
                unique=True,
            ),
        ),
        migrations.AlterField(
            model_name="actor",
            name="user_id",
            field=sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                "sentry.User", db_index=True, null=True, on_delete="CASCADE", unique=True
            ),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_rulesnooze" ADD COLUMN "date_added" timestamp NOT NULL;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_rulesnooze" DROP COLUMN "date_added";\n                    ',
                    hints={"tables": ["sentry_rulesnooze"]},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="rulesnooze",
                    name="date_added",
                    field=models.DateTimeField(default=django.utils.timezone.now),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="rulesnooze",
            constraint=models.UniqueConstraint(
                condition=models.Q(user_id__isnull=True), fields=("rule",), name="unique_rule_user"
            ),
        ),
        migrations.AddConstraint(
            model_name="rulesnooze",
            constraint=models.UniqueConstraint(
                condition=models.Q(user_id__isnull=True),
                fields=("alert_rule",),
                name="unique_alert_rule_user",
            ),
        ),
        migrations.AddField(
            model_name="group",
            name="substatus",
            field=sentry.db.models.fields.bounded.BoundedIntegerField(null=True),
        ),
        migrations.AlterIndexTogether(
            name="group",
            index_together={
                ("project", "first_release"),
                ("project", "id"),
                ("project", "status", "type", "last_seen", "id"),
                ("project", "status", "substatus", "type", "last_seen", "id"),
                ("project", "status", "last_seen", "id"),
                ("project", "status", "substatus", "last_seen", "id"),
            },
        ),
        migrations.AlterField(
            model_name="groupsnooze",
            name="until_escalating",
            field=models.BooleanField(default=False, null=True),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name="groupsnooze",
                    name="until_escalating",
                ),
            ],
        ),
        migrations.AddField(
            model_name="pagerdutyservice",
            name="integration_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
        ),
        migrations.AddField(
            model_name="pagerdutyservice",
            name="organization_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
        ),
        migrations.AddField(
            model_name="repositoryprojectpathconfig",
            name="integration_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
        ),
        migrations.AddField(
            model_name="repositoryprojectpathconfig",
            name="organization_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name="pagerdutyservice",
            name="organization_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True, null=True),
        ),
        migrations.AlterField(
            model_name="repositoryprojectpathconfig",
            name="organization_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True, null=True),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_groupsnooze" DROP COLUMN "until_escalating";\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_groupsnooze" ADD COLUMN "until_escalating" BOOLEAN DEFAULT false\n                    ',
                    hints={"tables": ["sentry_groupsnooze"]},
                ),
            ],
        ),
        migrations.RunSQL(
            sql='ALTER TABLE "sentry_actor" DROP CONSTRAINT IF EXISTS "sentry_actor_team_id_6ca8eba5_fk_sentry_team_id";',
            reverse_sql="",
            hints={"tables": ["sentry_actor"]},
        ),
        migrations.RunSQL(
            sql='ALTER TABLE "sentry_actor" DROP CONSTRAINT IF EXISTS "sentry_actor_team_id_6ca8eba5_uniq";',
            reverse_sql="",
            hints={"tables": ["sentry_actor"]},
        ),
        migrations.RunSQL(
            sql='DROP INDEX CONCURRENTLY IF EXISTS "sentry_actor_team_id_6ca8eba5";',
            reverse_sql="",
            hints={"tables": ["sentry_actor"]},
        ),
        migrations.RunSQL(
            sql='DROP INDEX CONCURRENTLY IF EXISTS "sentry_actor_team_id_6ca8eba5_uniq";',
            reverse_sql="",
            hints={"tables": ["sentry_actor"]},
        ),
        migrations.RunSQL(
            sql='CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "sentry_actor_team_id_6ca8eba5_uniq" ON "sentry_actor" ("team_id");',
            reverse_sql="",
            hints={"tables": ["sentry_actor"]},
        ),
        migrations.RunSQL(
            sql='ALTER TABLE "sentry_actor" ADD CONSTRAINT "sentry_actor_team_id_6ca8eba5_fk_sentry_team_id" FOREIGN KEY ("team_id") REFERENCES "sentry_team" ("id") DEFERRABLE INITIALLY DEFERRED NOT VALID;',
            reverse_sql="",
            hints={"tables": ["sentry_actor"]},
        ),
        migrations.RunSQL(
            sql='ALTER TABLE "sentry_actor" VALIDATE CONSTRAINT "sentry_actor_team_id_6ca8eba5_fk_sentry_team_id";',
            reverse_sql="",
            hints={"tables": ["sentry_actor"]},
        ),
        migrations.RunSQL(
            sql='ALTER TABLE "sentry_actor" DROP CONSTRAINT IF EXISTS "sentry_actor_user_id_c832ff63_uniq";',
            reverse_sql="",
            hints={"tables": ["sentry_actor"]},
        ),
        migrations.RunSQL(
            sql='DROP INDEX CONCURRENTLY IF EXISTS "sentry_actor_user_id_c832ff63";',
            reverse_sql="",
            hints={"tables": ["sentry_actor"]},
        ),
        migrations.RunSQL(
            sql='DROP INDEX CONCURRENTLY IF EXISTS "sentry_actor_user_id_c832ff63_uniq";',
            reverse_sql="",
            hints={"tables": ["sentry_actor"]},
        ),
        migrations.RunSQL(
            sql='CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "sentry_actor_user_id_c832ff63_uniq" ON "sentry_actor" ("user_id");',
            reverse_sql="",
            hints={"tables": ["sentry_actor"]},
        ),
        migrations.RunSQL(
            sql="SELECT 1",
            reverse_sql='\nALTER TABLE "sentry_actor" ADD CONSTRAINT "sentry_actor_team_id_6ca8eba5_uniq" UNIQUE USING INDEX "sentry_actor_team_id_6ca8eba5_uniq";\n            ',
            hints={"tables": ["sentry_actor"]},
        ),
        migrations.RunSQL(
            sql="SELECT 1",
            reverse_sql='\nALTER TABLE "sentry_actor" ADD CONSTRAINT "sentry_actor_user_id_c832ff63_uniq" UNIQUE USING INDEX "sentry_actor_user_id_c832ff63_uniq";\n            ',
            hints={"tables": ["sentry_actor"]},
        ),
        migrations.AlterField(
            model_name="pagerdutyservice",
            name="integration_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(),
        ),
        migrations.AlterField(
            model_name="pagerdutyservice",
            name="organization_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name="repositoryprojectpathconfig",
            name="integration_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(),
        ),
        migrations.AlterField(
            model_name="repositoryprojectpathconfig",
            name="organization_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
        ),
        migrations.AlterField(
            model_name="rule",
            name="owner",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, to="sentry.Actor"
            ),
        ),
        migrations.AddField(
            model_name="organizationmembermapping",
            name="organizationmember_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True, null=True),
        ),
        migrations.AlterUniqueTogether(
            name="organizationmembermapping",
            unique_together={
                ("organization_id", "user"),
                ("organization_id", "email"),
                ("organization_id", "organizationmember_id"),
            },
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_rule" ADD COLUMN "source" integer NOT NULL DEFAULT 0;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_rule" DROP COLUMN "source";\n                    ',
                    hints={"tables": ["sentry_rule"]},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="rule",
                    name="source",
                    field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0),
                ),
            ],
        ),
        migrations.RunSQL(
            sql="ALTER TABLE IF EXISTS sentry_notificationsetting DROP CONSTRAINT IF EXISTS sentry_notifications_target_id_f3923c98_fk_sentry_ac",
            reverse_sql="ALTER TABLE IF EXISTS sentry_notificationsetting ADD CONSTRAINT sentry_notifications_target_id_f3923c98_fk_sentry_ac FOREIGN KEY (target_id) REFERENCES sentry_actor (id) DEFERRABLE INITIALLY DEFERRED",
            hints={"tables": ["sentry_notificationsetting"]},
        ),
        migrations.CreateModel(
            name="ControlOption",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("key", models.CharField(max_length=128, unique=True)),
                ("last_updated", models.DateTimeField(default=django.utils.timezone.now)),
                ("value", sentry.db.models.fields.picklefield.PickledObjectField(editable=False)),
            ],
            options={
                "db_table": "sentry_controloption",
            },
        ),
        migrations.AlterField(
            model_name="perfstringindexer",
            name="use_case_id",
            field=models.CharField(max_length=120),
        ),
        migrations.AddConstraint(
            model_name="notificationsetting",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("team_id__isnull", False), ("user_id__isnull", True)),
                    models.Q(("team_id__isnull", True), ("user_id__isnull", False)),
                    _connector="OR",
                ),
                name="notification_team_or_user_check",
            ),
        ),
        migrations.AddField(
            model_name="monitorcheckin",
            name="expected_time",
            field=models.DateTimeField(null=True),
        ),
        migrations.AddField(
            model_name="monitorcheckin",
            name="monitor_config",
            field=sentry.db.models.fields.jsonfield.JSONField(null=True),
        ),
        migrations.AddField(
            model_name="organizationmapping",
            name="status",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name="monitorcheckin",
            name="date_added",
            field=models.DateTimeField(db_index=True, default=django.utils.timezone.now),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_option" ADD COLUMN "last_updated_by" VARCHAR(16) NOT NULL DEFAULT \'unknown\';\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_option" DROP COLUMN "last_updated_by";\n                    ',
                    hints={"tables": ["sentry_option"]},
                ),
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_controloption" ADD COLUMN "last_updated_by" VARCHAR(16) NOT NULL DEFAULT \'unknown\';\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_controloption" DROP COLUMN "last_updated_by";\n                    ',
                    hints={"tables": ["sentry_controloption"]},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="option",
                    name="last_updated_by",
                    field=models.CharField(default="unknown", max_length=16),
                ),
                migrations.AddField(
                    model_name="controloption",
                    name="last_updated_by",
                    field=models.CharField(default="unknown", max_length=16),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="commit",
            name="key",
            field=models.CharField(db_index=True, max_length=64),
        ),
        migrations.AlterField(
            model_name="pullrequest",
            name="date_added",
            field=models.DateTimeField(db_index=True, default=django.utils.timezone.now),
        ),
        migrations.AlterField(
            model_name="pullrequest",
            name="merge_commit_sha",
            field=models.CharField(db_index=True, max_length=64, null=True),
        ),
        migrations.CreateModel(
            name="ControlFile",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("name", models.TextField()),
                ("type", models.CharField(max_length=64)),
                (
                    "timestamp",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
                ("headers", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ("size", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ("checksum", models.CharField(db_index=True, max_length=40, null=True)),
            ],
            options={
                "db_table": "sentry_controlfile",
            },
        ),
        migrations.CreateModel(
            name="ControlFileBlob",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("path", models.TextField(null=True)),
                ("size", sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ("checksum", models.CharField(max_length=40, unique=True)),
                (
                    "timestamp",
                    models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                ),
            ],
            options={
                "db_table": "sentry_controlfileblob",
            },
        ),
        migrations.CreateModel(
            name="ControlFileBlobIndex",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("offset", sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                (
                    "blob",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, to="sentry.ControlFileBlob"
                    ),
                ),
                (
                    "file",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.ControlFile"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_controlfileblobindex",
                "unique_together": {("file", "blob", "offset")},
            },
        ),
        migrations.AddField(
            model_name="controlfile",
            name="blobs",
            field=models.ManyToManyField(
                through="sentry.ControlFileBlobIndex", to="sentry.ControlFileBlob"
            ),
        ),
        migrations.CreateModel(
            name="ControlFileBlobOwner",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                (
                    "organization_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                (
                    "blob",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.ControlFileBlob"
                    ),
                ),
            ],
            options={
                "db_table": "sentry_controlfileblobowner",
                "unique_together": {("blob", "organization_id")},
            },
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_organizationmember" ADD COLUMN "user_is_active" BOOLEAN NOT NULL DEFAULT TRUE;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_organizationmember" DROP COLUMN "user_is_active";\n                    ',
                    hints={"tables": ["sentry_organizationmember"]},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="organizationmember",
                    name="user_is_active",
                    field=models.BooleanField(default=True),
                ),
            ],
        ),
        migrations.AddField(
            model_name="dashboardwidget",
            name="description",
            field=models.CharField(max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name="organizationmapping",
            name="organization_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(
                db_index=True, unique=True
            ),
        ),
        migrations.AddField(
            model_name="docintegrationavatar",
            name="control_file_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True, unique=True),
        ),
        migrations.AddField(
            model_name="sentryappavatar",
            name="control_file_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True, unique=True),
        ),
        migrations.AddField(
            model_name="useravatar",
            name="control_file_id",
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True, unique=True),
        ),
        migrations.AddField(
            model_name="monitorcheckin",
            name="timeout_at",
            field=models.DateTimeField(null=True),
        ),
        migrations.AlterField(
            model_name="apiapplication",
            name="owner",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.CreateModel(
            name="PullRequestComment",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("external_id", sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ("created_at", models.DateTimeField()),
                ("updated_at", models.DateTimeField()),
                ("group_ids", sentry.db.models.fields.array.ArrayField(null=True)),
                (
                    "pull_request",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.PullRequest",
                        unique=True,
                    ),
                ),
            ],
            options={
                "db_table": "sentry_pullrequest_comment",
            },
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_organizationmember" ADD COLUMN "user_email" VARCHAR(75) NULL;\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_organizationmember" DROP COLUMN "user_email";\n                    ',
                    hints={"tables": ["sentry_organizationmember"]},
                ),
            ],
            state_operations=[
                migrations.AddField(
                    model_name="organizationmember",
                    name="user_email",
                    field=models.CharField(blank=True, max_length=75, null=True),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterField(
                    model_name="user",
                    name="id",
                    field=sentry.db.models.fields.bounded.BoundedAutoField(primary_key=True),
                ),
            ],
            database_operations=[],
        ),
    ]
