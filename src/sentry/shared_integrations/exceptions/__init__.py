from urllib.parse import urlparse

from requests.exceptions import RequestException

from .base import ApiError


class ApiHostError(ApiError):
    code = 503

    @classmethod
    def from_exception(cls, exception):
        if getattr(exception, "request"):
            return cls.from_request(exception.request)
        return cls("Unable to reach host")

    @classmethod
    def from_request(cls, request):
        host = urlparse(request.url).netloc
        return cls(f"Unable to reach host: {host}")


class ApiTimeoutError(ApiError):
    code = 504

    @classmethod
    def from_exception(cls, exception):
        if getattr(exception, "request"):
            return cls.from_request(exception.request)
        return cls("Timed out reaching host")

    @classmethod
    def from_request(cls, request):
        host = urlparse(request.url).netloc
        return cls(f"Timed out attempting to reach host: {host}")


class ApiUnauthorized(ApiError):
    code = 401


class ApiRateLimitedError(ApiError):
    code = 429


class UnsupportedResponseType(ApiError):
    @property
    def content_type(self):
        return self.text


class IntegrationError(Exception):
    pass


class IntegrationProviderError(Exception):
    """Nonfatal errors generated by an external provider"""

    pass


class DuplicateDisplayNameError(IntegrationError):
    pass


class IntegrationFormError(IntegrationError):
    def __init__(self, field_errors):
        super().__init__("Invalid integration action")
        self.field_errors = field_errors


class ClientError(RequestException):
    """4xx Error Occurred"""

    def __init__(self, status_code, url, response=None):
        http_error_msg = f"{status_code} Client Error: for url: {url}"
        super().__init__(http_error_msg, response=response)
