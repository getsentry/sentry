# Generated by Django 5.2.1 on 2025-06-10 16:25
import logging

from django.db import IntegrityError, migrations, router, transaction
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.db.migrations.state import StateApps

from sentry.new_migrations.migrations import CheckedMigration
from sentry.utils.query import RangeQuerySetWrapperWithProgressBar

logger = logging.getLogger(__name__)


def migrate_team_stars_to_user_stars(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor):
    TeamKeyTransaction = apps.get_model("sentry", "teamkeytransaction")
    InsightsStarredSegment = apps.get_model("insights", "insightsstarredsegment")
    OrganizationMemberTeam = apps.get_model("sentry", "Organizationmemberteam")

    queryset = TeamKeyTransaction.objects.select_related(
        "organization", "project_team", "project_team__team", "project_team__project"
    ).all()
    for team_starred_transaction in RangeQuerySetWrapperWithProgressBar(queryset):
        starred_transaction = team_starred_transaction

        segment_name: str = starred_transaction.transaction
        projectTeam = starred_transaction.project_team
        organization = starred_transaction.organization

        user_ids = OrganizationMemberTeam.objects.filter(team=projectTeam.team).values_list(
            "organizationmember__user_id", flat=True
        )

        segments_to_create = [
            InsightsStarredSegment(
                organization_id=organization.id,
                project_id=projectTeam.project_id,
                user_id=user_id,
                segment_name=segment_name,
            )
            for user_id in user_ids
            if user_id is not None
        ]
        with transaction.atomic(router.db_for_write(InsightsStarredSegment)):
            try:
                InsightsStarredSegment.objects.bulk_create(
                    segments_to_create,
                    ignore_conflicts=True,
                )
            except IntegrityError as e:
                logger.exception(
                    "Error bulk updating team",
                    extra={
                        "projectTeam.id": projectTeam.id,
                        "organization.id": organization.id,
                        "error": e,
                    },
                )


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production.
    # This should only be used for operations where it's safe to run the migration after your
    # code has deployed. So this should not be used for most operations that alter the schema
    # of a table.
    # Here are some things that make sense to mark as post deployment:
    # - Large data migrations. Typically we want these to be run manually so that they can be
    #   monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   run this outside deployments so that we don't block them. Note that while adding an index
    #   is a schema change, it's completely safe to run the operation after the code has deployed.
    # Once deployed, run these manually via: https://develop.sentry.dev/database-migrations/#migration-deployment

    is_post_deployment = True

    dependencies = [
        ("insights", "0001_squashed_0001_add_starred_transactions_model"),
    ]

    operations = [
        migrations.RunPython(
            migrate_team_stars_to_user_stars,
            migrations.RunPython.noop,
            hints={"tables": ["insights_starred_segments"]},
        ),
    ]
