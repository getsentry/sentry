# Generated by Django 5.1.7 on 2025-04-21 23:15


import logging

from django.db import migrations
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.db.migrations.state import StateApps

from sentry.constants import ObjectStatus
from sentry.new_migrations.migrations import CheckedMigration
from sentry.uptime.types import DATA_SOURCE_UPTIME_SUBSCRIPTION
from sentry.utils.query import RangeQuerySetWrapper

logger = logging.getLogger(__name__)


def backfill_uptime_enabled(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:
    ProjectUptimeSubscription = apps.get_model("uptime", "ProjectUptimeSubscription")
    Detector = apps.get_model("workflow_engine", "Detector")
    DataSource = apps.get_model("workflow_engine", "DataSource")

    monitors = ProjectUptimeSubscription.objects.filter().select_related("uptime_subscription")
    for monitor in RangeQuerySetWrapper(monitors):
        try:
            data_source = DataSource.objects.get(
                type=DATA_SOURCE_UPTIME_SUBSCRIPTION,
                source_id=str(monitor.uptime_subscription_id),
            )
            detector = Detector.objects.get(data_sources=data_source)
        except (DataSource.DoesNotExist, Detector.DoesNotExist):
            logger.warning(
                "Missing detector for uptime subscription",
                extra={"sub_id": monitor.uptime_subscription_id},
            )
            continue

        detector.enabled = monitor.status == ObjectStatus.ACTIVE
        detector.save()


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production.
    # This should only be used for operations where it's safe to run the migration after your
    # code has deployed. So this should not be used for most operations that alter the schema
    # of a table.
    # Here are some things that make sense to mark as post deployment:
    # - Large data migrations. Typically we want these to be run manually so that they can be
    #   monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   run this outside deployments so that we don't block them. Note that while adding an index
    #   is a schema change, it's completely safe to run the operation after the code has deployed.
    # Once deployed, run these manually via: https://develop.sentry.dev/database-migrations/#migration-deployment

    is_post_deployment = False

    dependencies = [
        ("uptime", "0034_uptime_backfill_uptime_status"),
        ("workflow_engine", "0045_add_unique_constraint_alert_rule_detector"),
    ]

    operations = [
        migrations.RunPython(
            code=backfill_uptime_enabled,
            reverse_code=migrations.RunPython.noop,
            hints={
                "tables": [
                    "uptime_projectuptimesubscription",
                    "uptime_uptimesubscription",
                    "workflow_engine_detector",
                ]
            },
        ),
    ]
