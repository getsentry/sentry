# Generated by Django 5.2.1 on 2025-09-17 17:50

from django.db import migrations
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.db.migrations.state import StateApps

from sentry.new_migrations.migrations import CheckedMigration
from sentry.utils.query import RangeQuerySetWrapperWithProgressBar

GROUP_TYPE_UPTIME_DOMAIN_CHECK_FAILURE = "uptime_domain_failure"
DEFAULT_RECOVERY_THRESHOLD = 1
DEFAULT_DOWNTIME_THRESHOLD = 3


def backfill_detector_thresholds(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:
    """
    Backfill recovery_threshold and downtime_threshold in uptime detector configs.

    This migration adds the new threshold fields to all existing uptime detectors
    so that the UptimeDetectorHandler can start using config values instead of
    global hardcoded options.
    """
    Detector = apps.get_model("workflow_engine", "Detector")

    # Query all uptime detectors
    uptime_detectors = Detector.objects.filter(
        type=GROUP_TYPE_UPTIME_DOMAIN_CHECK_FAILURE,
    )

    for detector in RangeQuerySetWrapperWithProgressBar(uptime_detectors):
        # Only update detectors that don't already have threshold values
        config = detector.config or {}
        needs_update = False

        if "recovery_threshold" not in config:
            config["recovery_threshold"] = DEFAULT_RECOVERY_THRESHOLD
            needs_update = True

        if "downtime_threshold" not in config:
            config["downtime_threshold"] = DEFAULT_DOWNTIME_THRESHOLD
            needs_update = True

        if needs_update:
            detector.config = config
            detector.save(update_fields=["config"])


class Migration(CheckedMigration):
    # This is a data migration that can take a while on large deployments
    # and should be run manually after code deployment
    is_post_deployment = True

    dependencies = [
        ("uptime", "0044_remove_project_uptime_subscription"),
        ("workflow_engine", "0085_crons_link_detectors_to_all_workflows"),
    ]

    operations = [
        migrations.RunPython(
            backfill_detector_thresholds,
            migrations.RunPython.noop,
            hints={"tables": ["workflow_engine_detector"]},
        )
    ]
