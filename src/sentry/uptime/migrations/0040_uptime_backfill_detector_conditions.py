# Generated by Django 5.1.7 on 2025-05-07 20:12

from django.db import migrations, router
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.db.migrations.state import StateApps

from sentry.new_migrations.migrations import CheckedMigration
from sentry.utils.db import atomic_transaction
from sentry.utils.query import RangeQuerySetWrapperWithProgressBar


def create_missing_data_conditions(
    apps: StateApps,
    schema_editor: BaseDatabaseSchemaEditor,
) -> None:
    Detector = apps.get_model("workflow_engine", "Detector")
    DataCondition = apps.get_model("workflow_engine", "DataCondition")
    DataConditionGroup = apps.get_model("workflow_engine", "DataConditionGroup")

    detectors_missing_conditions = Detector.objects.filter(
        type="uptime_domain_failure", workflow_condition_group=None
    )

    for detector in RangeQuerySetWrapperWithProgressBar(detectors_missing_conditions):
        with atomic_transaction(
            using=(
                router.db_for_write(Detector),
                router.db_for_write(DataCondition),
                router.db_for_write(DataConditionGroup),
            )
        ):
            condition_group = DataConditionGroup.objects.create(
                organization=detector.project.organization,
            )
            DataCondition.objects.create(
                comparison="failure",  # CHECKSTATUS_FAILURE
                type="eq",  # Condition.EQ
                condition_result=75,  # DetectorPriorityLevel.HIGH
                condition_group=condition_group,
            )
            DataCondition.objects.create(
                comparison="success",  # CHECKSTATUS_SUCCESS
                type="eq",  # Condition.EQ
                condition_result=0,  # DetectorPriorityLevel.OK
                condition_group=condition_group,
            )
            detector.workflow_condition_group = condition_group
            detector.save()


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production.
    # This should only be used for operations where it's safe to run the migration after your
    # code has deployed. So this should not be used for most operations that alter the schema
    # of a table.
    # Here are some things that make sense to mark as post deployment:
    # - Large data migrations. Typically we want these to be run manually so that they can be
    #   monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   run this outside deployments so that we don't block them. Note that while adding an index
    #   is a schema change, it's completely safe to run the operation after the code has deployed.
    # Once deployed, run these manually via: https://develop.sentry.dev/database-migrations/#migration-deployment

    is_post_deployment = True

    dependencies = [
        ("uptime", "0039_uptime_drop_project_subscription_uptime_status_db"),
        ("workflow_engine", "0056_workflow_fire_history_passed_filters_column"),
    ]

    operations = [
        migrations.RunPython(
            create_missing_data_conditions,
            migrations.RunPython.noop,
            hints={
                "tables": [
                    "workflow_engine_detector",
                    "workflow_engine_datacondition",
                    "workflow_engine_dataconditiongroup",
                ]
            },
        ),
    ]
