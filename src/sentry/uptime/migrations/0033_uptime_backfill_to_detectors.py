# Generated by Django 5.1.7 on 2025-04-17 20:20

from django.db import migrations, router
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.db.migrations.state import StateApps

from sentry.new_migrations.migrations import CheckedMigration
from sentry.utils.db import atomic_transaction
from sentry.utils.query import RangeQuerySetWrapperWithProgressBar

DATA_SOURCE_UPTIME_SUBSCRIPTION = "uptime_subscription"


def backfill_uptime_to_detectors(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:
    ProjectUptimeSubscription = apps.get_model("uptime", "ProjectUptimeSubscription")
    Detector = apps.get_model("workflow_engine", "Detector")
    DataSource = apps.get_model("workflow_engine", "DataSource")
    DataSourceDetector = apps.get_model("workflow_engine", "DataSourceDetector")

    def has_detector(uptime_subscription_id: int) -> bool:
        try:
            data_source = DataSource.objects.get(
                type=DATA_SOURCE_UPTIME_SUBSCRIPTION,
                source_id=str(uptime_subscription_id),
            )
            return Detector.objects.filter(data_sources=data_source).exists()
        except DataSource.DoesNotExist:
            return False

    monitors = ProjectUptimeSubscription.objects.all().select_related("project", "environment")

    for monitor in RangeQuerySetWrapperWithProgressBar(monitors):
        if has_detector(monitor.uptime_subscription_id):
            continue

        with atomic_transaction(
            using=(
                router.db_for_write(Detector),
                router.db_for_write(DataSource),
                router.db_for_write(DataSourceDetector),
            )
        ):
            data_source = DataSource.objects.create(
                type=DATA_SOURCE_UPTIME_SUBSCRIPTION,
                organization_id=monitor.project.organization_id,
                source_id=str(monitor.uptime_subscription_id),
            )
            env = monitor.environment.name if monitor.environment else None
            detector = Detector.objects.create(
                type="uptime_domain_failure",
                project=monitor.project,
                name=monitor.name,
                owner_user_id=monitor.owner_user_id,
                owner_team_id=monitor.owner_team_id,
                config={
                    "environment": env,
                    "mode": monitor.mode,
                },
            )
            DataSourceDetector.objects.create(data_source=data_source, detector=detector)


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production.
    # This should only be used for operations where it's safe to run the migration after your
    # code has deployed. So this should not be used for most operations that alter the schema
    # of a table.
    # Here are some things that make sense to mark as post deployment:
    # - Large data migrations. Typically we want these to be run manually so that they can be
    #   monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   run this outside deployments so that we don't block them. Note that while adding an index
    #   is a schema change, it's completely safe to run the operation after the code has deployed.
    # Once deployed, run these manually via: https://develop.sentry.dev/database-migrations/#migration-deployment

    is_post_deployment = True

    dependencies = [
        ("uptime", "0032_stats_on_subscription"),
    ]

    operations = [
        migrations.RunPython(
            code=backfill_uptime_to_detectors,
            reverse_code=migrations.RunPython.noop,
            hints={
                "tables": [
                    "uptime_projectuptimesubscription",
                    "workflow_engine_detector",
                    "workflow_engine_datasource",
                    "workflow_engine_datasourcedetector",
                ]
            },
        ),
    ]
