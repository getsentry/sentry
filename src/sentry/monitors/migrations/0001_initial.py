# Generated by Django 5.1.7 on 2025-04-03 17:01

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models

import sentry.db.models.fields.bounded
import sentry.db.models.fields.foreignkey
import sentry.db.models.fields.hybrid_cloud_foreign_key
import sentry.db.models.fields.jsonfield
import sentry.db.models.fields.slug
import sentry.db.models.fields.uuid
import sentry.monitors.models
from sentry.new_migrations.migrations import CheckedMigration


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production.
    # This should only be used for operations where it's safe to run the migration after your
    # code has deployed. So this should not be used for most operations that alter the schema
    # of a table.
    # Here are some things that make sense to mark as post deployment:
    # - Large data migrations. Typically we want these to be run manually so that they can be
    #   monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   run this outside deployments so that we don't block them. Note that while adding an index
    #   is a schema change, it's completely safe to run the operation after the code has deployed.
    # Once deployed, run these manually via: https://develop.sentry.dev/database-migrations/#migration-deployment

    is_post_deployment = False

    initial = True

    dependencies = []

    operations = [
        migrations.SeparateDatabaseAndState(
            database_operations=[],
            state_operations=[
                migrations.CreateModel(
                    name="Monitor",
                    fields=[
                        (
                            "id",
                            sentry.db.models.fields.bounded.BoundedBigAutoField(
                                primary_key=True, serialize=False
                            ),
                        ),
                        ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                        (
                            "organization_id",
                            sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                        ),
                        (
                            "project_id",
                            sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                        ),
                        (
                            "status",
                            sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0),
                        ),
                        (
                            "guid",
                            sentry.db.models.fields.uuid.UUIDField(
                                editable=False, max_length=32, unique=True
                            ),
                        ),
                        ("slug", sentry.db.models.fields.slug.SentrySlugField()),
                        ("is_muted", models.BooleanField(default=False)),
                        ("name", models.CharField(max_length=128)),
                        (
                            "owner_user_id",
                            sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                                "sentry.User", db_index=True, null=True, on_delete="SET_NULL"
                            ),
                        ),
                        (
                            "owner_team_id",
                            sentry.db.models.fields.bounded.BoundedBigIntegerField(
                                db_index=True, null=True
                            ),
                        ),
                        ("config", sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                    ],
                    options={
                        "db_table": "sentry_monitor",
                        "indexes": [
                            models.Index(
                                fields=["organization_id", "slug"],
                                name="sentry_moni_organiz_a62466_idx",
                            )
                        ],
                        "constraints": [
                            models.CheckConstraint(
                                condition=models.Q(
                                    models.Q(
                                        ("owner_team_id__isnull", False),
                                        ("owner_user_id__isnull", True),
                                    ),
                                    models.Q(
                                        ("owner_team_id__isnull", True),
                                        ("owner_user_id__isnull", False),
                                    ),
                                    models.Q(
                                        ("owner_team_id__isnull", True),
                                        ("owner_user_id__isnull", True),
                                    ),
                                    _connector="OR",
                                ),
                                name="monitor_owner_team_or_user_check",
                            )
                        ],
                        "unique_together": {("project_id", "slug")},
                    },
                ),
                migrations.CreateModel(
                    name="MonitorEnvironment",
                    fields=[
                        (
                            "id",
                            sentry.db.models.fields.bounded.BoundedBigAutoField(
                                primary_key=True, serialize=False
                            ),
                        ),
                        (
                            "environment_id",
                            sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                        ),
                        ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                        (
                            "status",
                            sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0),
                        ),
                        ("is_muted", models.BooleanField(default=False)),
                        ("next_checkin", models.DateTimeField(null=True)),
                        ("next_checkin_latest", models.DateTimeField(null=True)),
                        ("last_checkin", models.DateTimeField(null=True)),
                        (
                            "monitor",
                            sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                                on_delete=django.db.models.deletion.CASCADE, to="monitors.monitor"
                            ),
                        ),
                    ],
                    options={
                        "db_table": "sentry_monitorenvironment",
                    },
                ),
                migrations.CreateModel(
                    name="MonitorCheckIn",
                    fields=[
                        (
                            "id",
                            sentry.db.models.fields.bounded.BoundedBigAutoField(
                                primary_key=True, serialize=False
                            ),
                        ),
                        (
                            "guid",
                            sentry.db.models.fields.uuid.UUIDField(
                                editable=False, max_length=32, unique=True
                            ),
                        ),
                        (
                            "project_id",
                            sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                        ),
                        (
                            "status",
                            sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0),
                        ),
                        (
                            "duration",
                            sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
                        ),
                        (
                            "date_added",
                            models.DateTimeField(db_index=True, default=django.utils.timezone.now),
                        ),
                        ("date_clock", models.DateTimeField(null=True)),
                        (
                            "date_created",
                            models.DateTimeField(default=django.utils.timezone.now, null=True),
                        ),
                        ("date_updated", models.DateTimeField(default=django.utils.timezone.now)),
                        ("expected_time", models.DateTimeField(null=True)),
                        ("timeout_at", models.DateTimeField(null=True)),
                        ("monitor_config", sentry.db.models.fields.jsonfield.JSONField(null=True)),
                        (
                            "trace_id",
                            sentry.db.models.fields.uuid.UUIDField(max_length=32, null=True),
                        ),
                        (
                            "monitor",
                            sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                                db_index=False,
                                on_delete=django.db.models.deletion.CASCADE,
                                to="monitors.monitor",
                            ),
                        ),
                        (
                            "monitor_environment",
                            sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                                db_index=False,
                                on_delete=django.db.models.deletion.CASCADE,
                                to="monitors.monitorenvironment",
                            ),
                        ),
                    ],
                    options={
                        "db_table": "sentry_monitorcheckin",
                    },
                ),
                migrations.CreateModel(
                    name="MonitorIncident",
                    fields=[
                        (
                            "id",
                            sentry.db.models.fields.bounded.BoundedBigAutoField(
                                primary_key=True, serialize=False
                            ),
                        ),
                        ("starting_timestamp", models.DateTimeField(null=True)),
                        ("resolving_timestamp", models.DateTimeField(null=True)),
                        (
                            "grouphash",
                            models.CharField(
                                default=sentry.monitors.models.default_grouphash, max_length=32
                            ),
                        ),
                        ("date_added", models.DateTimeField(default=django.utils.timezone.now)),
                        (
                            "monitor",
                            sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                                on_delete=django.db.models.deletion.CASCADE, to="monitors.monitor"
                            ),
                        ),
                        (
                            "monitor_environment",
                            sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                to="monitors.monitorenvironment",
                            ),
                        ),
                        (
                            "resolving_checkin",
                            sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                                null=True,
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="resolved_incidents",
                                to="monitors.monitorcheckin",
                            ),
                        ),
                        (
                            "starting_checkin",
                            sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                                null=True,
                                on_delete=django.db.models.deletion.CASCADE,
                                related_name="created_incidents",
                                to="monitors.monitorcheckin",
                            ),
                        ),
                    ],
                    options={
                        "db_table": "sentry_monitorincident",
                    },
                ),
                migrations.CreateModel(
                    name="MonitorEnvBrokenDetection",
                    fields=[
                        (
                            "id",
                            sentry.db.models.fields.bounded.BoundedBigAutoField(
                                primary_key=True, serialize=False
                            ),
                        ),
                        ("detection_timestamp", models.DateTimeField(auto_now_add=True)),
                        ("user_notified_timestamp", models.DateTimeField(db_index=True, null=True)),
                        ("env_muted_timestamp", models.DateTimeField(db_index=True, null=True)),
                        (
                            "monitor_incident",
                            sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                                on_delete=django.db.models.deletion.CASCADE,
                                to="monitors.monitorincident",
                            ),
                        ),
                    ],
                    options={
                        "db_table": "sentry_monitorenvbrokendetection",
                    },
                ),
                migrations.AddIndex(
                    model_name="monitorenvironment",
                    index=models.Index(
                        fields=["status", "next_checkin_latest"],
                        name="sentry_moni_status_9f06fe_idx",
                    ),
                ),
                migrations.AlterUniqueTogether(
                    name="monitorenvironment",
                    unique_together={("monitor", "environment_id")},
                ),
                migrations.AddIndex(
                    model_name="monitorcheckin",
                    index=models.Index(
                        fields=["monitor", "date_added", "status"],
                        name="sentry_moni_monitor_0a49ce_idx",
                    ),
                ),
                migrations.AddIndex(
                    model_name="monitorcheckin",
                    index=models.Index(
                        condition=models.Q(("status", 3)),
                        fields=["monitor", "-date_added"],
                        name="api_latest",
                    ),
                ),
                migrations.AddIndex(
                    model_name="monitorcheckin",
                    index=models.Index(
                        fields=["monitor", "status", "date_added"],
                        name="sentry_moni_monitor_7ed5ce_idx",
                    ),
                ),
                migrations.AddIndex(
                    model_name="monitorcheckin",
                    index=models.Index(
                        fields=["monitor_environment", "date_added", "status"],
                        name="sentry_moni_monitor_1fb26c_idx",
                    ),
                ),
                migrations.AddIndex(
                    model_name="monitorcheckin",
                    index=models.Index(
                        condition=models.Q(("status", 3)),
                        fields=["monitor_environment", "-date_added"],
                        name="consumer_latest",
                    ),
                ),
                migrations.AddIndex(
                    model_name="monitorcheckin",
                    index=models.Index(
                        fields=["monitor_environment", "status", "date_added"],
                        name="sentry_moni_monitor_d75fdf_idx",
                    ),
                ),
                migrations.AddIndex(
                    model_name="monitorcheckin",
                    index=models.Index(
                        fields=["status", "timeout_at"], name="sentry_moni_status_fe7282_idx"
                    ),
                ),
                migrations.AddIndex(
                    model_name="monitorcheckin",
                    index=models.Index(
                        condition=models.Q(("status", 3)),
                        fields=["-date_added"],
                        include=("id", "monitor_environment_id"),
                        name="sentry_monitorcheckin_unknown",
                    ),
                ),
                migrations.AddIndex(
                    model_name="monitorincident",
                    index=models.Index(
                        fields=["monitor_environment", "resolving_checkin"],
                        name="sentry_moni_monitor_a24312_idx",
                    ),
                ),
                migrations.AddIndex(
                    model_name="monitorincident",
                    index=models.Index(
                        condition=models.Q(("resolving_checkin__isnull", True)),
                        fields=["starting_timestamp"],
                        name="active_incident_idx",
                    ),
                ),
                migrations.AddConstraint(
                    model_name="monitorincident",
                    constraint=models.UniqueConstraint(
                        condition=models.Q(("resolving_checkin__isnull", True)),
                        fields=("monitor_environment_id",),
                        name="unique_active_incident",
                    ),
                ),
            ],
        )
    ]
