# Generated by Django 5.2.1 on 2025-08-15 23:18

from django.db import migrations, router, transaction
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.db.migrations.state import StateApps

from sentry.new_migrations.migrations import CheckedMigration
from sentry.utils.query import RangeQuerySetWrapperWithProgressBar

DATA_SOURCE_CRON_MONITOR = "cron_monitor"


def backfill_monitor_detectors(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:
    Monitor = apps.get_model("monitors", "Monitor")
    DataSource = apps.get_model("workflow_engine", "DataSource")
    Detector = apps.get_model("workflow_engine", "Detector")
    DataSourceDetector = apps.get_model("workflow_engine", "DataSourceDetector")
    Project = apps.get_model("sentry", "Project")
    Team = apps.get_model("sentry", "Team")
    for monitor in RangeQuerySetWrapperWithProgressBar(Monitor.objects.all()):
        if (
            monitor.status not in (0, 1)
            or not Project.objects.filter(id=monitor.project_id).exists()
            or (
                monitor.owner_team_id is not None
                and not Team.objects.filter(id=monitor.owner_team_id).exists()
            )
        ):
            continue

        # Copied from `ensure_cron_detector`
        with transaction.atomic(router.db_for_write(DataSource)):
            data_source, created = DataSource.objects.get_or_create(
                type=DATA_SOURCE_CRON_MONITOR,
                organization_id=monitor.organization_id,
                source_id=str(monitor.id),
            )
            if created:
                detector = Detector.objects.create(
                    # MonitorIncidentType.slug
                    type="monitor_check_in_failure",
                    project_id=monitor.project_id,
                    name=monitor.name,
                    owner_user_id=monitor.owner_user_id,
                    owner_team_id=monitor.owner_team_id,
                )
                DataSourceDetector.objects.create(data_source=data_source, detector=detector)


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production.
    # This should only be used for operations where it's safe to run the migration after your
    # code has deployed. So this should not be used for most operations that alter the schema
    # of a table.
    # Here are some things that make sense to mark as post deployment:
    # - Large data migrations. Typically we want these to be run manually so that they can be
    #   monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   run this outside deployments so that we don't block them. Note that while adding an index
    #   is a schema change, it's completely safe to run the operation after the code has deployed.
    # Once deployed, run these manually via: https://develop.sentry.dev/database-migrations/#migration-deployment

    is_post_deployment = True

    dependencies = [
        ("monitors", "0008_fix_processing_error_keys"),
    ]

    operations = [
        migrations.RunPython(
            backfill_monitor_detectors,
            migrations.RunPython.noop,
            hints={"tables": ["sentry_monitor"]},
        )
    ]
