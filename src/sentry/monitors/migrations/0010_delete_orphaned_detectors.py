# Generated by Django 5.2.1 on 2025-09-12 18:57

from django.db import migrations
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.db.migrations.state import StateApps

from sentry.new_migrations.migrations import CheckedMigration


def delete_orphaned_cron_detectors(
    apps: StateApps, schema_editor: BaseDatabaseSchemaEditor
) -> None:
    Monitor = apps.get_model("monitors", "Monitor")
    Detector = apps.get_model("workflow_engine", "Detector")
    DataSource = apps.get_model("workflow_engine", "DataSource")

    # The largest region has only 100k of these, so we should be fine bringing them into memory
    for data_source in DataSource.objects.filter(type="cron_monitor"):
        if Monitor.objects.filter(id=int(data_source.source_id)).exists():
            continue
        for detector in Detector.objects.filter(data_sources=data_source):
            detector.delete()
        data_source.delete()


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production.
    # This should only be used for operations where it's safe to run the migration after your
    # code has deployed. So this should not be used for most operations that alter the schema
    # of a table.
    # Here are some things that make sense to mark as post deployment:
    # - Large data migrations. Typically we want these to be run manually so that they can be
    #   monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   run this outside deployments so that we don't block them. Note that while adding an index
    #   is a schema change, it's completely safe to run the operation after the code has deployed.
    # Once deployed, run these manually via: https://develop.sentry.dev/database-migrations/#migration-deployment

    is_post_deployment = True

    dependencies = [
        ("monitors", "0009_backfill_monitor_detectors"),
        ("workflow_engine", "0085_crons_link_detectors_to_all_workflows"),
    ]

    operations = [
        migrations.RunPython(
            delete_orphaned_cron_detectors,
            migrations.RunPython.noop,
            hints={"tables": ["workflow_engine_detectorworkflow"]},
        ),
    ]
