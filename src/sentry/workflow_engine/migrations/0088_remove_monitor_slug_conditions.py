# Generated by Django 5.2.1
import logging

from django.db import migrations
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.db.migrations.state import StateApps

from sentry.new_migrations.migrations import CheckedMigration

logger = logging.getLogger(__name__)


def remove_monitor_slug_conditions(
    apps: StateApps, schema_editor: BaseDatabaseSchemaEditor
) -> None:
    """
    Remove monitor.slug conditions from DataCondition table.

    These are tagged_event conditions with comparison like {"key":"monitor.slug","match":"eq","value":"..."}
    that were used to filter events by monitor but are no longer needed after deduplication.
    """
    DataCondition = apps.get_model("workflow_engine", "DataCondition")

    tagged_event_conditions = DataCondition.objects.filter(type="tagged_event")

    deleted_count = 0
    for condition in tagged_event_conditions:
        comparison = condition.comparison
        if isinstance(comparison, dict) and comparison.get("key") == "monitor.slug":
            condition.delete()
            deleted_count += 1

    if deleted_count > 0:
        logger.info(
            "Removed monitor.slug tagged_event conditions",
            extra={
                "deleted_count": deleted_count,
            },
        )


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production.
    # This should only be used for operations where it's safe to run the migration after your
    # code has deployed. So this should not be used for most operations that alter the schema
    # of a table.
    # Here are some things that make sense to mark as post deployment:
    # - Large data migrations. Typically we want these to be run manually so that they can be
    #   monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   run this outside deployments so that we don't block them. Note that while adding an index
    #   is a schema change, it's completely safe to run the operation after the code has deployed.
    # Once deployed, run these manually via: https://develop.sentry.dev/database-migrations/#migration-deployment

    is_post_deployment = True

    dependencies = [
        ("workflow_engine", "0087_relink_crons_to_compatible_issue_workflows"),
    ]

    operations = [
        migrations.RunPython(
            remove_monitor_slug_conditions,
            migrations.RunPython.noop,
            hints={"tables": ["workflow_engine_datacondition"]},
        ),
    ]
