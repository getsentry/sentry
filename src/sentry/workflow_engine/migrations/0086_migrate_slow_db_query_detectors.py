# Generated by Django 5.2.1 on 2025-09-03 21:00

import logging
from typing import Any

import sentry_sdk
from django.apps.registry import Apps
from django.db import migrations, router, transaction
from django.db.backends.base.schema import BaseDatabaseSchemaEditor

from sentry.new_migrations.migrations import CheckedMigration
from sentry.utils.query import RangeQuerySetWrapper

logger = logging.getLogger(__name__)


def migrate_slow_db_query_detectors(apps: Apps, schema_editor: BaseDatabaseSchemaEditor) -> None:
    """
    Create new Detector instances for slow DB query detection to replace PerformanceDetector usage.
    This copies over project options and configuration from the existing performance detector settings.
    """
    Project = apps.get_model("sentry", "Project")
    Detector = apps.get_model("workflow_engine", "Detector")
    DataConditionGroup = apps.get_model("workflow_engine", "DataConditionGroup")

    # Get all projects that don't already have a slow DB query detector
    projects_with_slow_db_detection = Project.objects.filter().exclude(
        id__in=Detector.objects.filter(type="span", name="Slow DB Query Detection").values_list(
            "project_id", flat=True
        )
    )

    migrated_count = 0
    error_count = 0

    for project in RangeQuerySetWrapper(projects_with_slow_db_detection):
        try:
            with transaction.atomic(router.db_for_write(Project)):
                # Get existing settings for this project
                slow_db_settings = _get_slow_db_settings(apps, project)

                # Create data condition group for the detector
                data_condition_group = DataConditionGroup.objects.create(
                    organization_id=project.organization_id,
                )

                # Create the new detector
                # Note: Performance detectors like slow DB queries are not user-editable
                # (similar to error detectors), only system-generated based on project settings
                from sentry.issues.grouptype import PerformanceSlowDBQueryGroupType

                detector = Detector.objects.create(
                    project_id=project.id,
                    enabled=slow_db_settings.get("detection_enabled", True),
                    name="Slow DB Query Detection",
                    type=PerformanceSlowDBQueryGroupType.slug,  # Use the GroupType slug reference
                    workflow_condition_group=data_condition_group,
                    config={
                        "duration_threshold": slow_db_settings.get("duration_threshold", 1000),
                        "allowed_span_ops": slow_db_settings.get("allowed_span_ops", ["db"]),
                    },
                    description="Detects slow database queries exceeding duration threshold",
                )

                migrated_count += 1
                logger.info(
                    "Successfully migrated slow DB query detector",
                    extra={
                        "project_id": project.id,
                        "detector_id": detector.id,
                        "settings": slow_db_settings,
                    },
                )

        except Exception as e:
            error_count += 1
            logger.exception(
                "Error migrating slow DB query detector",
                extra={
                    "project_id": project.id,
                },
            )
            sentry_sdk.capture_exception(e)

    logger.info(
        "Completed slow DB query detector migration",
        extra={
            "migrated_count": migrated_count,
            "error_count": error_count,
        },
    )


def _get_slow_db_settings(apps: Apps, project: Any) -> dict[str, Any]:
    """
    Extract slow DB query settings from project options.
    """
    ProjectOption = apps.get_model("sentry", "ProjectOption")

    settings = {}

    # Default settings from the original detector
    default_settings = {
        "detection_enabled": True,
        "duration_threshold": 1000,  # 1 second in milliseconds
        "allowed_span_ops": ["db"],
    }

    # Try to get project-specific settings
    try:
        # Check for the main detection enabled flag
        detection_enabled_option = ProjectOption.objects.filter(
            project=project, key="performance.issues.slow_db_query.detection_enabled"
        ).first()

        if detection_enabled_option:
            settings["detection_enabled"] = detection_enabled_option.value

        # Check for duration threshold setting
        duration_threshold_option = ProjectOption.objects.filter(
            project=project, key="performance.issues.slow_db_query.duration_threshold"
        ).first()

        if duration_threshold_option:
            settings["duration_threshold"] = duration_threshold_option.value

        # Check for allowed span ops setting
        span_ops_option = ProjectOption.objects.filter(
            project=project, key="performance.issues.slow_db_query.allowed_span_ops"
        ).first()

        if span_ops_option:
            settings["allowed_span_ops"] = span_ops_option.value

    except Exception as e:
        logger.warning(
            "Error getting slow DB settings for project, using defaults",
            extra={
                "project_id": project.id,
                "error": str(e),
            },
        )

    # Merge with defaults
    final_settings = {**default_settings, **settings}

    return final_settings


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production.
    # This should only be used for operations where it's safe to run the migration after your
    # code has deployed. Large data migrations like this should be run manually so they can be
    # monitored and not block deployments.
    is_post_deployment = True

    dependencies = [
        ("workflow_engine", "0085_crons_link_detectors_to_all_workflows"),
    ]

    operations = [
        migrations.RunPython(
            migrate_slow_db_query_detectors,
            migrations.RunPython.noop,
            hints={"tables": ["sentry_project", "workflow_engine_detector"]},
        )
    ]
