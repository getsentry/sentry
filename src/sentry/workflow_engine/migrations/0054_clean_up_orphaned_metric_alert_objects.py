# Generated by Django 5.1.7 on 2025-05-01 20:38

import logging

from django.db import migrations
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.db.migrations.state import StateApps
from django.db.models import Exists, OuterRef

from sentry.new_migrations.migrations import CheckedMigration

logger = logging.getLogger(__name__)


def delete_orphaned_migrated_metric_alert_objects(
    apps: StateApps, schema_editor: BaseDatabaseSchemaEditor
) -> None:
    Action = apps.get_model("workflow_engine", "Action")
    DataConditionGroup = apps.get_model("workflow_engine", "DataConditionGroup")
    DataConditionGroupAction = apps.get_model("workflow_engine", "DataConditionGroupAction")
    Detector = apps.get_model("workflow_engine", "Detector")
    Workflow = apps.get_model("workflow_engine", "Workflow")
    WorkflowDataConditionGroup = apps.get_model("workflow_engine", "WorkflowDataConditionGroup")

    orphaned_dcgs = (
        DataConditionGroup.objects.filter(
            ~Exists(Detector.objects.filter(workflow_condition_group_id=OuterRef("id")))
        )
        .filter(
            ~Exists(WorkflowDataConditionGroup.objects.filter(condition_group_id=OuterRef("id")))
        )
        .filter(~Exists(Workflow.objects.filter(when_condition_group_id=OuterRef("id"))))
    )

    orphaned_action_ids = DataConditionGroupAction.objects.filter(
        Exists(orphaned_dcgs.filter(id=OuterRef("condition_group_id")))
    ).values_list("action__id", flat=True)

    orphaned_actions = Action.objects.filter(id__in=orphaned_action_ids)

    logger.info("orphaned action count: %s", orphaned_actions.count())
    logger.info("orphaned dcg count: %s", orphaned_dcgs.count())

    for action in orphaned_actions:
        action.delete()
    for dcg in orphaned_dcgs:
        dcg.delete()


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production.
    # This should only be used for operations where it's safe to run the migration after your
    # code has deployed. So this should not be used for most operations that alter the schema
    # of a table.
    # Here are some things that make sense to mark as post deployment:
    # - Large data migrations. Typically we want these to be run manually so that they can be
    #   monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   run this outside deployments so that we don't block them. Note that while adding an index
    #   is a schema change, it's completely safe to run the operation after the code has deployed.
    # Once deployed, run these manually via: https://develop.sentry.dev/database-migrations/#migration-deployment

    is_post_deployment = True

    dependencies = [
        ("workflow_engine", "0053_add_legacy_rule_indices"),
    ]

    operations = [
        migrations.RunPython(
            code=delete_orphaned_migrated_metric_alert_objects,
            reverse_code=migrations.RunPython.noop,
            hints={"tables": ["workflow_engine.DataConditionGroup"]},
        ),
    ]
