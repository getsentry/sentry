# Generated by Django 5.1.1 on 2024-12-05 18:15

import django.db.models.deletion
from django.db import migrations, models
from django.db.models import Q

import sentry.db.models.fields.bounded
import sentry.db.models.fields.foreignkey
from sentry.new_migrations.migrations import CheckedMigration


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production.
    # This should only be used for operations where it's safe to run the migration after your
    # code has deployed. So this should not be used for most operations that alter the schema
    # of a table.
    # Here are some things that make sense to mark as post deployment:
    # - Large data migrations. Typically we want these to be run manually so that they can be
    #   monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   run this outside deployments so that we don't block them. Note that while adding an index
    #   is a schema change, it's completely safe to run the operation after the code has deployed.
    # Once deployed, run these manually via: https://develop.sentry.dev/database-migrations/#migration-deployment

    is_post_deployment = False

    dependencies = [
        ("sentry", "0802_remove_grouping_auto_update_option"),
        ("workflow_engine", "0014_model_additions_for_milestones"),
    ]

    operations = [
        migrations.CreateModel(
            name="AlertRuleTriggerDataCondition",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                (
                    "alert_rule_trigger",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.alertruletrigger"
                    ),
                ),
                (
                    "data_condition",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="workflow_engine.datacondition",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="AlertRuleDetector",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                (
                    "alert_rule",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.alertrule",
                    ),
                ),
                (
                    "detector",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="workflow_engine.detector"
                    ),
                ),
                (
                    "rule",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="sentry.rule"
                    ),
                ),
            ],
            options={
                "db_table": "workflow_engine_alertruledetector",
                "constraints": [
                    models.CheckConstraint(
                        condition=Q(rule__isnull=False, alert_rule__isnull=True)
                        | Q(rule__isnull=True, alert_rule__isnull=False),
                        name="rule_or_alert_rule_detector",
                    )
                ],
                "unique_together": {("detector", "alert_rule"), ("detector", "rule")},
            },
        ),
        migrations.CreateModel(
            name="AlertRuleWorkflow",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                (
                    "alert_rule",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.alertrule",
                    ),
                ),
                (
                    "rule",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        null=True, on_delete=django.db.models.deletion.CASCADE, to="sentry.rule"
                    ),
                ),
                (
                    "workflow",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="workflow_engine.workflow"
                    ),
                ),
            ],
            options={
                "db_table": "workflow_engine_alertruleworkflow",
                "constraints": [
                    models.CheckConstraint(
                        condition=Q(rule__isnull=False, alert_rule__isnull=True)
                        | Q(rule__isnull=True, alert_rule__isnull=False),
                        name="rule_or_alert_rule_workflow",
                    )
                ],
                "unique_together": {("workflow", "alert_rule"), ("workflow", "rule")},
            },
        ),
    ]
