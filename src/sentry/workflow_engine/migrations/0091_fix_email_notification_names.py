# Generated by Django 5.2.1 on 2025-09-29 20:28
import logging
from typing import Any

from django.db import migrations
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.db.migrations.state import StateApps

from sentry.new_migrations.migrations import CheckedMigration

logger = logging.getLogger(__name__)

MAX_ACTIONS = 3


ACTION_TYPE_TO_STRING = {
    "discord": "Discord",
    "email": "Email",
    "github": "GitHub",
    "github_enterprise": "GitHub Enterprise",
    "jira": "Jira",
    "jira_server": "Jira Server",
    "msteams": "Microsoft Teams",
    "opsgenie": "Opsgenie",
    "pagerduty": "PagerDuty",
    "plugin": "Plugin",
    "sentry_app": "Sentry App",
    "slack": "Slack",
    "vsts": "Azure DevOps",
    "webhook": "Webhook",
}


def get_action_description(action: Any, apps: StateApps) -> str:
    """
    Returns a human readable action description based on the action type and config.
    Fixed version that looks up actual team/user names instead of using IDs.
    """
    action_type = action.type
    if action_type == "email":
        config = action.config or {}
        target_type = config.get("target_type")

        if target_type == 4:  # ISSUE_OWNERS
            return "Email Issue Owners"
        elif target_type == 2:  # TEAM
            target_identifier = config.get("target_identifier")
            if target_identifier:
                Team = apps.get_model("sentry", "Team")
                try:
                    team = Team.objects.get(id=target_identifier)
                    return f"Email {team.name}"
                except Team.DoesNotExist:
                    pass
            return "Email Team"
        elif target_type == 1:  # USER
            target_identifier = config.get("target_identifier")
            if target_identifier:
                User = apps.get_model("sentry", "User")
                try:
                    user = User.objects.get(id=target_identifier)
                    display_name = user.email or user.username or f"User #{target_identifier}"
                    return f"Email {display_name}"
                except User.DoesNotExist:
                    pass
            return "Email Member"
        else:
            return "Email"

    if action_type == "sentry_app":
        config = action.config or {}
        target_display = config.get("target_display")
        if target_display:
            return f"Notify {target_display}"
        return "Sentry App"

    if action_type in ACTION_TYPE_TO_STRING:
        config = action.config or {}
        if action_type in ["slack", "discord", "msteams"]:
            target_display = config.get("target_display")
            if target_display:
                return f"{ACTION_TYPE_TO_STRING[action_type]} {target_display}"

        return ACTION_TYPE_TO_STRING[action_type]

    return action_type.replace("_", " ").title()


def generate_workflow_name_from_actions(actions: list[Any], apps: StateApps) -> str:
    """
    Generate a workflow name based on actions like:
    'Notify: Email Team Name, Email Issue Owners...(+3)'
    """
    if not actions:
        return "Notify: Workflow"

    name_parts = []
    action_count = 0

    for action in actions[:MAX_ACTIONS]:
        description = get_action_description(action, apps)
        name_parts.append(description)
        action_count += 1

    if len(actions) > MAX_ACTIONS:
        remaining = len(actions) - MAX_ACTIONS
        name = ", ".join(name_parts)
        name += f"...(+{remaining})"
    else:
        name = ", ".join(name_parts)

    return f"Notify: {name}"


def fix_email_notification_names(apps: StateApps, schema_editor: BaseDatabaseSchemaEditor) -> None:
    """
    Fix workflow names that use team/user IDs instead of actual names.
    Changes "Notify: Email Team #1347487" to "Notify: Email Team Name"
    and "Notify: Email Member #2453577" to "Notify: Email user@email.com"
    """
    Workflow = apps.get_model("workflow_engine", "Workflow")
    Action = apps.get_model("workflow_engine", "Action")

    cron_workflows = list(
        Workflow.objects.filter(
            detectorworkflow__detector__type="monitor_check_in_failure"
        ).distinct()
    )

    if not cron_workflows:
        logger.info("No workflows linked to cron detectors, skipping fix")
        return

    workflows_updated = 0

    for workflow in cron_workflows:
        if not workflow.name or not workflow.name.startswith("Notify: "):
            continue

        if "Email Team #" not in workflow.name and "Email Member #" not in workflow.name:
            continue
        try:
            all_actions = list(
                Action.objects.filter(
                    dataconditiongroupaction__condition_group__workflowdataconditiongroup__workflow_id=workflow.id
                )
                .distinct()
                .order_by("id")
            )

            if all_actions:
                new_name = generate_workflow_name_from_actions(all_actions, apps)
                if new_name != workflow.name:
                    workflow.name = new_name
                    workflow.save(update_fields=["name"])
                    workflows_updated += 1
        except Exception:
            logger.exception("Failed to update workflow name")

    logger.info(
        "Fixed email notification names",
        extra={
            "workflows_updated": workflows_updated,
            "total_cron_workflows": len(cron_workflows),
        },
    )


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production.
    # This should only be used for operations where it's safe to run the migration after your
    # code has deployed. So this should not be used for most operations that alter the schema
    # of a table.
    # Here are some things that make sense to mark as post deployment:
    # - Large data migrations. Typically we want these to be run manually so that they can be
    #   monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   run this outside deployments so that we don't block them. Note that while adding an index
    #   is a schema change, it's completely safe to run the operation after the code has deployed.
    # Once deployed, run these manually via: https://develop.sentry.dev/database-migrations/#migration-deployment

    is_post_deployment = True

    dependencies = [
        ("workflow_engine", "0090_add_detectorgroup_detector_date_index"),
    ]

    operations = [
        migrations.RunPython(
            fix_email_notification_names,
            migrations.RunPython.noop,
            hints={"tables": ["workflow_engine_workflow", "workflow_engine_action"]},
        ),
    ]
