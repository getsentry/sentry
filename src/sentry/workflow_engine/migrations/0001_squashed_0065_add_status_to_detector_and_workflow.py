# Generated by Django 5.2.1 on 2025-05-21 16:30

import django.db.models.deletion
import django.db.models.functions.comparison
from django.db import migrations, models

import sentry.db.models.fields.bounded
import sentry.db.models.fields.foreignkey
import sentry.db.models.fields.hybrid_cloud_foreign_key
import sentry.db.models.fields.text
import sentry.db.models.fields.uuid
import sentry.workflow_engine.models.data_condition
import sentry.workflow_engine.models.data_condition_group
import sentry.workflow_engine.types
from sentry.new_migrations.migrations import CheckedMigration


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production.
    # This should only be used for operations where it's safe to run the migration after your
    # code has deployed. So this should not be used for most operations that alter the schema
    # of a table.
    # Here are some things that make sense to mark as post deployment:
    # - Large data migrations. Typically we want these to be run manually so that they can be
    #   monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   run this outside deployments so that we don't block them. Note that while adding an index
    #   is a schema change, it's completely safe to run the operation after the code has deployed.
    # Once deployed, run these manually via: https://develop.sentry.dev/database-migrations/#migration-deployment

    is_post_deployment = True

    replaces = [
        ("workflow_engine", "0001_workflow_table"),
        ("workflow_engine", "0002_data_source"),
        ("workflow_engine", "0003_detector"),
        ("workflow_engine", "0004_workflowactions"),
        ("workflow_engine", "0005_data_source_detector"),
        ("workflow_engine", "0006_data_conditions"),
        ("workflow_engine", "0007_loosen_workflow_action_relationship"),
        ("workflow_engine", "0008_detector_state"),
        ("workflow_engine", "0009_detector_type"),
        ("workflow_engine", "0010_detector_state_unique_group"),
        ("workflow_engine", "0011_action_updates"),
        ("workflow_engine", "0012_data_source_type_change"),
        ("workflow_engine", "0013_related_name_conditions_on_dcg"),
        ("workflow_engine", "0014_model_additions_for_milestones"),
        ("workflow_engine", "0015_create_rule_lookup_tables"),
        ("workflow_engine", "0016_refactor_action_model"),
        ("workflow_engine", "0017_ref_data_condition"),
        ("workflow_engine", "0018_rm_data_condition_condition"),
        ("workflow_engine", "0019_drop_dataconditions_condition"),
        ("workflow_engine", "0020_rm_legacy_notification_type"),
        ("workflow_engine", "0021_drop_legacy_notification_type"),
        ("workflow_engine", "0022_add_action_group_status_model"),
        ("workflow_engine", "0023_create_action_trigger_action_table"),
        ("workflow_engine", "0024_drop_trigger_data_condition_p1"),
        ("workflow_engine", "0025_drop_trigger_data_condition_p2"),
        ("workflow_engine", "0026_rm_org_detector_req_action_cols"),
        ("workflow_engine", "0027_drop_org_detector_req_action"),
        ("workflow_engine", "0028_wfe_change_query_id_to_source_id"),
        ("workflow_engine", "0029_ds_query_id_to_pending"),
        ("workflow_engine", "0030_allow_blank_workflow_owner_fks"),
        ("workflow_engine", "0031_make_detector_project_non_nullable"),
        ("workflow_engine", "0032_remove_data_source_query_id"),
        ("workflow_engine", "0033_workflow_name_256_char"),
        ("workflow_engine", "0034_action_cleanup_1"),
        ("workflow_engine", "0035_action_model_drop_legacy_fields"),
        ("workflow_engine", "0036_action_remove_legacy_fields"),
        ("workflow_engine", "0037_rm_workflow_name_unique_constraint"),
        ("workflow_engine", "0038_add_detector_workflow_unique_together"),
        ("workflow_engine", "0039_workflow_fire_history_table"),
        ("workflow_engine", "0040_break_lookup_fks"),
        ("workflow_engine", "0041_datacondition_alertruletrigger_lookup_table"),
        ("workflow_engine", "0042_workflow_fire_history_add_fired_actions_bool"),
        ("workflow_engine", "0043_create_incidentgroupopenperiod_lookup_table"),
        ("workflow_engine", "0044_rm_detector_name_unique_constraint"),
        ("workflow_engine", "0045_add_unique_constraint_alert_rule_detector"),
        ("workflow_engine", "0046_drop_metric_alert_fire_detectors"),
        ("workflow_engine", "0047_migrate_issue_alerts"),
        ("workflow_engine", "0048_fix_some_drift"),
        ("workflow_engine", "0049_migrate_metric_alerts"),
        ("workflow_engine", "0050_remove_orphaned_rule_workflows"),
        ("workflow_engine", "0051_migrate_remaining_issue_alerts"),
        ("workflow_engine", "0052_migrate_errored_metric_alerts"),
        ("workflow_engine", "0053_add_legacy_rule_indices"),
        ("workflow_engine", "0054_clean_up_orphaned_metric_alert_objects"),
        ("workflow_engine", "0055_datasource_define_indexes"),
        ("workflow_engine", "0056_workflow_fire_history_passed_filters_column"),
        ("workflow_engine", "0057_workflowengine_rename_column"),
        ("workflow_engine", "0058_add_inc_identifier_incidentgroupopenperiod"),
        ("workflow_engine", "0059_fix_high_priority_condition_triggers"),
        ("workflow_engine", "0060_rename_azure_devops_action_to_vsts"),
        ("workflow_engine", "0061_backfill_metric_alert_resolution_action_filters"),
        ("workflow_engine", "0062_workflow_engine_missing_indexes"),
        ("workflow_engine", "0063_drop_rollout_workflowfirehistory_columns"),
        ("workflow_engine", "0064_delete_rollout_workflowfirehistory_columns"),
        ("workflow_engine", "0065_add_status_to_detector_and_workflow"),
    ]

    initial = True

    checked = False  # This is an initial migration and can take locks

    dependencies = [
        ("sentry", "0001_squashed_0904_onboarding_task_project_id_idx"),
    ]

    operations = [
        migrations.CreateModel(
            name="Action",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                ("config", models.JSONField(db_default={})),
                ("type", models.TextField()),
                ("data", models.JSONField(default=dict)),
                (
                    "integration_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.Integration",
                        blank=True,
                        db_index=True,
                        null=True,
                        on_delete="CASCADE",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ActionAlertRuleTriggerAction",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                (
                    "alert_rule_trigger_action_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True),
                ),
                (
                    "action",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="workflow_engine.action"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DataConditionGroup",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                (
                    "logic_type",
                    models.CharField(
                        default=sentry.workflow_engine.models.data_condition_group.DataConditionGroup.Type[
                            "ANY"
                        ],
                        max_length=200,
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DataCondition",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                ("comparison", models.JSONField()),
                ("condition_result", models.JSONField()),
                (
                    "type",
                    models.CharField(
                        default=sentry.workflow_engine.models.data_condition.Condition["EQUAL"],
                        max_length=200,
                    ),
                ),
                (
                    "condition_group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="conditions",
                        to="workflow_engine.dataconditiongroup",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DataConditionGroupAction",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                (
                    "action",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="workflow_engine.action"
                    ),
                ),
                (
                    "condition_group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="workflow_engine.dataconditiongroup",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="DataSource",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                ("source_id", models.TextField()),
                ("type", models.TextField()),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DataSourceDetector",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                (
                    "data_source",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="workflow_engine.datasource"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Detector",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                ("config", models.JSONField(db_default={})),
                (
                    "owner_user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", blank=True, db_index=True, null=True, on_delete="SET_NULL"
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("enabled", models.BooleanField(db_default=True)),
                ("status", models.SmallIntegerField(db_default=0)),
                ("description", models.TextField(null=True)),
                ("type", models.CharField(max_length=200)),
                (
                    "created_by_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", db_index=True, null=True, on_delete="SET_NULL"
                    ),
                ),
                (
                    "data_sources",
                    models.ManyToManyField(
                        through="workflow_engine.DataSourceDetector",
                        to="workflow_engine.datasource",
                    ),
                ),
                (
                    "owner_team",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="sentry.team",
                    ),
                ),
                (
                    "project",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.project"
                    ),
                ),
                (
                    "workflow_condition_group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="workflow_engine.dataconditiongroup",
                        unique=True,
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="datasourcedetector",
            name="detector",
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="workflow_engine.detector"
            ),
        ),
        migrations.AddField(
            model_name="datasource",
            name="detectors",
            field=models.ManyToManyField(
                through="workflow_engine.DataSourceDetector", to="workflow_engine.detector"
            ),
        ),
        migrations.CreateModel(
            name="AlertRuleDetector",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                (
                    "alert_rule_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(
                        db_index=True, null=True
                    ),
                ),
                (
                    "rule_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(
                        db_index=True, null=True
                    ),
                ),
                (
                    "detector",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="workflow_engine.detector"
                    ),
                ),
            ],
            options={
                "db_table": "workflow_engine_alertruledetector",
            },
        ),
        migrations.CreateModel(
            name="DetectorState",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                ("detector_group_key", models.CharField(blank=True, max_length=200, null=True)),
                ("is_triggered", models.BooleanField(db_column="active", default=False)),
                (
                    "state",
                    models.CharField(
                        default=sentry.workflow_engine.types.DetectorPriorityLevel["OK"],
                        max_length=200,
                    ),
                ),
                (
                    "detector",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="workflow_engine.detector"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="IncidentGroupOpenPeriod",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                (
                    "incident_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True, unique=True),
                ),
                ("incident_identifier", models.IntegerField(null=True)),
                (
                    "group_open_period",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.groupopenperiod",
                        unique=True,
                    ),
                ),
            ],
            options={
                "db_table": "workflow_engine_incidentgroupopenperiod",
            },
        ),
        migrations.CreateModel(
            name="Workflow",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                ("config", models.JSONField(db_default={})),
                (
                    "owner_user_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", blank=True, db_index=True, null=True, on_delete="SET_NULL"
                    ),
                ),
                ("name", models.CharField(max_length=256)),
                ("enabled", models.BooleanField(db_default=True)),
                ("status", models.SmallIntegerField(db_default=0)),
                (
                    "created_by_id",
                    sentry.db.models.fields.hybrid_cloud_foreign_key.HybridCloudForeignKey(
                        "sentry.User", blank=True, db_index=True, null=True, on_delete="SET_NULL"
                    ),
                ),
                (
                    "environment",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.environment",
                    ),
                ),
                (
                    "organization",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.organization"
                    ),
                ),
                (
                    "owner_team",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="sentry.team",
                    ),
                ),
                (
                    "when_condition_group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="workflow_engine.dataconditiongroup",
                    ),
                ),
            ],
            options={
                "db_table": "workflow_engine_workflow",
            },
        ),
        migrations.CreateModel(
            name="DetectorWorkflow",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                (
                    "detector",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="workflow_engine.detector"
                    ),
                ),
                (
                    "workflow",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="workflow_engine.workflow"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="AlertRuleWorkflow",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                (
                    "alert_rule_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(
                        db_index=True, null=True
                    ),
                ),
                (
                    "rule_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(
                        db_index=True, null=True
                    ),
                ),
                (
                    "workflow",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="workflow_engine.workflow"
                    ),
                ),
            ],
            options={
                "db_table": "workflow_engine_alertruleworkflow",
            },
        ),
        migrations.CreateModel(
            name="WorkflowDataConditionGroup",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                (
                    "condition_group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="workflow_engine.dataconditiongroup",
                        unique=True,
                    ),
                ),
                (
                    "workflow",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="workflow_engine.workflow"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="WorkflowFireHistory",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                ("event_id", sentry.db.models.fields.text.CharField(max_length=32)),
                (
                    "notification_uuid",
                    sentry.db.models.fields.uuid.UUIDField(
                        editable=False, max_length=32, unique=True
                    ),
                ),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="sentry.group",
                    ),
                ),
                (
                    "workflow",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="workflow_engine.workflow"
                    ),
                ),
            ],
            options={
                "db_table": "workflow_engine_workflowfirehistory",
            },
        ),
        migrations.CreateModel(
            name="ActionGroupStatus",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                (
                    "action",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="workflow_engine.action"
                    ),
                ),
                (
                    "group",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="sentry.group"
                    ),
                ),
            ],
            options={
                "constraints": [
                    models.UniqueConstraint(
                        fields=("action", "group"), name="workflow_engine_uniq_action_group"
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="DataConditionAlertRuleTrigger",
            fields=[
                (
                    "id",
                    sentry.db.models.fields.bounded.BoundedBigAutoField(
                        primary_key=True, serialize=False
                    ),
                ),
                ("date_updated", models.DateTimeField(auto_now=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                (
                    "alert_rule_trigger_id",
                    sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
                ),
                (
                    "data_condition",
                    sentry.db.models.fields.foreignkey.FlexibleForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="workflow_engine.datacondition",
                    ),
                ),
            ],
            options={
                "db_table": "workflow_engine_dataconditionalertruletrigger",
                "constraints": [
                    models.UniqueConstraint(
                        fields=("alert_rule_trigger_id", "data_condition"),
                        name="workflow_engine_uniq_datacondition_alertruletrigger",
                    )
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="detector",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("owner_team__isnull", False), ("owner_user_id__isnull", True)),
                    models.Q(("owner_team__isnull", True), ("owner_user_id__isnull", False)),
                    models.Q(("owner_team__isnull", True), ("owner_user_id__isnull", True)),
                    _connector="OR",
                ),
                name="workflow_engine_detector_owner_constraints",
            ),
        ),
        migrations.AddConstraint(
            model_name="datasourcedetector",
            constraint=models.UniqueConstraint(
                fields=("data_source", "detector"), name="workflow_engine_uniq_datasource_detector"
            ),
        ),
        migrations.AddIndex(
            model_name="datasource",
            index=models.Index(fields=["type", "source_id"], name="workflow_en_type_66eafc_idx"),
        ),
        migrations.AddIndex(
            model_name="datasource",
            index=models.Index(
                fields=["organization", "type", "source_id"], name="workflow_en_organiz_d71f4a_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="alertruledetector",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("alert_rule_id__isnull", True), ("rule_id__isnull", False)),
                    models.Q(("alert_rule_id__isnull", False), ("rule_id__isnull", True)),
                    _connector="OR",
                ),
                name="rule_or_alert_rule_detector",
            ),
        ),
        migrations.AddConstraint(
            model_name="alertruledetector",
            constraint=models.UniqueConstraint(
                fields=("alert_rule_id",), name="workflow_engine_alert_rule_id"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="alertruledetector",
            unique_together={("detector", "alert_rule_id"), ("detector", "rule_id")},
        ),
        migrations.AddConstraint(
            model_name="detectorstate",
            constraint=models.UniqueConstraint(
                models.F("detector"),
                django.db.models.functions.comparison.Coalesce(
                    "detector_group_key", models.Value("")
                ),
                name="detector_state_unique_group_key",
            ),
        ),
        migrations.AddConstraint(
            model_name="incidentgroupopenperiod",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(
                        ("incident_identifier__isnull", False), ("incident_id__isnull", False)
                    ),
                    models.Q(("incident_identifier__isnull", True), ("incident_id__isnull", True)),
                    _connector="OR",
                ),
                name="inc_id_inc_identifier_together",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="detectorworkflow",
            unique_together={("detector", "workflow")},
        ),
        migrations.AddIndex(
            model_name="alertruleworkflow",
            index=models.Index(fields=["rule_id"], name="idx_arw_rule_id"),
        ),
        migrations.AddIndex(
            model_name="alertruleworkflow",
            index=models.Index(fields=["alert_rule_id"], name="idx_arw_alert_rule_id"),
        ),
        migrations.AddConstraint(
            model_name="alertruleworkflow",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    models.Q(("alert_rule_id__isnull", True), ("rule_id__isnull", False)),
                    models.Q(("alert_rule_id__isnull", False), ("rule_id__isnull", True)),
                    _connector="OR",
                ),
                name="rule_or_alert_rule_workflow",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="alertruleworkflow",
            unique_together={("workflow", "alert_rule_id"), ("workflow", "rule_id")},
        ),
    ]
