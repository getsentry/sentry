# Generated by Django 5.2.1
from collections import defaultdict

from django.db import migrations
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.db.migrations.state import StateApps

from sentry.new_migrations.migrations import CheckedMigration


def link_cron_detectors_to_all_workflows(
    apps: StateApps, schema_editor: BaseDatabaseSchemaEditor
) -> None:
    """
    For all detectors with type="monitor_check_in_failure" (cron monitors),
    create DetectorWorkflow entries linking them to all workflows associated with
    the same project (via AlertRuleWorkflow).

    This mimics the previous behavior where cron issues would fire all alert rules
    for a project.
    """
    Detector = apps.get_model("workflow_engine", "Detector")
    DetectorWorkflow = apps.get_model("workflow_engine", "DetectorWorkflow")
    Rule = apps.get_model("sentry", "Rule")
    Workflow = apps.get_model("workflow_engine", "Workflow")

    cron_detectors = Detector.objects.filter(type="monitor_check_in_failure")

    detectors_by_project = defaultdict(list)
    for detector in cron_detectors:
        detectors_by_project[detector.project_id].append(detector)

    # For each project, link all cron detectors to all workflows from that project
    for project_id, detectors in detectors_by_project.items():
        rule_ids = Rule.objects.filter(project_id=project_id).values_list("id", flat=True)
        project_workflows = Workflow.objects.filter(
            alertruleworkflow__rule_id__in=rule_ids
        ).distinct()

        for detector in detectors:
            for workflow in project_workflows:
                DetectorWorkflow.objects.get_or_create(detector=detector, workflow=workflow)


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production.
    # This should only be used for operations where it's safe to run the migration after your
    # code has deployed. So this should not be used for most operations that alter the schema
    # of a table.
    # Here are some things that make sense to mark as post deployment:
    # - Large data migrations. Typically we want these to be run manually so that they can be
    #   monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   run this outside deployments so that we don't block them. Note that while adding an index
    #   is a schema change, it's completely safe to run the operation after the code has deployed.
    # Once deployed, run these manually via: https://develop.sentry.dev/database-migrations/#migration-deployment

    is_post_deployment = True

    dependencies = [
        ("workflow_engine", "0084_crons_dedupe_workflows"),
    ]

    operations = [
        migrations.RunPython(
            link_cron_detectors_to_all_workflows,
            migrations.RunPython.noop,
            hints={"tables": ["workflow_engine_detectorworkflow"]},
        ),
    ]
