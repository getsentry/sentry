# Generated by Django 5.2.1
import logging

from django.db import migrations
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.db.migrations.state import StateApps

from sentry.new_migrations.migrations import CheckedMigration
from sentry.utils.query import RangeQuerySetWrapper

logger = logging.getLogger(__name__)


def repair_workflow_cron_conditions(
    apps: StateApps, schema_editor: BaseDatabaseSchemaEditor
) -> None:
    """
    Add back the monitor.slug condition to workflows not connected to cron detectors.
    """

    Rule = apps.get_model("sentry", "Rule")
    AlertRuleWorkflow = apps.get_model("workflow_engine", "AlertRuleWorkflow")
    Workflow = apps.get_model("workflow_engine", "Workflow")
    DataCondition = apps.get_model("workflow_engine", "DataCondition")
    WorkflowDataConditionGroup = apps.get_model("workflow_engine", "WorkflowDataConditionGroup")

    updated_rules = 0
    for rule in RangeQuerySetWrapper(Rule.objects.filter(source=0)):  # RuleSource.ISSUE
        conditions = rule.data.get("conditions", [])
        data_conditions_to_create = []
        for condition in conditions:
            if (
                condition["id"] == "sentry.rules.filters.tagged_event.TaggedEventFilter"
                and condition.get("key") == "monitor.slug"
            ):
                data_conditions_to_create.append(
                    {
                        "key": "monitor.slug",
                        "match": condition["match"],
                        "value": condition["value"],
                    }
                )

        if data_conditions_to_create:
            # find Workflow and WorkflowDataConditionGroup
            alert_rule_workflow = AlertRuleWorkflow.objects.filter(rule_id=rule.id).first()
            if not alert_rule_workflow:
                logger.info(
                    "No AlertRuleWorkflow found for rule, skipping",
                    extra={"rule_id": rule.id},
                )
                continue
            workflow = Workflow.objects.get(id=alert_rule_workflow.workflow_id)
            data_condition_group = WorkflowDataConditionGroup.objects.get(
                workflow_id=workflow.id
            ).condition_group
            for comparison in data_conditions_to_create:
                DataCondition.objects.create(
                    type="tagged_event",
                    comparison=comparison,
                    condition_result=True,
                    condition_group_id=data_condition_group.id,
                )
            updated_rules += 1

    logger.info(
        "Updated rules",
        extra={
            "rules_updated": updated_rules,
        },
    )


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production.
    # This should only be used for operations where it's safe to run the migration after your
    # code has deployed. So this should not be used for most operations that alter the schema
    # of a table.
    # Here are some things that make sense to mark as post deployment:
    # - Large data migrations. Typically we want these to be run manually so that they can be
    #   monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   run this outside deployments so that we don't block them. Note that while adding an index
    #   is a schema change, it's completely safe to run the operation after the code has deployed.
    # Once deployed, run these manually via: https://develop.sentry.dev/database-migrations/#migration-deployment

    is_post_deployment = True

    dependencies = [
        ("workflow_engine", "0091_fix_email_notification_names"),
    ]

    operations = [
        migrations.RunPython(
            repair_workflow_cron_conditions,
            migrations.RunPython.noop,
            hints={
                "tables": [
                    "workflow_engine_workflow",
                    "sentry_rule",
                    "workflow_engine_datacondition",
                ]
            },
        ),
    ]
