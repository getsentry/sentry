import csv
import re
import sys

from django.db import models
from sentry.models import Release, ReleaseFile, TagValue

def is_full_sha(version):
    # sha1 or md5
    return bool(re.match(r'[a-f0-9]{40}$', version) or re.match(r'[a-f0-9]{32}$', version))


def is_short_sha(version):
    # short sha
    return bool(re.match(r'[a-f0-9]{7,40}$', version))


def is_semver_like(version):
    return bool(re.match(r'([a-z]*)?(\-)?v?(?:\d+\.)*\d+', version))


def is_travis_build(version):
    # TRAVIS_12345
    return bool(re.match(r'(travis)(\_|\-)([a-f0-9]{1,40}$)', version, re.IGNORECASE))


def is_jenkins_build(version):
    # jenkins-123-abcdeff
    return bool(re.match(r'(jenkins)(\_|\-)([0-9]{1,40})(\_|\-)([a-f0-9]{5,40}$)', version, re.IGNORECASE))


def is_head_tag(version):
    # HEAD-abcdefg, master@abcdeff, master(abcdeff)
    return bool(re.match(r'(head|master|qa)(\_|\-|\@|\()([a-f0-9]{6,40})(\)?)$', version, re.IGNORECASE))


def is_short_sha_and_date(version):
    # abcdefg-2016-03-16
    return bool(re.match(r'([a-f0-9]{7,40})-(\d{4})-(\d{2})-(\d{2})', version))


def is_word_and_date(version):
    # release-2016-01-01
    return bool(re.match(r'([a-z]*)-(\d{4})-(\d{2})-(\d{2})', version))


def update_version(release):
    old_version = release.version
    try:
        project_slug = release.projects.values_list('slug', flat=True)[0]
    except IndexError:
        # delete releases if they have no projects
        release.delete()
        return 'release_deleted'
    new_version = ('%s-%s' % (project_slug, old_version))[:64]
    Release.objects.filter(
        id=release.id
    ).update(version=new_version)
    TagValue.objects.filter(
        project__in=release.projects.all(),
        key='sentry:release',
        value=old_version
    ).update(value=new_version)
    return 'updated_version'

def main(is_dry_run):

    fieldnames = ['org_id', 'release_id', 'version', 'date_added', 'action']
    writer = csv.DictWriter(sys.stdout, fieldnames=fieldnames)
    writer.writeheader()

    dupe_releases = Release.objects.values('version', 'organization_id')\
                                           .annotate(vcount=models.Count('id'))\
                                           .filter(vcount__gt=1)

    for r in dupe_releases:
        org_id = r['organization_id']
        version = r['version']

        releases = list(Release.objects.filter(
            organization_id=org_id,
            version=version
        ).order_by('date_added'))

        releases_with_files = list(ReleaseFile.objects.filter(
            release__in=releases
        ).values('release_id').distinct())

        # if multiple releases have files, just rename them
        # instead of trying to merge
        if len(releases_with_files) > 1:
            for release in releases:
                action = 'updated_version'
                if not is_dry_run:
                    action = update_version(release)
                writer.writerow({
                    'org_id': release.organization_id,
                    'release_id': release.id,
                    'version': release.version,
                    'date_added': release.date_added,
                    'action': action
                })
            continue

        if len(releases_with_files) == 1:
            from_releases = []
            for release in releases:
                if release.id == releases_with_files[0]['release_id']:
                    to_release = release
                else:
                    from_releases.append(release)
        else:
            to_release = releases[0]
            from_releases = releases[1:]

        if is_full_sha(version):
            if not is_dry_run:
                Release.merge(
                    to_release=to_release,
                    from_releases=from_releases
                )
            for release in [to_release] + from_releases:
                writer.writerow({
                    'org_id': release.organization_id,
                    'release_id': release.id,
                    'version': release.version,
                    'date_added': release.date_added,
                    'action': 'merge'
                })
            continue

        affected_projects = set()
        for release in releases:
            affected_projects.update([
                p for p in release.projects.values_list('slug', flat=True)
            ])
        has_prod = False
        has_staging = False
        has_dev = False
        for p in affected_projects:
            if 'prod' in p:
                has_prod = True
            elif 'stag' in p or 'stg' in p:
                has_staging = True
            elif 'dev' in p:
                has_dev = True
        # assume projects are split by environment if there
        # are at least prod/staging or prod/dev, etc
        projects_split_by_env = len([x for x in [has_prod, has_dev, has_staging] if x]) >= 2

        # compare date_added
        date_diff = None
        dates = [release.date_added for release in releases]
        if dates:
            diff = (max(dates) - min(dates)).total_seconds()
            if date_diff is None or diff > date_diff:
                date_diff = diff

        if is_short_sha(version) or \
                is_head_tag(version) or \
                is_short_sha_and_date(version):
            # if projects are across multiple environments, allow 1 week difference
            if projects_split_by_env and date_diff and date_diff < 604800:
                if not is_dry_run:
                    Release.merge(
                        to_release=to_release,
                        from_releases=from_releases,
                    )
                for release in [to_release] + from_releases:
                    writer.writerow({
                        'org_id': release.organization_id,
                        'release_id': release.id,
                        'version': release.version,
                        'date_added': release.date_added,
                        'action': 'merge'
                    })
                continue
            # +/- 8 hours
            if date_diff and date_diff > 28800:
                for release in releases:
                    action = 'updated_version'
                    if not is_dry_run:
                        action = update_version(release)
                    writer.writerow({
                        'org_id': release.organization_id,
                        'release_id': release.id,
                        'version': release.version,
                        'date_added': release.date_added,
                        'action': action
                    })
            else:
                if not is_dry_run:
                    Release.merge(
                        to_release=to_release,
                        from_releases=from_releases
                    )
                for release in [to_release] + from_releases:
                    writer.writerow({
                        'org_id': release.organization_id,
                        'release_id': release.id,
                        'version': release.version,
                        'date_added': release.date_added,
                        'action': 'merge'
                    })
            continue

        if is_semver_like(version):
            # check ref string and urls
            refs = {release.ref for release in releases}
            urls = {release.url for release in releases}
            if (len(refs) == 1 and None not in refs) or (len(urls) == 1 and None not in urls):
                if not is_dry_run:
                    Release.merge(
                        to_release=to_release,
                        from_releases=from_releases
                    )
                for release in [to_release] + from_releases:
                    writer.writerow({
                        'org_id': release.organization_id,
                        'release_id': release.id,
                        'version': release.version,
                        'date_added': release.date_added,
                        'action': 'merge'
                    })
                continue
            # if projects are across multiple environments, allow 1 week difference
            if projects_split_by_env and date_diff and date_diff < 604800:
                if not is_dry_run:
                    Release.merge(
                        to_release=to_release,
                        from_releases=from_releases
                    )
                for release in [to_release] + from_releases:
                    writer.writerow({
                        'org_id': release.organization_id,
                        'release_id': release.id,
                        'version': release.version,
                        'date_added': release.date_added,
                        'action': 'merge'
                    })
                continue
            # +/- 30 mins
            if date_diff and date_diff > 1800:
                for release in releases:
                    action = 'updated_version'
                    if not is_dry_run:
                        action = update_version(release)
                    writer.writerow({
                        'org_id': release.organization_id,
                        'release_id': release.id,
                        'version': release.version,
                        'date_added': release.date_added,
                        'action': action
                    })
            else:
                if not is_dry_run:
                    Release.merge(
                        to_release=to_release,
                        from_releases=from_releases
                    )
                for release in [to_release] + from_releases:
                    writer.writerow({
                        'org_id': release.organization_id,
                        'release_id': release.id,
                        'version': release.version,
                        'date_added': release.date_added,
                        'action': 'merge'
                    })
            continue

        if len(version) >= 20 or is_travis_build(version) or \
                is_jenkins_build(version) or \
                is_word_and_date(version):
            # if projects are across multiple environments, allow 1 week difference
            if projects_split_by_env and date_diff and date_diff < 604800:
                if not is_dry_run:
                    Release.merge(
                        to_release=to_release,
                        from_releases=from_releases
                    )
                for release in [to_release] + from_releases:
                    writer.writerow({
                        'org_id': release.organization_id,
                        'release_id': release.id,
                        'version': release.version,
                        'date_added': release.date_added,
                        'action': 'merge'
                    })
                continue
            # +/- 4 hours
            if date_diff and date_diff > 14400:
                for release in releases:
                    action = 'updated_version'
                    if not is_dry_run:
                        action = update_version(release)
                    writer.writerow({
                        'org_id': release.organization_id,
                        'release_id': release.id,
                        'version': release.version,
                        'date_added': release.date_added,
                        'action': action
                    })
            else:
                if not is_dry_run:
                    Release.merge(
                        to_release=to_release,
                        from_releases=from_releases
                    )
                for release in [to_release] + from_releases:
                    writer.writerow({
                        'org_id': release.organization_id,
                        'release_id': release.id,
                        'version': release.version,
                        'date_added': release.date_added,
                        'action': 'merge'
                    })
            continue

        # if we made it this far, assume we should just rename
        for release in releases:
            action = 'updated_version'
            if not is_dry_run:
                action = update_version(release)
            writer.writerow({
                'org_id': release.organization_id,
                'release_id': release.id,
                'version': release.version,
                'date_added': release.date_added,
                'action': action
            })


if __name__ == '__main__':

    from optparse import OptionParser

    parser = OptionParser()
    parser.add_option('--dry-run', dest='is_dry_run', action='store_true')
    parser.set_defaults(is_dry_run=False)

    (options, args) = parser.parse_args()

    try:
        main(options.is_dry_run)
    except Exception:
        # Avoid reporting any issues recursively back into Sentry
        import traceback
        import sys

        traceback.print_exc()
        sys.exit(1)
