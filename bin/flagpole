#!/usr/bin/env python

import argparse
import sys

import yaml

from flagpole import Feature
from flagpole.evaluation_context import EvaluationContext
from sentry.utils import json


def output(template, *args):
    print(template, *args)  # noqa: S002


def main():
    args = get_arguments()

    output("Evaluating a flag:")
    output("    File: ", args.get("flagpole_file"))
    output("    Flag Name: ", args.get("flag_name"))
    output("    Evaluation Context: ", args.get("context"))
    output("")

    evaluate_flag(args.get("flag_name"), args.get("flagpole_file"), args.get("context"))


def get_arguments():
    parser = argparse.ArgumentParser(
        description="Evaluate a flagpole flag.",
        epilog="""
Examples:
    %(prog)s --flagpole-file config/flagpole.yaml --flag-name my-feature-flag
    %(prog)s --flagpole-file config/flagpole.yaml --flag-name my-feature-flag --context '{"user_id": 123}'
    %(prog)s --flagpole-file config/flagpole.yaml --flag-name my-feature-flag '{"user_id": 123, "organization_id": 456}'
        """,
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument(
        "--flagpole-file",
        required=True,
        help="Path to the flagpole.yaml file containing flag definitions.",
    )
    parser.add_argument(
        "--flag-name",
        required=True,
        help="Name of the flag to evaluate from the flagpole file.",
    )
    parser.add_argument(
        "--context",
        required=False,
        help="JSON context object to evaluate the flag against (e.g., '{\"user_id\": 123}').",
    )
    (args, extra) = parser.parse_known_args()

    if args.context:
        context = json.loads(args.context)
    else:
        try:
            blob = [a for a in extra if a != "--"]
            context = json.loads(blob[0] or "{}")
        except json.JSONDecodeError:
            context = {}

    return {
        "context": context,
        "flag_name": args.flag_name,
        "flagpole_file": args.flagpole_file,
    }


def evaluate_flag(flag_name, flagpole_file, context):
    if not flag_name:
        output("Error: Flag name is required")
        output("")
        sys.exit(1)

    with open(flagpole_file) as f:
        content = f.read()
        parsed_yaml = yaml.safe_load(content)
        options = parsed_yaml.get("options")
        dfn = options.get(flag_name)

        feature = Feature.from_feature_dictionary(flag_name, dfn)

        context = EvaluationContext(context)
        output(feature.match(context))


if __name__ == "__main__":
    main()
