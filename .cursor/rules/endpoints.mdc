---
description:
globs: src/sentry/api/*.py,src/sentry/api/endpoints/*/*.py,src/sentry/*/endpoints/*.py
alwaysApply: false
---
# Sentry API Endpoint Development Rules

**Filepaths:** `src/sentry/*/endpoints/*.py`, `src/sentry/api/endpoints/*.py`

## Required Endpoint Structure

Every endpoint must include:
- `@region_silo_endpoint` or `@control_silo_endpoint` decorator
- `@extend_schema(...)` decorator on the class and on each HTTP method
- `publish_status` dictionary with `ApiPublishStatus` values
- `owner` attribute with `ApiOwner` enum value.
- `permission_classes` tuple

## Serializer Requirements

- Use `@extend_schema_serializer` with `component_name`
- Include `help_text` for all fields
- Use `@register(Model)` for response serializers
- Follow camelCase for response fields (e.g., `isPublic`, `dateCreated`)

## Pagination

**All list endpoints must be paginated** using `OffsetPaginator`:
```python
return self.paginate(
    request=request,
    queryset=queryset,
    order_by="-date_added",
    paginator_cls=OffsetPaginator,
    on_results=lambda x: serialize(x, request.user, serializer()),
)
```

## URL Configuration

- Add to `src/sentry/{app}/endpoints/urls.py` with `organization_urlpatterns`, `project_urlpatterns`, etc
- Import those urls into `src/sentry/api/urls.py`
- Include in `ORGANIZATION_URLS`, `PROJECT_URLS`, etc as applicable
- Use consistent naming: e.g. `sentry-api-0-organization-{resource-name}`

## Error Handling

- Return appropriate HTTP status codes (200, 201, 400, 401, 403, 404)
- Use `Response(serializer.errors, status=400)` for validation errors
- Handle `DoesNotExist` with `ResourceDoesNotExist`
