---
description: React Testing Library syntax and query patterns for *.spec.tsx files
globs: *.spec.tsx
alwaysApply: false
---

# React Testing Library Standards for Sentry

> **üìù Content Scope:** This file contains actionable syntax patterns and implementation details.
> For architectural principles and decision frameworks, see `AGENTS.md`.

## Test Execution

**Always run React tests with the CI flag** for non-interactive mode:

```bash
CI=true pnpm test <file_path>
```

## Required Imports

**Always** import from `sentry-test/reactTestingLibrary`, not directly from `@testing-library/react`:

```tsx
import {
  render,
  screen,
  userEvent,
  waitFor,
  within,
} from 'sentry-test/reactTestingLibrary';
```

## Sentry Fixtures

**Use Sentry fixtures instead of creating mock objects manually.**

Sentry fixtures are located in `tests/js/fixtures/` while GetSentry fixtures are in `tests/js/getsentry-test/fixtures/`.

```tsx
// ‚ùå Avoid manual object creation
import type {Project} from 'sentry/types/project';
const project: Project = {
  id: '1',
  name: 'Test Project',
  // ... many more properties
};

// ‚úÖ Use Sentry fixtures
import {ProjectFixture} from 'sentry-fixture/project';
const project = ProjectFixture({
  name: 'Test Project',
  // Only specify overrides
});
```

## Query Priority (in order of preference)

1. **`getByRole`** - Primary selector for most elements

   ```tsx
   screen.getByRole('button', { name: 'Save' })
   screen.getByRole('textbox', { name: 'Search' })
   ```

2. **`getByLabelText`/`getByPlaceholderText`** - For form elements

   ```tsx
   screen.getByLabelText('Email Address')
   screen.getByPlaceholderText('Enter Search Term')
   ```

3. **`getByText`** - For non-interactive elements

   ```tsx
   screen.getByText('Error Message')
   ```

4. **`getByTestId`** - Last resort only
   ```tsx
   screen.getByTestId('custom-component')
   ```

## Syntax Standards

### Use `screen` instead of destructuring

```tsx
// ‚ùå Don't do this
const { getByRole } = render(<Component />);

// ‚úÖ Do this
render(<Component />);
const button = screen.getByRole('button');
```

### Query selection guidelines

- Use `getBy...` for elements that should exist
- Use `queryBy...` ONLY when checking for non-existence
- Use `await findBy...` when waiting for elements to appear

```tsx
// ‚ùå Wrong
expect(screen.queryByRole('alert')).toBeInTheDocument();

// ‚úÖ Correct
expect(screen.getByRole('alert')).toBeInTheDocument();
expect(screen.queryByRole('button')).not.toBeInTheDocument();
```

### Async testing patterns

```tsx
// ‚ùå Don't use waitFor for appearance
await waitFor(() => {
  expect(screen.getByRole('alert')).toBeInTheDocument();
});

// ‚úÖ Use findBy for appearance
expect(await screen.findByRole('alert')).toBeInTheDocument();

// ‚úÖ Use waitForElementToBeRemoved for disappearance
await waitForElementToBeRemoved(() => screen.getByRole('alert'));
```

### User interaction syntax

```tsx
// ‚ùå Don't use fireEvent
fireEvent.change(input, { target: { value: 'text' } });

// ‚úÖ Use userEvent
await userEvent.click(input);
await userEvent.keyboard('text');
```

### Router testing syntax

```tsx
const { router } = render(<TestComponent />, {
  initialRouterConfig: {
    location: {
      pathname: "/foo/",
      query: { page: "1" },
    },
  },
});

// Check current route
expect(router.location.pathname).toBe("/foo");
expect(router.location.query.page).toBe("1");

// Test navigation
await userEvent.click(screen.getByRole("link", { name: "Go to /bar/" }));
expect(router.location.pathname).toBe("/bar/");

// Manual navigation
router.navigate("/new/path/");
router.navigate(-1); // Back button
```

### Mock API request syntax

```tsx
// Simple GET request
MockApiClient.addMockResponse({
  url: "/projects/",
  body: [{ id: 1, name: "my project" }],
});

// POST with matching
MockApiClient.addMockResponse({
  url: "/projects/",
  method: "POST",
  body: { id: 2, name: "other" },
  match: [
    MockApiClient.matchQuery({ param: "1" }),
    MockApiClient.matchData({ name: "other" }),
  ],
});

// Error responses
MockApiClient.addMockResponse({
  url: "/projects/",
  body: { detail: "Internal Error" },
  statusCode: 500,
});
```

## Documentation and Code Formatting

### Code Block Formatting

**Always add a newline before opening code block markers** (```):

````tsx
// ‚úÖ Correct - newline before opening ```
const Component = () => <div>Hello</div>;
````

````tsx
// ‚ùå Incorrect - no newline before opening ```
const Component = () => <div>Hello</div>;
````
