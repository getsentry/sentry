MATCH (generic_metrics_distributions)
SELECT arrayElement(quantilesIf(0.95)(value, equals(metric_id, 9223372036854775909)), 1) AS `p95_transaction_duration`
BY transaction, toStartOfInterval(timestamp, toIntervalSecond(3600), 'Universal') AS `time`
WHERE transform(tags_raw[9223372036854776020], array(''), array('<< unparameterized >>')) AS `transaction` IN array('/{organization_slug}/', 'sentry.sentry_metrics.consumers.indexer.processing.process_messages', 'sentry.tasks.process_buffer.process_incr') AND
timestamp >= toDateTime('2023-09-28T11:00:00') AND timestamp < toDateTime('2023-10-12T11:00:00')
AND project_id IN array(1) AND org_id = 1 AND
metric_id IN array(9223372036854775909)
ORDER BY transaction, toStartOfInterval(timestamp, toIntervalSecond(3600), 'Universal') AS `time` ASC LIMIT
10000 GRANULARITY 3600


--- how do I do this query? First just write out the snql in SDK form

-- Query from the SDK with transaction_names/org subbed out:


MATCH (generic_metrics_distributions)
SELECT project_id, arrayElement(quantilesIf(0.95)(value, equals(metric_id, 9223372036854775909)), 1) AS `p95`, transform(tags_raw[9223372036854776020], array(''), array('<< unparameterized >>')) AS `transaction_name`
BY transaction_name, project_id, toStartOfInterval(timestamp, toIntervalSecond(3600), 'Universal') AS `time`
WHERE org_id IN array(1) AND project_id IN array(1) AND timestamp >= toDateTime('2023-10-01T10:00:00') AND timestamp < toDateTime('2023-10-15T11:00:00') AND metric_id = 9223372036854775909 AND transaction_name IN array('/{organization_slug}/', 'sentry.sentry_metrics.consumers.indexer.processing.process_messages', 'sentry.tasks.process_buffer.process_incr')
ORDER BY transaction_name DESC, toStartOfInterval(timestamp, toIntervalSecond(3600), 'Universal') AS `time` ASC
LIMIT 10000
GRANULARITY 3600





-- next up: write a test just for the transactions function using the test params that already call it, test the new function against the old function, they should be the same
